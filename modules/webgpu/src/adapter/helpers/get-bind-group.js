import { Buffer, Sampler, Texture, log, cast } from '@luma.gl/core';
/**
 * Create a WebGPU "bind group layout" from an array of luma.gl bindings
 * @note bind groups can be automatically generated by WebGPU.
 */
export function makeBindGroupLayout(device, layout, bindings) {
    throw new Error('not implemented');
    // return device.createBindGroupLayout({
    //   layout,
    //   entries: getBindGroupEntries(bindings)
    // })
}
/**
 * Create a WebGPU "bind group" from an array of luma.gl bindings
 */
export function getBindGroup(device, bindGroupLayout, shaderLayout, bindings) {
    const entries = getBindGroupEntries(bindings, shaderLayout);
    return device.createBindGroup({
        layout: bindGroupLayout,
        entries
    });
}
export function getShaderLayoutBinding(shaderLayout, bindingName) {
    const bindingLayout = shaderLayout.bindings.find(binding => binding.name === bindingName || `${binding.name}uniforms` === bindingName.toLocaleLowerCase());
    if (!bindingLayout) {
        log.warn(`Binding ${bindingName} not set: Not found in shader layout.`)();
    }
    return bindingLayout;
}
/**
 * @param bindings
 * @returns
 */
function getBindGroupEntries(bindings, shaderLayout) {
    const entries = [];
    for (const [bindingName, value] of Object.entries(bindings)) {
        const bindingLayout = getShaderLayoutBinding(shaderLayout, bindingName);
        if (bindingLayout) {
            entries.push(getBindGroupEntry(value, bindingLayout.location));
        }
    }
    return entries;
}
function getBindGroupEntry(binding, index) {
    if (binding instanceof Buffer) {
        return {
            binding: index,
            resource: {
                buffer: cast(binding).handle
            }
        };
    }
    if (binding instanceof Sampler) {
        return {
            binding: index,
            resource: cast(binding).handle
        };
    }
    else if (binding instanceof Texture) {
        return {
            binding: index,
            resource: cast(binding).handle.createView({ label: 'bind-group-auto-created' })
        };
    }
    throw new Error('invalid binding');
}
