// luma.gl, MIT license
import type {ShaderLayout, BindingLayout, Binding} from '@luma.gl/api';
import {Buffer, Sampler, Texture, log, cast} from '@luma.gl/api';
import type WebGPUBuffer from '../resources/webgpu-buffer';
import type WebGPUSampler from '../resources/webgpu-sampler';
import type WebGPUTexture from '../resources/webgpu-texture';

/**
 * Create a WebGPU "bind group layout" from an array of luma.gl bindings
 * @note bind groups can be automatically generated by WebGPU.
 */
 export function makeBindGroupLayout(device: GPUDevice, layout: GPUBindGroupLayout, bindings: Binding[]): GPUBindGroupLayout {
  throw new Error('not implemented');
  // return device.createBindGroupLayout({
  //   layout,
  //   entries: getBindGroupEntries(bindings)
  // })
}

/**
 * Create a WebGPU "bind group" from an array of luma.gl bindings
 */
export function getBindGroup(
  device: GPUDevice,
  bindGroupLayout: GPUBindGroupLayout,
  layout: ShaderLayout,
  bindings: Record<string, Binding>
): GPUBindGroup {
  const entries = getBindGroupEntries(bindings, layout);
  return device.createBindGroup({
    layout: bindGroupLayout,
    entries
  });
}

export function getShaderLayoutBinding(layout: ShaderLayout, bindingName: string): BindingLayout {
  const bindingLayout = layout.bindings.find(binding => binding.name === bindingName);
  if (!bindingLayout) {
    log.warn(`Binding ${bindingName} not set: Not found in shader layout.`)();
  }
  return bindingLayout;
}

/**
 * @param bindings
 * @returns
 */
function getBindGroupEntries(bindings: Record<string, Binding>, layout: ShaderLayout): GPUBindGroupEntry[] {
  const entries: GPUBindGroupEntry[] = [];

  for (const [bindingName, value] of Object.entries(bindings)) {
    const bindingLayout = getShaderLayoutBinding(layout, bindingName);
    if (bindingLayout) {
      entries.push(getBindGroupEntry(value, bindingLayout.location));
    }
  }

  return entries;
}

function getBindGroupEntry(binding: Binding, index: number): GPUBindGroupEntry {
  if (binding instanceof Buffer) {
    return {
      binding: index,
      resource: {
        buffer: cast<WebGPUBuffer>(binding).handle
      }
    };
  }
  if (binding instanceof Sampler) {
    return {
      binding: index,
      resource: cast<WebGPUSampler>(binding).handle
    };
  } else if (binding instanceof Texture) {
    return {
      binding: index,
      resource: cast<WebGPUTexture>(binding).handle.createView()
    };
  }
  throw new Error('invalid binding');
}
