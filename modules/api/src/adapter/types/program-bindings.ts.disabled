// luma.gl, MIT license
import {VertexFormat} from '../types/types';
import {Accessor} from '../types/accessor';

/**
 * Describes an attribute binding for a program
 * @example
 * ```
  const bindings = [
    {name: 'instancePositions', location: 0, format: 'float32x2', stepMode: 'instance'},
    {name: 'instanceVelocities', location: 1, format: 'float32x2', stepMode: 'instance'},
    {name: 'vertexPositions', location: 2, format: 'float32x2', stepMode: 'vertex'}
  ];
  const bindings = {
    instancePositions: {location: 0, format: 'float32x2', stepMode: 'instance'},
    instanceVelocities: {location: 1, format: 'float32x2', stepMode: 'instance'},
    vertexPositions: {location: 2, format: 'float32x2', stepMode: 'vertex'}
  };
  const interleavings = [
    // interleaved bindings, auto offset
    particles: [
      {name: 'instancePositions', location: 0},
      {name: 'instanceVelocities', location: 1}
    ],
  ];
  ```
 * @example
 * ```
  const bindings = [
    // single buffer per binding
    {name: 'vertexPositions', location: 2, accessor: {format: 'float32x2'}}
    // interleaved bindings, auto offset
    {name: 'particles', stepMode: 'instance', fields: [
      {name: 'instancePositions', location: 0, format: 'float32x4'},
      {name: 'instanceVelocities', location: 1, format: 'float32x4'}
    ]},
  ]
  ```
 */
export type AttributeBinding = SingleAttributeBinding | InterleavedAttributeBinding;

/** @note Not public: not exported outside of api module */
export type SingleAttributeBinding = {
  name: string;
  location: number;
  /** @note defaults to vertex */
  stepMode?: 'vertex' | 'instance';
  /** WebGPU-style `format` string **/
  format: VertexFormat;
  /** offset into buffer @note `offset` defaults to zero */
  byteOffset?: number;
  /** bytes between successive elements @note `stride` is auto calculated if omitted */
  byteStride?: number;
}

/** @note Not public: not exported outside of api module */
export type InterleavedAttributeBinding = {
  name: string;
  stepMode?: 'vertex' | 'instance';
  /** bytes between successive elements @note `stride` is auto calculated if omitted */
  byteStride?: number;
  /** offset into buffer @note `offset` is auto calculated starting from zero */
  byteOffset?: number;
  fields: InterleavedAttribute[]
}

/** @note Not public: not exported outside of api module */
export type InterleavedAttribute = {
  name: string;
  location: number;
  format: VertexFormat;
  /** offset into buffer @note `offset` is auto calculated starting from zero */
  byteOffset?: number;
}

/** Describes a varying binding for a program */
export type VaryingBinding = {
  location: number;
  name: string;
  accessor: Accessor;
}

// Uniform bindings

/** Describes a uniform block binding for a program */
export type UniformBlockBinding = {
  location: number;
  name: string;
  byteLength: number;
  vertex: boolean;
  fragment: boolean;
  uniformCount: number;
  uniformIndices: number[];
}

/** Describes a uniform (sampler etc) binding for a program */
export type UniformBinding = {
  location: number;
  name: string;
  size: number;
  type: number;
  isArray: boolean;
}

/**
 * Holds metadata describing attribute configurations for a program's shaders
 */
export type ProgramBindings = {
  readonly attributes: AttributeBinding[];
  readonly varyings: VaryingBinding[];
  readonly uniformBlocks: UniformBlockBinding[];
  // Note - samplers are always in unform bindings, even if uniform blocks are used
  readonly uniforms: UniformBinding[];
}
