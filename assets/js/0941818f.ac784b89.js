/*! For license information please see 0941818f.ac784b89.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[796],{4290:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>t});var n=s(4848),d=s(8453);const i={},c="Shader",o={id:"api-reference/core/resources/shader",title:"Shader",description:"The Shader class holds a compiled shader.",source:"@site/../docs/api-reference/core/resources/shader.md",sourceDirName:"api-reference/core/resources",slug:"/api-reference/core/resources/shader",permalink:"/docs/api-reference/core/resources/shader",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/core/resources/shader.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Sampler",permalink:"/docs/api-reference/core/resources/sampler"},next:{title:"Shader Logs",permalink:"/docs/api-reference/core/shader-logs"}},l={},t=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"ShaderProps",id:"shaderprops",level:3},{value:"Members",id:"members",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>constructor(props: ShaderProps)</code>",id:"constructorprops-shaderprops",level:3},{value:"<code>destroy(): void</code>",id:"destroy-void",level:3},{value:"<code>getInfoLog(): Promise&lt;CompilerMessage[]&gt;</code>",id:"getinfolog-promisecompilermessage",level:3},{value:"<code>getTranslatedSource(): string | null</code>",id:"gettranslatedsource-string--null",level:3},{value:"<code>debugShader(trigger?: </code>&#39;error&#39; | &#39;never&#39; | &#39;warnings&#39; | &#39;always&#39;<code>): void</code>",id:"debugshadertrigger-error--never--warnings--always-void",level:3},{value:"Remarks",id:"remarks",level:2}];function a(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"shader",children:"Shader"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"Shader"})," class holds a compiled shader."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"It takes shader source code and compiles it during construction."}),"\n",(0,n.jsxs)(r.li,{children:["Shaders are used as inputs when creating ",(0,n.jsx)(r.code,{children:"RenderPipeline"})," and ",(0,n.jsx)(r.code,{children:"ComputePipeline"})," objects."]}),"\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.code,{children:"Shader"})," is immutable and the same compiled shader can safely be referenced by many pipelines."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(r.p,{children:"Create a pair of shaders"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"const vs = device.createShader({stage: 'vertex', source});\nconst fs = device.createShader({stage: 'fragment', source});\n"})}),"\n",(0,n.jsx)(r.h2,{id:"types",children:"Types"}),"\n",(0,n.jsx)(r.h3,{id:"shaderprops",children:"ShaderProps"}),"\n",(0,n.jsx)(r.p,{children:"Properties for a Shader"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Field"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"id"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"string"})}),(0,n.jsx)(r.td,{children:"name/identifier (for debugging)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"stage"})}),(0,n.jsx)(r.td,{children:"'vertex' | 'fragment' | 'compute'"}),(0,n.jsx)(r.td,{children:"Required by WebGL"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"source"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"string"})}),(0,n.jsx)(r.td,{children:"Shader source code"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"sourceMap?"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"string"})}),(0,n.jsx)(r.td,{children:"WebGPU only"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"language?"})}),(0,n.jsx)(r.td,{children:"'glsl' | 'wgsl'"}),(0,n.jsx)(r.td,{children:"wgsl in WebGPU only"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"entryPoint?"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"string"})}),(0,n.jsx)(r.td,{children:"WGSL only, name of main function"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"debug"})}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"'error'"})," (default) ",(0,n.jsx)(r.code,{children:"'never' | 'warnings' | 'always"})]}),(0,n.jsx)(r.td,{children:"Will show a popup in the canvas with error log"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"members",children:"Members"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"device"}),": ",(0,n.jsx)(r.code,{children:"Device"})," - holds a reference to the"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"handle"}),": ",(0,n.jsx)(r.code,{children:"unknown"})," - holds the underlying WebGL or WebGPU shader object"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"props"}),": ",(0,n.jsx)(r.code,{children:"ShaderProps"})," - holds a copy of the ",(0,n.jsx)(r.code,{children:"ShaderProps"})," used to create this ",(0,n.jsx)(r.code,{children:"Shader"}),"."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(r.h3,{id:"constructorprops-shaderprops",children:(0,n.jsx)(r.code,{children:"constructor(props: ShaderProps)"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"Shader"})," is an abstract class and cannot be instantiated directly. Create with ",(0,n.jsx)(r.code,{children:"device.createShader(...)"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"destroy-void",children:(0,n.jsx)(r.code,{children:"destroy(): void"})}),"\n",(0,n.jsx)(r.p,{children:"Free up any GPU resources associated with this shader immediately (instead of waiting for garbage collection)."}),"\n",(0,n.jsx)(r.h3,{id:"getinfolog-promisecompilermessage",children:(0,n.jsx)(r.code,{children:"getInfoLog(): Promise<CompilerMessage[]>"})}),"\n",(0,n.jsx)(r.p,{children:"Returns an array of CompilerMessage entries containing errors and warnings from the compilation."}),"\n",(0,n.jsx)(r.h3,{id:"gettranslatedsource-string--null",children:(0,n.jsx)(r.code,{children:"getTranslatedSource(): string | null"})}),"\n",(0,n.jsx)(r.p,{children:"On some WebGL 2 systems, it is possible to query the translated shader source in the host platform's native language (HLSL, GLSL, and even GLSL ES)."}),"\n",(0,n.jsxs)(r.h3,{id:"debugshadertrigger-error--never--warnings--always-void",children:[(0,n.jsx)(r.code,{children:"debugShader(trigger?: "}),"'error' | 'never' | 'warnings' | 'always'",(0,n.jsx)(r.code,{children:"): void"})]}),"\n",(0,n.jsxs)(r.p,{children:["Shows the shader log in a popup in the canvas if the debug condition is met ",(0,n.jsx)(r.code,{children:"'error' |\\ 'never' \\| 'warnings' \\| 'always'"}),".\nShows errors inline with the source code. If translated source is available (",(0,n.jsx)(r.code,{children:"getTranslatedSource()"}),"), shows the translated source after the original source.\nNote that translated source is only available if shader compilation succeeds."]}),"\n",(0,n.jsx)(r.h2,{id:"remarks",children:"Remarks"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Shader compilation is fairly fast, in particular compared to Pipeline linking."}),"\n",(0,n.jsx)(r.li,{children:"In WebGL, checking for shader compile status and pipeline link status is expensive as it forces a GPU sync."}),"\n",(0,n.jsxs)(r.li,{children:["Therefore checking is not done unless ",(0,n.jsx)(r.code,{children:"luma.log.level > 0"}),". If your program fails to render, please increase the level."]}),"\n",(0,n.jsxs)(r.li,{children:["If the ",(0,n.jsx)(r.code,{children:"shader-async-status-webgl"})," feature is available, WebGL will use async shader compilation and pipeline linking."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},1020:(e,r,s)=>{var n=s(6540),d=Symbol.for("react.element"),i=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,o=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function t(e,r,s){var n,i={},t=null,a=null;for(n in void 0!==s&&(t=""+s),void 0!==r.key&&(t=""+r.key),void 0!==r.ref&&(a=r.ref),r)c.call(r,n)&&!l.hasOwnProperty(n)&&(i[n]=r[n]);if(e&&e.defaultProps)for(n in r=e.defaultProps)void 0===i[n]&&(i[n]=r[n]);return{$$typeof:d,type:e,key:t,ref:a,props:i,_owner:o.current}}r.Fragment=i,r.jsx=t,r.jsxs=t},4848:(e,r,s)=>{e.exports=s(1020)},8453:(e,r,s)=>{s.d(r,{R:()=>c,x:()=>o});var n=s(6540);const d={},i=n.createContext(d);function c(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);