/*! For license information please see 99bdb424.55eec1c1.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[1139],{525:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var t=s(4848),r=s(8453);const i={},o="Computation",d={id:"api-reference/engine/compute/computation",title:"Computation",description:"The Computation class is a high-level class in the luma.gl API. It brings together all GPU functionality needed to run GPU compute shaders, in a single, easy-to-use interface.",source:"@site/../docs/api-reference/engine/compute/computation.md",sourceDirName:"api-reference/engine/compute",slug:"/api-reference/engine/compute/computation",permalink:"/docs/api-reference/engine/compute/computation",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/engine/compute/computation.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Swap",permalink:"/docs/api-reference/engine/compute/swap"},next:{title:"BufferTransform",permalink:"/docs/api-reference/engine/compute/buffer-transform"}},c={},l=[{value:"Usage",id:"usage",level:2},{value:"Provide attribute data using Buffer",id:"provide-attribute-data-using-buffer",level:3},{value:"Types",id:"types",level:2},{value:"<code>ComputationProps</code>",id:"computationprops",level:3},{value:"Fields",id:"fields",level:2},{value:"<code>pipeline: ComputePipeline</code>",id:"pipeline-computepipeline",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>constructor(device: Device, props: ComputationProps)</code>",id:"constructordevice-device-props-computationprops",level:3},{value:"<code>destroy(): void</code>",id:"destroy-void",level:3},{value:"<code>dispatch(pass: ComputePass, x, y, z)</code>",id:"dispatchpass-computepass-x-y-z",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"computation",children:"Computation"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Computation"})," class is a high-level class in the luma.gl API. It brings together all GPU functionality needed to run GPU compute shaders, in a single, easy-to-use interface."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Computation"})," manages the following responsibilities:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"bindings"})," these can reference textures and uniform buffers"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"shader module injection"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"debugging"})," - Detailed debug logging of draw calls"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Computation"})," class integrates with"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"@luma.gl/shadertools"})," shader module system: ",(0,t.jsxs)(n.a,{href:"/docs/api-reference/shadertools/shader-assembler",children:["see ",(0,t.jsx)(n.code,{children:"Shader Assembly"})]}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import {Computation} from `@luma.gl/engine`;\n"})}),"\n",(0,t.jsx)(n.p,{children:"One of the simplest way to provide attribute data is by using a Geometry object."}),"\n",(0,t.jsx)(n.p,{children:"Create model object by passing shaders, uniforms, geometry and render it by passing updated uniforms."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import {Computation} from `@luma.gl/engine`;\n// construct the model.\nconst model = new Computation(device, {\n  source: COMPUTE_SHADER,\n  bindings: {\n    uSampler: texture\n  },\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"provide-attribute-data-using-buffer",children:"Provide attribute data using Buffer"}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"Buffer"})," objects, data remains on GPU and same ",(0,t.jsx)(n.code,{children:"Buffer"})," object can be shared between multiple models."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// construct the model.\nconst model = new Computation(device, {\n  source: COMPUTE_SHADER,\n  attributes: {\n    attributeName1: bufferObject,\n    attributeName2: device.createBuffer(new Float32Array(...))\n  },\n  uniforms: {uSampler: texture},\n})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["On each frame, call the ",(0,t.jsx)(n.code,{children:"model.draw()"})," function after updating any uniforms (typically matrices)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"model.setUniforms({\n  uPMatrix: currentProjectionMatrix,\n  uMVMatrix: current ComputationViewMatrix\n});\nmodel.draw();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Debug shader source (even when shader successful)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// construct the model.\nconst model = new Computation(device, {\n  source: COMPUTE_SHADER,\n  debugShaders: 'always'\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,t.jsx)(n.h3,{id:"computationprops",children:(0,t.jsx)(n.code,{children:"ComputationProps"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"source"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Shader"})," | ",(0,t.jsx)(n.em,{children:"string"})]}),(0,t.jsx)(n.td,{children:"A vertex shader object, or source as a string."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"modules"})}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:"shader modules to be applied (shadertools)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pipelineFactory?"})}),(0,t.jsx)(n.td,{}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"PipelineFactory"})," to use for program creation and caching."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"debugShaders?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'error' | 'never' | 'warnings' | 'always'"})}),(0,t.jsxs)(n.td,{children:["Specify in what triggers the display shader compilation log (default: ",(0,t.jsx)(n.code,{children:"'error'"}),")."]})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ComputationProps"})," also include ",(0,t.jsx)(n.code,{children:"ComputePipelineProps"}),", which are passed through to the ",(0,t.jsx)(n.code,{children:"ComputePipeline"})," constructor, e.g:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"layout"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ShaderLayout"})}),(0,t.jsx)(n.td,{children:"Describes how shader attributes and bindings are laid out."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"bindings?"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Record<string, any>"})}),(0,t.jsx)(n.td,{})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"fields",children:"Fields"}),"\n",(0,t.jsx)(n.h3,{id:"pipeline-computepipeline",children:(0,t.jsx)(n.code,{children:"pipeline: ComputePipeline"})}),"\n",(0,t.jsxs)(n.p,{children:["The model's ",(0,t.jsx)(n.code,{children:"ComputePipeline"})," instance"]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"constructordevice-device-props-computationprops",children:(0,t.jsx)(n.code,{children:"constructor(device: Device, props: ComputationProps)"})}),"\n",(0,t.jsx)(n.p,{children:"The constructor for the Computation class. Use this to create a new Computation."}),"\n",(0,t.jsx)(n.h3,{id:"destroy-void",children:(0,t.jsx)(n.code,{children:"destroy(): void"})}),"\n",(0,t.jsx)(n.p,{children:"Free GPU resources associated with this model immediately, instead of waiting for garbage collection."}),"\n",(0,t.jsx)(n.h3,{id:"dispatchpass-computepass-x-y-z",children:(0,t.jsx)(n.code,{children:"dispatch(pass: ComputePass, x, y, z)"})}),"\n",(0,t.jsx)(n.p,{children:"Renders the model with provided uniforms, attributes and samplers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"computation.dispatch(computePass, 1);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},1020:(e,n,s)=>{var t=s(6540),r=Symbol.for("react.element"),i=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,d=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,s){var t,i={},l=null,a=null;for(t in void 0!==s&&(l=""+s),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(a=n.ref),n)o.call(n,t)&&!c.hasOwnProperty(t)&&(i[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===i[t]&&(i[t]=n[t]);return{$$typeof:r,type:e,key:l,ref:a,props:i,_owner:d.current}}n.Fragment=i,n.jsx=l,n.jsxs=l},4848:(e,n,s)=>{e.exports=s(1020)},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);