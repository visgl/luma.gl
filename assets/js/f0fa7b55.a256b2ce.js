"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[5611],{4322:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=s(4848),t=s(8453);const a={},i="AsyncTexture",c={id:"api-reference/engine/async-texture",title:"AsyncTexture",description:"The AsyncTexture class accepts promises that resolve to texture data (images or byte arrays). It postpones the creation of actual Textures until the supplied promise(s) resolve and data is available.",source:"@site/../docs/api-reference/engine/async-texture.md",sourceDirName:"api-reference/engine",slug:"/api-reference/engine/async-texture",permalink:"/docs/api-reference/engine/async-texture",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/master/docs/../docs/api-reference/engine/async-texture.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"AnimationLoopTemplate",permalink:"/docs/api-reference/engine/animation-loop-template"},next:{title:"loadImageBitmap",permalink:"/docs/api-reference/engine/load-image-bitmap"}},d={},l=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"Members",id:"members",level:2},{value:"<code>ready</code>",id:"ready",level:3},{value:"<code>isReady</code>",id:"isready",level:3},{value:"<code>texture</code>",id:"texture",level:3},{value:"<code>sampler</code>",id:"sampler",level:3},{value:"<code>view</code>",id:"view",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"Remarks",id:"remarks",level:2}];function o(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"asynctexture",children:"AsyncTexture"})}),"\n",(0,n.jsx)("p",{class:"badges",children:(0,n.jsx)("img",{src:"https://img.shields.io/badge/From-v9.1-blue.svg?style=flat-square",alt:"From-v9.1"})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"AsyncTexture"})," class accepts promises that resolve to texture data (images or byte arrays). It postpones the creation of actual ",(0,n.jsx)(r.code,{children:"Textures"})," until the supplied promise(s) resolve and data is available."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["The ",(0,n.jsx)(r.code,{children:"Model"})," class accepts ",(0,n.jsx)(r.code,{children:"AsyncTextures"})," as bindings (where a ",(0,n.jsx)(r.code,{children:"Texture"})," or ",(0,n.jsx)(r.code,{children:"TextureView"})," would be accepted), and defers rendering (i.e. ",(0,n.jsx)(r.code,{children:"Model.draw()"})," call execution) until the underlying texture has been created."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"import {AsyncTexture, loadImage} from '@luma.gl/engine';\nconst asyncTexture = new AsyncTexture({data: loadImage(url)});\nconst model = new Model(device, {source, bindings: {texture: asyncTexture}});\nconst renderPass = device.createRenderPass();\nmodel.draw(renderPass); // Doesn't draw\n...\nawait asyncTexture.ready; // Not necessary, just for illustration\nmodel.draw(renderPass); // Draws\n"})}),"\n",(0,n.jsx)(r.h2,{id:"types",children:"Types"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"export type AsyncTextureProps = Omit<TextureProps, 'data'> & AsyncTextureDataProps;\n\ntype AsyncTextureDataProps =\n  | AsyncTexture1DProps\n  | AsyncTexture2DProps\n  | AsyncTexture3DProps\n  | AsyncTextureArrayProps\n  | AsyncTextureCubeProps\n  | AsyncTextureCubeArrayProps;\n\ntype AsyncTexture1DProps = {dimension: '1d'; data: Promise<Texture1DData> | Texture1DData | null};\ntype AsyncTexture2DProps = {dimension?: '2d'; data: Promise<Texture2DData> | Texture2DData | null};\ntype AsyncTexture3DProps = {dimension: '3d'; data: Promise<Texture3DData> | Texture3DData | null};\ntype AsyncTextureArrayProps = {\n  dimension: '2d-array';\n  data: Promise<TextureArrayData> | TextureArrayData | null;\n};\ntype AsyncTextureCubeProps = {\n  dimension: 'cube';\n  data: Promise<TextureCubeData> | TextureCubeData | null;\n};\ntype AsyncTextureCubeArrayProps = {\n  dimension: 'cube-array';\n  data: Promise<TextureCubeArrayData> | TextureCubeArrayData | null;\n};\n"})}),"\n",(0,n.jsx)(r.h2,{id:"members",children:"Members"}),"\n",(0,n.jsx)(r.h3,{id:"ready",children:(0,n.jsx)(r.code,{children:"ready"})}),"\n",(0,n.jsxs)(r.p,{children:["A promise that resolves when the data has completed loading / preparation and the underlying GPU texture has been created and initialized, or rejects with an ",(0,n.jsx)(r.code,{children:"Error"})," instance describing the failure."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"ready: Promise<void>;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"isready",children:(0,n.jsx)(r.code,{children:"isReady"})}),"\n",(0,n.jsx)(r.p,{children:"A flag that indicates whether data loading / preparation has completed loading and the underlying GPU texture has been created and initialized."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"isReady: boolean;\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Initial value is ",(0,n.jsx)(r.code,{children:"false"}),". Once the ",(0,n.jsx)(r.code,{children:"asyncTexture.ready"})," promise resolve successfully, the ",(0,n.jsx)(r.code,{children:"asyncTexture.isReady"})," flag is guaranteed to be true."]}),"\n",(0,n.jsx)(r.h3,{id:"texture",children:(0,n.jsx)(r.code,{children:"texture"})}),"\n",(0,n.jsxs)(r.p,{children:["It is an error to access this member if ",(0,n.jsx)(r.code,{children:"asyncTexture.isReady"})," is not true)."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"texture: Texture;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"sampler",children:(0,n.jsx)(r.code,{children:"sampler"})}),"\n",(0,n.jsxs)(r.p,{children:["Shortcut to ",(0,n.jsx)(r.code,{children:"asyncTexture.texture.sampler"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["It is an error to access this member if ",(0,n.jsx)(r.code,{children:"asyncTexture.isReady"})," is not true)."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"sampler: Sampler;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"view",children:(0,n.jsx)(r.code,{children:"view"})}),"\n",(0,n.jsxs)(r.p,{children:["Shortcut to ",(0,n.jsx)(r.code,{children:"asyncTexture.texture.view"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["It is an error to access this member if ",(0,n.jsx)(r.code,{children:"asyncTexture.isReady"})," is not true)."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"view: TextureView;\n"})}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(r.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsxs)(r.p,{children:["Creates a new ",(0,n.jsx)(r.code,{children:"AsyncTexture"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"new AsyncTexture(device: Device, props: AsyncTextureProps);\n"})}),"\n",(0,n.jsx)(r.h2,{id:"remarks",children:"Remarks"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["As of v9.1, in order to streamline code across WebGL and WebGPU, ",(0,n.jsx)(r.code,{children:"Textures"})," no longer accept promises (for e.g. ",(0,n.jsx)(r.code,{children:"loadImage(url)"})," when setting data."]}),"\n",(0,n.jsx)(r.li,{children:"The AsyncTexture class can be seen as an optional convenience class that helps applications avoid tedious book keeping of texture data (image) loading."}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>c});var n=s(6540);const t={},a=n.createContext(t);function i(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);