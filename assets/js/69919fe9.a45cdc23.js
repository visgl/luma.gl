"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[5093],{1393:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});var r=i(4848),o=i(8453);const s={},c="ComputePipeline",t={id:"api-reference/core/resources/compute-pipeline",title:"ComputePipeline",description:"ComputePipeline is only available on WebGPU. Note on WebGL you can still perform",source:"@site/../docs/api-reference/core/resources/compute-pipeline.md",sourceDirName:"api-reference/core/resources",slug:"/api-reference/core/resources/compute-pipeline",permalink:"/docs/api-reference/core/resources/compute-pipeline",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/master/docs/../docs/api-reference/core/resources/compute-pipeline.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"ComputePass",permalink:"/docs/api-reference/core/resources/compute-pass"},next:{title:"Framebuffer",permalink:"/docs/api-reference/core/resources/framebuffer"}},d={},l=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"<code>ComputePipelineProps</code>",id:"computepipelineprops",level:3},{value:"Members",id:"members",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>constructor()</code>",id:"constructor",level:3},{value:"<code>destroy(): void</code>",id:"destroy-void",level:3}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"computepipeline",children:"ComputePipeline"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ComputePipeline"})," is only available on WebGPU. Note on WebGL you can still perform\nmany GPU computations on ",(0,r.jsx)(n.code,{children:"RenderPipeline"})," using ",(0,r.jsx)(n.code,{children:"TransformFeedback"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"ComputePipeline"})," holds a compiled and linked compute shader."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"Create and run a compute shader that multiplies an array of numbers by 2."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const source = /*WGSL*/`\\\n@group(0) @binding(0) var<storage, read_write> data: array<i32>;\n@compute @workgroup_size(1) fn main(@builtin(global_invocation_id) id: vec3<u32>) {\n  let i = id.x;\n  data[i] = 2 * data[i];\n}`;\n\nconst shader = webgpuDevice.createShader({source});\nconst computePipeline = webgpuDevice.createComputePipeline({\n  shader,\n  shaderLayout: {\n    bindings: [{name: 'data', type: 'storage', location: 0}]\n  }\n});\n\nconst workBuffer = webgpuDevice.createBuffer({\n  byteLength: 4,\n  usage: Buffer.STORAGE | Buffer.COPY_SRC | Buffer.COPY_DST,\n});\n\nworkBuffer.write(new Int32Array([2]));\n\ncomputePipeline.setBindings({data: workBuffer});\n\nconst computePass = webgpuDevice.beginComputePass({});\ncomputePass.setPipeline(computePipeline);\ncomputePass.dispatch(1);\ncomputePass.end();\n\nwebgpuDevice.submit();\n\nconst computedData = new Int32Array(await workBuffer.readAsync());\n// computedData[0] === 4\n"})}),"\n",(0,r.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,r.jsx)(n.h3,{id:"computepipelineprops",children:(0,r.jsx)(n.code,{children:"ComputePipelineProps"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"handle"}),": ",(0,r.jsx)(n.code,{children:"unknown"})," - holds the underlying WebGPU object"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"members",children:"Members"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"device"}),": ",(0,r.jsx)(n.code,{children:"Device"})," - holds a reference to the device that created this resource"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"handle"}),": ",(0,r.jsx)(n.code,{children:"unknown"})," - holds the underlying WebGPU object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"props"}),": ",(0,r.jsx)(n.code,{children:"ComputePipelineProps"})," - holds a copy of the ",(0,r.jsx)(n.code,{children:"ComputePipelineProps"})," used to create this ",(0,r.jsx)(n.code,{children:"ComputePipeline"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"constructor",children:(0,r.jsx)(n.code,{children:"constructor()"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ComputePipeline"})," is an abstract class and cannot be instantiated directly. Create with"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const computePipeline = device.createComputePipeline({...})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"destroy-void",children:(0,r.jsx)(n.code,{children:"destroy(): void"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"destroy(): void\n"})}),"\n",(0,r.jsx)(n.p,{children:"Free up any GPU resources associated with this compute pipeline immediately (instead of waiting for garbage collection)."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>t});var r=i(6540);const o={},s=r.createContext(o);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);