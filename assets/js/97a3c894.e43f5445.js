/*! For license information please see 97a3c894.e43f5445.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[8517],{787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=n(4848),r=n(8453);const s={},a="ShaderLayout",o={id:"api-reference/core/shader-layout",title:"ShaderLayout",description:'A ShaderLayout object describes the static structure a `RenderPipeline, "location" and structure of binding points of shaders,',source:"@site/../docs/api-reference/core/shader-layout.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/shader-layout",permalink:"/docs/api-reference/core/shader-layout",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/core/shader-layout.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Bindings",permalink:"/docs/api-reference/core/bindings"},next:{title:"Texture Formats",permalink:"/docs/api-reference/core/texture-formats"}},c={},d=[{value:"Usage",id:"usage",level:2},{value:"Usage",id:"usage-1",level:2},{value:"Fields",id:"fields",level:2},{value:"attributes",id:"attributes",level:3},{value:"bindings",id:"bindings",level:3},{value:"uniforms",id:"uniforms",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"shaderlayout",children:"ShaderLayout"}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.code,{children:"ShaderLayout"}),' object describes the static structure a `RenderPipeline, "location" and structure of binding points of shaders,\nincluding attributes, bindings (textures, samplers, uniform buffers), and uniforms (under WebGL) and also lets the application\nassign a name to each binding point (typically matching the name used in the shader code).']}),"\n",(0,i.jsxs)(t.p,{children:["Note that a ",(0,i.jsx)(t.code,{children:"ShaderLayout"})," only describes static data and it is typically complemented by a ",(0,i.jsx)(t.a,{href:"/docs/api-reference/core/buffer-layout",children:(0,i.jsx)(t.code,{children:"BufferLayout"})}),', which contains\n"dynamic" data such as the specific layout and structure of the buffers that will be provided to a ',(0,i.jsx)(t.code,{children:"RenderPipeline"}),". The application\ncould choose to provide buffers with different vertex formats, strides, and offsets, without changing the shader."]}),"\n",(0,i.jsx)(t.p,{children:"Shader code (WGSL and GLSL) contains declarations of attributes, uniform blocks, samplers etc, describing all required data inputs and outputs. After compilation and linking of fragment and vertex shaders into a pipeline, the resolved declarations collectively define the layout of the data that needs to be bound before the shader can execute on the GPU."}),"\n",(0,i.jsxs)(t.p,{children:["As a preparation to a ",(0,i.jsx)(t.code,{children:"RenderPipeline"})," ",(0,i.jsx)(t.code,{children:"draw()"})," call, the GPU data\nrequired by the pipeline's shaders must be bound on the CPU via luma.gl calls such as ",(0,i.jsx)(t.code,{children:"setAttributes()"}),", ",(0,i.jsx)(t.code,{children:"setIndexBuffer()"}),", ",(0,i.jsx)(t.code,{children:"setBindings()"})," etc.\nFor these calls to work, the metadata in the ",(0,i.jsx)(t.code,{children:"ShaderLayout"})," object is needed in JavaScript."]}),"\n",(0,i.jsxs)(t.p,{children:["Note that ",(0,i.jsx)(t.code,{children:"ShaderLayout"}),"s are designed to be created manually by a programmer (who needs to make sure all relevant declarations in the shader code are described in the ",(0,i.jsx)(t.code,{children:"ShaderLayout"}),")."]}),"\n",(0,i.jsx)(t.p,{children:"Remarks:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["In WebGL, a default ",(0,i.jsx)(t.code,{children:"ShaderLayout"})," is extracted automatically by the ",(0,i.jsx)(t.code,{children:"RenderPipeline"})," in WebGL.\nHowever this is not yet possible in WebGPU. Therefore it is necessary to provide an explicit ",(0,i.jsx)(t.code,{children:"layout"})," property to any ",(0,i.jsx)(t.code,{children:"RenderPipeline"})," that is expected to run in WebGPU. This restriction may be lifted in the future."]}),"\n",(0,i.jsxs)(t.li,{children:["It is not possible to automatically infer from a shader which attributes should have instanced step modes. The heuristic applied by luma.gl under WebGL is that any attribute which contains the string ",(0,i.jsx)(t.code,{children:"instanced"})," will be assumed to have ",(0,i.jsx)(t.code,{children:"stepMode='instance'"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"type ShaderLayout = {\n  attributes: [\n    instancePositions: {location: 0, format: 'float32x2', stepMode: 'instance'},\n    instanceVelocities: {location: 1, format: 'float32x2', stepMode: 'instance'},\n    vertexPositions: {location: 2, format: 'float32x2', stepMode: 'vertex'}\n  ],\n\n  bindings: {\n    projection: {location: 0, type: 'uniforms'},\n    textureSampler: {location: 1, type: 'sampler'},\n    texture: {location: 2, type: 'texture'}\n  }\n}\n\ntype AttributeLayout =\n  {name: , location: number, format: VertexFormat, stepMode: 'vertex' | 'instance'}\n\ntype BindingLayout =\n  {type: 'uniform', location: number} |\n  {type: 'sampler', location: number} |\n  {type: 'texture', location: number}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"usage-1",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"const shaderLayout: ShaderLayout = {\n  attributes:\n    'instancePositions': {location: 0, format: 'float32x2', stepMode: 'instance'},\n    'instanceVelocities': {location: 1, format: 'float32x2', stepMode: 'instance'},\n    'vertexPositions': {location: 2, format: 'float32x2', stepMode: 'vertex'}\n  },\n\n  bindings: {\n    'uniforms': {location: 0, type: 'uniforms'},\n    'sampler': {location: 1, type: 'sampler'},\n    'texture': {location: 2, type: 'texture'}\n  }\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"fields",children:"Fields"}),"\n",(0,i.jsx)(t.h3,{id:"attributes",children:"attributes"}),"\n",(0,i.jsx)(t.p,{children:"The attributes field declares structural information about the shader pipeline.\nIt contains  fixed information about each attribute such as its location (the index in the attribute bank, typically between 0-15) and whether the attribute is instanced."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"  attributes:\n    instancePositions: {location: 0, format: 'float32x2', stepMode: 'instance'},\n    instanceVelocities: {location: 1, format: 'float32x2', stepMode: 'instance'},\n    vertexPositions: {location: 2, format: 'float32x2', stepMode: 'vertex'}\n  }\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"location: number"}),' Compiled pipelines use small integer indices ("locations") to describe binding points (rather than string names). ',(0,i.jsx)(t.code,{children:"ShaderLayout"})," assigns names to each attribute which allows applications to avoid keeping track of these location indices."]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"format: VertexFormat"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"stepMode: 'vertex' | 'instance'"})," -"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"bindings",children:"bindings"}),"\n",(0,i.jsx)(t.p,{children:"Bindings cover textures, samplers and uniform buffers. location (index on the GPU)\nand type are the key pieces of information that need to be provided."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"  bindings?: {\n    projection: {location: 0, type: 'uniforms'},\n    textureSampler: {location: 1, type: 'sampler'},\n    texture: {location: 2, type: 'texture'}\n  }\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"location: number"}),' Compiled pipelines use small integer indices ("locations") to describe binding points (rather than string names). ',(0,i.jsx)(t.code,{children:"ShaderLayout"})," assigns names to each attribute which allows applications to avoid keeping track of these location indices."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"type: 'texture' | 'sampler' | uniform'"})," The type of bind point (texture, sampler or uniform buffer). WebGPU requires separate bind points for textures and samplers."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"uniforms",children:"uniforms"}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsx)(t.p,{children:"Uniforms are a WebGL-only concept. For portability it is recommended to use uniform buffers instead."})}),"\n",(0,i.jsx)(t.p,{children:"Any top-level shader uniforms (not part of a uniform buffer) should be declared in this field."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1020:(e,t,n)=>{var i=n(6540),r=Symbol.for("react.element"),s=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,o=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function d(e,t,n){var i,s={},d=null,l=null;for(i in void 0!==n&&(d=""+n),void 0!==t.key&&(d=""+t.key),void 0!==t.ref&&(l=t.ref),t)a.call(t,i)&&!c.hasOwnProperty(i)&&(s[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps)void 0===s[i]&&(s[i]=t[i]);return{$$typeof:r,type:e,key:d,ref:l,props:s,_owner:o.current}}t.Fragment=s,t.jsx=d,t.jsxs=d},4848:(e,t,n)=>{e.exports=n(1020)},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);