/*! For license information please see d1bb386a.bf6ca4b9.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[6924],{9557:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=t(4848),s=t(8453);const i={},o="Geometry",c={id:"api-reference/engine/geometry/geometry",title:"Geometry",description:"The Geometry class holds a collection of vertex array attributes representing a geometric primitive.",source:"@site/../docs/api-reference/engine/geometry/geometry.md",sourceDirName:"api-reference/engine/geometry",slug:"/api-reference/engine/geometry/",permalink:"/docs/api-reference/engine/geometry/",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/engine/geometry/geometry.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Built-in Geometries",permalink:"/docs/api-reference/engine/geometry/geometries"},next:{title:"KeyFrames",permalink:"/docs/api-reference/engine/animation/key-frames"}},d={},l=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>id: string</code>",id:"id-string",level:3},{value:"topology",id:"topology",level:3},{value:"<code>attributes</code>",id:"attributes",level:3},{value:"<code>indices</code>",id:"indices",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor(props : Object)",id:"constructorprops--object",level:3},{value:"setProps(props : Object)",id:"setpropsprops--object",level:3},{value:"Types and Enumerations",id:"types-and-enumerations",level:2},{value:"topology",id:"topology-1",level:3},{value:"Typical Attributes",id:"typical-attributes",level:3},{value:"Remarks",id:"remarks",level:2}];function a(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"geometry",children:"Geometry"}),"\n",(0,n.jsx)(r.p,{children:"The Geometry class holds a collection of vertex array attributes representing a geometric primitive."}),"\n",(0,n.jsxs)(r.p,{children:['A geometry is considered a "primitive" when it can be rendered with a single GPU draw call. Multiple geometry primitives can be composed into a composite geometry using the ',(0,n.jsx)(r.code,{children:"Mesh"})," and ",(0,n.jsx)(r.code,{children:"Model"})," classes."]}),"\n",(0,n.jsxs)(r.p,{children:["To learn more about attributes refer to the ",(0,n.jsx)(r.code,{children:"Accessor"})," class that holds metadata for each attributes."]}),"\n",(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(r.p,{children:"Create a pyramid geometry (used in lesson 4 of learning WebGL examples)."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"const pyramidGeometry= new Geometry({\n  attributes: {\n    positions: new Float32Array([ ... ]),\n    colors: {\n      size: 4,\n      value: new Float32Array([ ... ])\n    }\n  }\n});\n"})}),"\n",(0,n.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(r.h3,{id:"id-string",children:(0,n.jsx)(r.code,{children:"id: string"})}),"\n",(0,n.jsx)(r.p,{children:"An id for the model. If not provided, a random unique identifier will be created."}),"\n",(0,n.jsx)(r.h3,{id:"topology",children:"topology"}),"\n",(0,n.jsx)(r.p,{children:"The draw mode, or primitive type."}),"\n",(0,n.jsxs)(r.p,{children:["Some options are ",(0,n.jsx)(r.code,{children:"triangle-list"})," (default), ",(0,n.jsx)(r.code,{children:"triangle-strip"}),", ",(0,n.jsx)(r.code,{children:"point-list"}),", ",(0,n.jsx)(r.code,{children:"line-list"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"attributes",children:(0,n.jsx)(r.code,{children:"attributes"})}),"\n",(0,n.jsx)(r.p,{children:"An object with buffer/attribute names and buffer/attribute descriptors to be set before rendering the model."}),"\n",(0,n.jsx)(r.h3,{id:"indices",children:(0,n.jsx)(r.code,{children:"indices"})}),"\n",(0,n.jsxs)(r.p,{children:["An optional ",(0,n.jsx)(r.code,{children:"Accessor"})," instance that contains the indices (aka elements) for this geometry. Can be ",(0,n.jsx)(r.code,{children:"null"})," or ",(0,n.jsx)(r.code,{children:"undefined"})," if this primitive doesn't use indices. Note that indices can also be stored inside ",(0,n.jsx)(r.code,{children:"attributes"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(r.h3,{id:"constructorprops--object",children:"constructor(props : Object)"}),"\n",(0,n.jsxs)(r.p,{children:["The constructor for the ",(0,n.jsx)(r.code,{children:"Geometry"})," class. Use this to create a new ",(0,n.jsx)(r.code,{children:"Geometry"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"const geometry = new Geometry(props);\n"})}),"\n",(0,n.jsx)(r.h3,{id:"setpropsprops--object",children:"setProps(props : Object)"}),"\n",(0,n.jsx)(r.p,{children:"Update properties"}),"\n",(0,n.jsx)(r.h2,{id:"types-and-enumerations",children:"Types and Enumerations"}),"\n",(0,n.jsx)(r.h3,{id:"topology-1",children:"topology"}),"\n",(0,n.jsx)(r.p,{children:"Follows glTF/OpenGL/WebGL conventions:"}),"\n",(0,n.jsx)(r.h3,{id:"typical-attributes",children:"Typical Attributes"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Attribute"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"indices"})}),(0,n.jsxs)(r.td,{children:["(",(0,n.jsx)(r.em,{children:"array"}),", optional) An array of numbers describing the vertex indices for each face."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"positions"})}),(0,n.jsxs)(r.td,{children:["(",(0,n.jsx)(r.em,{children:"array"}),", optional) An array of floats that describe the vertices of the model."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"normals"})}),(0,n.jsxs)(r.td,{children:["(",(0,n.jsx)(r.em,{children:"array"}),", optional) An array of floats that describe the normals of the model."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"texCoords"})}),(0,n.jsxs)(r.td,{children:["(",(0,n.jsx)(r.em,{children:"mixed"}),", optional) Can be an array of floats indicating the texture coordinates for the texture to be used or an object that has texture ids as"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"colors"})}),(0,n.jsxs)(r.td,{children:["(",(0,n.jsx)(r.em,{children:"array"}),", optional) An array of colors in RGBA. If just one color is specified that color will be used for all faces."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"pickingColors"})}),(0,n.jsxs)(r.td,{children:["(",(0,n.jsx)(r.em,{children:"array"}),", optional) A custom set of colors to render the object to texture when performing the color picking algorithm."]})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"remarks",children:"Remarks"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["The Geometry class does not take a ",(0,n.jsx)(r.code,{children:"WebGLRenderingContext"})," and is intentionally"]}),"\n",(0,n.jsxs)(r.li,{children:["The ",(0,n.jsx)(r.code,{children:"Geometry"})," class holds the ",(0,n.jsx)(r.a,{href:"https://github.com/KhronosGroup/glTF/tree/master/specification/2.0",children:'glTF2 "primitive" specification'}),", although morph ",(0,n.jsx)(r.code,{children:"targets"})," are not yet supported."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},1020:(e,r,t)=>{var n=t(6540),s=Symbol.for("react.element"),i=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,c=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function l(e,r,t){var n,i={},l=null,a=null;for(n in void 0!==t&&(l=""+t),void 0!==r.key&&(l=""+r.key),void 0!==r.ref&&(a=r.ref),r)o.call(r,n)&&!d.hasOwnProperty(n)&&(i[n]=r[n]);if(e&&e.defaultProps)for(n in r=e.defaultProps)void 0===i[n]&&(i[n]=r[n]);return{$$typeof:s,type:e,key:l,ref:a,props:i,_owner:c.current}}r.Fragment=i,r.jsx=l,r.jsxs=l},4848:(e,r,t)=>{e.exports=t(1020)},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>c});var n=t(6540);const s={},i=n.createContext(s);function o(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);