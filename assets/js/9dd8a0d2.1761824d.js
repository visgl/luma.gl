"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[8617],{5981:(e,n,t)=>{t.d(n,{GL:()=>i});var i=function(e){return e[e.DEPTH_BUFFER_BIT=256]="DEPTH_BUFFER_BIT",e[e.STENCIL_BUFFER_BIT=1024]="STENCIL_BUFFER_BIT",e[e.COLOR_BUFFER_BIT=16384]="COLOR_BUFFER_BIT",e[e.POINTS=0]="POINTS",e[e.LINES=1]="LINES",e[e.LINE_LOOP=2]="LINE_LOOP",e[e.LINE_STRIP=3]="LINE_STRIP",e[e.TRIANGLES=4]="TRIANGLES",e[e.TRIANGLE_STRIP=5]="TRIANGLE_STRIP",e[e.TRIANGLE_FAN=6]="TRIANGLE_FAN",e[e.ZERO=0]="ZERO",e[e.ONE=1]="ONE",e[e.SRC_COLOR=768]="SRC_COLOR",e[e.ONE_MINUS_SRC_COLOR=769]="ONE_MINUS_SRC_COLOR",e[e.SRC_ALPHA=770]="SRC_ALPHA",e[e.ONE_MINUS_SRC_ALPHA=771]="ONE_MINUS_SRC_ALPHA",e[e.DST_ALPHA=772]="DST_ALPHA",e[e.ONE_MINUS_DST_ALPHA=773]="ONE_MINUS_DST_ALPHA",e[e.DST_COLOR=774]="DST_COLOR",e[e.ONE_MINUS_DST_COLOR=775]="ONE_MINUS_DST_COLOR",e[e.SRC_ALPHA_SATURATE=776]="SRC_ALPHA_SATURATE",e[e.CONSTANT_COLOR=32769]="CONSTANT_COLOR",e[e.ONE_MINUS_CONSTANT_COLOR=32770]="ONE_MINUS_CONSTANT_COLOR",e[e.CONSTANT_ALPHA=32771]="CONSTANT_ALPHA",e[e.ONE_MINUS_CONSTANT_ALPHA=32772]="ONE_MINUS_CONSTANT_ALPHA",e[e.FUNC_ADD=32774]="FUNC_ADD",e[e.FUNC_SUBTRACT=32778]="FUNC_SUBTRACT",e[e.FUNC_REVERSE_SUBTRACT=32779]="FUNC_REVERSE_SUBTRACT",e[e.BLEND_EQUATION=32777]="BLEND_EQUATION",e[e.BLEND_EQUATION_RGB=32777]="BLEND_EQUATION_RGB",e[e.BLEND_EQUATION_ALPHA=34877]="BLEND_EQUATION_ALPHA",e[e.BLEND_DST_RGB=32968]="BLEND_DST_RGB",e[e.BLEND_SRC_RGB=32969]="BLEND_SRC_RGB",e[e.BLEND_DST_ALPHA=32970]="BLEND_DST_ALPHA",e[e.BLEND_SRC_ALPHA=32971]="BLEND_SRC_ALPHA",e[e.BLEND_COLOR=32773]="BLEND_COLOR",e[e.ARRAY_BUFFER_BINDING=34964]="ARRAY_BUFFER_BINDING",e[e.ELEMENT_ARRAY_BUFFER_BINDING=34965]="ELEMENT_ARRAY_BUFFER_BINDING",e[e.LINE_WIDTH=2849]="LINE_WIDTH",e[e.ALIASED_POINT_SIZE_RANGE=33901]="ALIASED_POINT_SIZE_RANGE",e[e.ALIASED_LINE_WIDTH_RANGE=33902]="ALIASED_LINE_WIDTH_RANGE",e[e.CULL_FACE_MODE=2885]="CULL_FACE_MODE",e[e.FRONT_FACE=2886]="FRONT_FACE",e[e.DEPTH_RANGE=2928]="DEPTH_RANGE",e[e.DEPTH_WRITEMASK=2930]="DEPTH_WRITEMASK",e[e.DEPTH_CLEAR_VALUE=2931]="DEPTH_CLEAR_VALUE",e[e.DEPTH_FUNC=2932]="DEPTH_FUNC",e[e.STENCIL_CLEAR_VALUE=2961]="STENCIL_CLEAR_VALUE",e[e.STENCIL_FUNC=2962]="STENCIL_FUNC",e[e.STENCIL_FAIL=2964]="STENCIL_FAIL",e[e.STENCIL_PASS_DEPTH_FAIL=2965]="STENCIL_PASS_DEPTH_FAIL",e[e.STENCIL_PASS_DEPTH_PASS=2966]="STENCIL_PASS_DEPTH_PASS",e[e.STENCIL_REF=2967]="STENCIL_REF",e[e.STENCIL_VALUE_MASK=2963]="STENCIL_VALUE_MASK",e[e.STENCIL_WRITEMASK=2968]="STENCIL_WRITEMASK",e[e.STENCIL_BACK_FUNC=34816]="STENCIL_BACK_FUNC",e[e.STENCIL_BACK_FAIL=34817]="STENCIL_BACK_FAIL",e[e.STENCIL_BACK_PASS_DEPTH_FAIL=34818]="STENCIL_BACK_PASS_DEPTH_FAIL",e[e.STENCIL_BACK_PASS_DEPTH_PASS=34819]="STENCIL_BACK_PASS_DEPTH_PASS",e[e.STENCIL_BACK_REF=36003]="STENCIL_BACK_REF",e[e.STENCIL_BACK_VALUE_MASK=36004]="STENCIL_BACK_VALUE_MASK",e[e.STENCIL_BACK_WRITEMASK=36005]="STENCIL_BACK_WRITEMASK",e[e.VIEWPORT=2978]="VIEWPORT",e[e.SCISSOR_BOX=3088]="SCISSOR_BOX",e[e.COLOR_CLEAR_VALUE=3106]="COLOR_CLEAR_VALUE",e[e.COLOR_WRITEMASK=3107]="COLOR_WRITEMASK",e[e.UNPACK_ALIGNMENT=3317]="UNPACK_ALIGNMENT",e[e.PACK_ALIGNMENT=3333]="PACK_ALIGNMENT",e[e.MAX_TEXTURE_SIZE=3379]="MAX_TEXTURE_SIZE",e[e.MAX_VIEWPORT_DIMS=3386]="MAX_VIEWPORT_DIMS",e[e.SUBPIXEL_BITS=3408]="SUBPIXEL_BITS",e[e.RED_BITS=3410]="RED_BITS",e[e.GREEN_BITS=3411]="GREEN_BITS",e[e.BLUE_BITS=3412]="BLUE_BITS",e[e.ALPHA_BITS=3413]="ALPHA_BITS",e[e.DEPTH_BITS=3414]="DEPTH_BITS",e[e.STENCIL_BITS=3415]="STENCIL_BITS",e[e.POLYGON_OFFSET_UNITS=10752]="POLYGON_OFFSET_UNITS",e[e.POLYGON_OFFSET_FACTOR=32824]="POLYGON_OFFSET_FACTOR",e[e.TEXTURE_BINDING_2D=32873]="TEXTURE_BINDING_2D",e[e.SAMPLE_BUFFERS=32936]="SAMPLE_BUFFERS",e[e.SAMPLES=32937]="SAMPLES",e[e.SAMPLE_COVERAGE_VALUE=32938]="SAMPLE_COVERAGE_VALUE",e[e.SAMPLE_COVERAGE_INVERT=32939]="SAMPLE_COVERAGE_INVERT",e[e.COMPRESSED_TEXTURE_FORMATS=34467]="COMPRESSED_TEXTURE_FORMATS",e[e.VENDOR=7936]="VENDOR",e[e.RENDERER=7937]="RENDERER",e[e.VERSION=7938]="VERSION",e[e.IMPLEMENTATION_COLOR_READ_TYPE=35738]="IMPLEMENTATION_COLOR_READ_TYPE",e[e.IMPLEMENTATION_COLOR_READ_FORMAT=35739]="IMPLEMENTATION_COLOR_READ_FORMAT",e[e.BROWSER_DEFAULT_WEBGL=37444]="BROWSER_DEFAULT_WEBGL",e[e.STATIC_DRAW=35044]="STATIC_DRAW",e[e.STREAM_DRAW=35040]="STREAM_DRAW",e[e.DYNAMIC_DRAW=35048]="DYNAMIC_DRAW",e[e.ARRAY_BUFFER=34962]="ARRAY_BUFFER",e[e.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER",e[e.BUFFER_SIZE=34660]="BUFFER_SIZE",e[e.BUFFER_USAGE=34661]="BUFFER_USAGE",e[e.CURRENT_VERTEX_ATTRIB=34342]="CURRENT_VERTEX_ATTRIB",e[e.VERTEX_ATTRIB_ARRAY_ENABLED=34338]="VERTEX_ATTRIB_ARRAY_ENABLED",e[e.VERTEX_ATTRIB_ARRAY_SIZE=34339]="VERTEX_ATTRIB_ARRAY_SIZE",e[e.VERTEX_ATTRIB_ARRAY_STRIDE=34340]="VERTEX_ATTRIB_ARRAY_STRIDE",e[e.VERTEX_ATTRIB_ARRAY_TYPE=34341]="VERTEX_ATTRIB_ARRAY_TYPE",e[e.VERTEX_ATTRIB_ARRAY_NORMALIZED=34922]="VERTEX_ATTRIB_ARRAY_NORMALIZED",e[e.VERTEX_ATTRIB_ARRAY_POINTER=34373]="VERTEX_ATTRIB_ARRAY_POINTER",e[e.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=34975]="VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",e[e.CULL_FACE=2884]="CULL_FACE",e[e.FRONT=1028]="FRONT",e[e.BACK=1029]="BACK",e[e.FRONT_AND_BACK=1032]="FRONT_AND_BACK",e[e.BLEND=3042]="BLEND",e[e.DEPTH_TEST=2929]="DEPTH_TEST",e[e.DITHER=3024]="DITHER",e[e.POLYGON_OFFSET_FILL=32823]="POLYGON_OFFSET_FILL",e[e.SAMPLE_ALPHA_TO_COVERAGE=32926]="SAMPLE_ALPHA_TO_COVERAGE",e[e.SAMPLE_COVERAGE=32928]="SAMPLE_COVERAGE",e[e.SCISSOR_TEST=3089]="SCISSOR_TEST",e[e.STENCIL_TEST=2960]="STENCIL_TEST",e[e.NO_ERROR=0]="NO_ERROR",e[e.INVALID_ENUM=1280]="INVALID_ENUM",e[e.INVALID_VALUE=1281]="INVALID_VALUE",e[e.INVALID_OPERATION=1282]="INVALID_OPERATION",e[e.OUT_OF_MEMORY=1285]="OUT_OF_MEMORY",e[e.CONTEXT_LOST_WEBGL=37442]="CONTEXT_LOST_WEBGL",e[e.CW=2304]="CW",e[e.CCW=2305]="CCW",e[e.DONT_CARE=4352]="DONT_CARE",e[e.FASTEST=4353]="FASTEST",e[e.NICEST=4354]="NICEST",e[e.GENERATE_MIPMAP_HINT=33170]="GENERATE_MIPMAP_HINT",e[e.BYTE=5120]="BYTE",e[e.UNSIGNED_BYTE=5121]="UNSIGNED_BYTE",e[e.SHORT=5122]="SHORT",e[e.UNSIGNED_SHORT=5123]="UNSIGNED_SHORT",e[e.INT=5124]="INT",e[e.UNSIGNED_INT=5125]="UNSIGNED_INT",e[e.FLOAT=5126]="FLOAT",e[e.DOUBLE=5130]="DOUBLE",e[e.DEPTH_COMPONENT=6402]="DEPTH_COMPONENT",e[e.ALPHA=6406]="ALPHA",e[e.RGB=6407]="RGB",e[e.RGBA=6408]="RGBA",e[e.LUMINANCE=6409]="LUMINANCE",e[e.LUMINANCE_ALPHA=6410]="LUMINANCE_ALPHA",e[e.UNSIGNED_SHORT_4_4_4_4=32819]="UNSIGNED_SHORT_4_4_4_4",e[e.UNSIGNED_SHORT_5_5_5_1=32820]="UNSIGNED_SHORT_5_5_5_1",e[e.UNSIGNED_SHORT_5_6_5=33635]="UNSIGNED_SHORT_5_6_5",e[e.FRAGMENT_SHADER=35632]="FRAGMENT_SHADER",e[e.VERTEX_SHADER=35633]="VERTEX_SHADER",e[e.COMPILE_STATUS=35713]="COMPILE_STATUS",e[e.DELETE_STATUS=35712]="DELETE_STATUS",e[e.LINK_STATUS=35714]="LINK_STATUS",e[e.VALIDATE_STATUS=35715]="VALIDATE_STATUS",e[e.ATTACHED_SHADERS=35717]="ATTACHED_SHADERS",e[e.ACTIVE_ATTRIBUTES=35721]="ACTIVE_ATTRIBUTES",e[e.ACTIVE_UNIFORMS=35718]="ACTIVE_UNIFORMS",e[e.MAX_VERTEX_ATTRIBS=34921]="MAX_VERTEX_ATTRIBS",e[e.MAX_VERTEX_UNIFORM_VECTORS=36347]="MAX_VERTEX_UNIFORM_VECTORS",e[e.MAX_VARYING_VECTORS=36348]="MAX_VARYING_VECTORS",e[e.MAX_COMBINED_TEXTURE_IMAGE_UNITS=35661]="MAX_COMBINED_TEXTURE_IMAGE_UNITS",e[e.MAX_VERTEX_TEXTURE_IMAGE_UNITS=35660]="MAX_VERTEX_TEXTURE_IMAGE_UNITS",e[e.MAX_TEXTURE_IMAGE_UNITS=34930]="MAX_TEXTURE_IMAGE_UNITS",e[e.MAX_FRAGMENT_UNIFORM_VECTORS=36349]="MAX_FRAGMENT_UNIFORM_VECTORS",e[e.SHADER_TYPE=35663]="SHADER_TYPE",e[e.SHADING_LANGUAGE_VERSION=35724]="SHADING_LANGUAGE_VERSION",e[e.CURRENT_PROGRAM=35725]="CURRENT_PROGRAM",e[e.NEVER=512]="NEVER",e[e.LESS=513]="LESS",e[e.EQUAL=514]="EQUAL",e[e.LEQUAL=515]="LEQUAL",e[e.GREATER=516]="GREATER",e[e.NOTEQUAL=517]="NOTEQUAL",e[e.GEQUAL=518]="GEQUAL",e[e.ALWAYS=519]="ALWAYS",e[e.KEEP=7680]="KEEP",e[e.REPLACE=7681]="REPLACE",e[e.INCR=7682]="INCR",e[e.DECR=7683]="DECR",e[e.INVERT=5386]="INVERT",e[e.INCR_WRAP=34055]="INCR_WRAP",e[e.DECR_WRAP=34056]="DECR_WRAP",e[e.NEAREST=9728]="NEAREST",e[e.LINEAR=9729]="LINEAR",e[e.NEAREST_MIPMAP_NEAREST=9984]="NEAREST_MIPMAP_NEAREST",e[e.LINEAR_MIPMAP_NEAREST=9985]="LINEAR_MIPMAP_NEAREST",e[e.NEAREST_MIPMAP_LINEAR=9986]="NEAREST_MIPMAP_LINEAR",e[e.LINEAR_MIPMAP_LINEAR=9987]="LINEAR_MIPMAP_LINEAR",e[e.TEXTURE_MAG_FILTER=10240]="TEXTURE_MAG_FILTER",e[e.TEXTURE_MIN_FILTER=10241]="TEXTURE_MIN_FILTER",e[e.TEXTURE_WRAP_S=10242]="TEXTURE_WRAP_S",e[e.TEXTURE_WRAP_T=10243]="TEXTURE_WRAP_T",e[e.TEXTURE_2D=3553]="TEXTURE_2D",e[e.TEXTURE=5890]="TEXTURE",e[e.TEXTURE_CUBE_MAP=34067]="TEXTURE_CUBE_MAP",e[e.TEXTURE_BINDING_CUBE_MAP=34068]="TEXTURE_BINDING_CUBE_MAP",e[e.TEXTURE_CUBE_MAP_POSITIVE_X=34069]="TEXTURE_CUBE_MAP_POSITIVE_X",e[e.TEXTURE_CUBE_MAP_NEGATIVE_X=34070]="TEXTURE_CUBE_MAP_NEGATIVE_X",e[e.TEXTURE_CUBE_MAP_POSITIVE_Y=34071]="TEXTURE_CUBE_MAP_POSITIVE_Y",e[e.TEXTURE_CUBE_MAP_NEGATIVE_Y=34072]="TEXTURE_CUBE_MAP_NEGATIVE_Y",e[e.TEXTURE_CUBE_MAP_POSITIVE_Z=34073]="TEXTURE_CUBE_MAP_POSITIVE_Z",e[e.TEXTURE_CUBE_MAP_NEGATIVE_Z=34074]="TEXTURE_CUBE_MAP_NEGATIVE_Z",e[e.MAX_CUBE_MAP_TEXTURE_SIZE=34076]="MAX_CUBE_MAP_TEXTURE_SIZE",e[e.TEXTURE0=33984]="TEXTURE0",e[e.ACTIVE_TEXTURE=34016]="ACTIVE_TEXTURE",e[e.REPEAT=10497]="REPEAT",e[e.CLAMP_TO_EDGE=33071]="CLAMP_TO_EDGE",e[e.MIRRORED_REPEAT=33648]="MIRRORED_REPEAT",e[e.TEXTURE_WIDTH=4096]="TEXTURE_WIDTH",e[e.TEXTURE_HEIGHT=4097]="TEXTURE_HEIGHT",e[e.FLOAT_VEC2=35664]="FLOAT_VEC2",e[e.FLOAT_VEC3=35665]="FLOAT_VEC3",e[e.FLOAT_VEC4=35666]="FLOAT_VEC4",e[e.INT_VEC2=35667]="INT_VEC2",e[e.INT_VEC3=35668]="INT_VEC3",e[e.INT_VEC4=35669]="INT_VEC4",e[e.BOOL=35670]="BOOL",e[e.BOOL_VEC2=35671]="BOOL_VEC2",e[e.BOOL_VEC3=35672]="BOOL_VEC3",e[e.BOOL_VEC4=35673]="BOOL_VEC4",e[e.FLOAT_MAT2=35674]="FLOAT_MAT2",e[e.FLOAT_MAT3=35675]="FLOAT_MAT3",e[e.FLOAT_MAT4=35676]="FLOAT_MAT4",e[e.SAMPLER_2D=35678]="SAMPLER_2D",e[e.SAMPLER_CUBE=35680]="SAMPLER_CUBE",e[e.LOW_FLOAT=36336]="LOW_FLOAT",e[e.MEDIUM_FLOAT=36337]="MEDIUM_FLOAT",e[e.HIGH_FLOAT=36338]="HIGH_FLOAT",e[e.LOW_INT=36339]="LOW_INT",e[e.MEDIUM_INT=36340]="MEDIUM_INT",e[e.HIGH_INT=36341]="HIGH_INT",e[e.FRAMEBUFFER=36160]="FRAMEBUFFER",e[e.RENDERBUFFER=36161]="RENDERBUFFER",e[e.RGBA4=32854]="RGBA4",e[e.RGB5_A1=32855]="RGB5_A1",e[e.RGB565=36194]="RGB565",e[e.DEPTH_COMPONENT16=33189]="DEPTH_COMPONENT16",e[e.STENCIL_INDEX=6401]="STENCIL_INDEX",e[e.STENCIL_INDEX8=36168]="STENCIL_INDEX8",e[e.DEPTH_STENCIL=34041]="DEPTH_STENCIL",e[e.RENDERBUFFER_WIDTH=36162]="RENDERBUFFER_WIDTH",e[e.RENDERBUFFER_HEIGHT=36163]="RENDERBUFFER_HEIGHT",e[e.RENDERBUFFER_INTERNAL_FORMAT=36164]="RENDERBUFFER_INTERNAL_FORMAT",e[e.RENDERBUFFER_RED_SIZE=36176]="RENDERBUFFER_RED_SIZE",e[e.RENDERBUFFER_GREEN_SIZE=36177]="RENDERBUFFER_GREEN_SIZE",e[e.RENDERBUFFER_BLUE_SIZE=36178]="RENDERBUFFER_BLUE_SIZE",e[e.RENDERBUFFER_ALPHA_SIZE=36179]="RENDERBUFFER_ALPHA_SIZE",e[e.RENDERBUFFER_DEPTH_SIZE=36180]="RENDERBUFFER_DEPTH_SIZE",e[e.RENDERBUFFER_STENCIL_SIZE=36181]="RENDERBUFFER_STENCIL_SIZE",e[e.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=36048]="FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",e[e.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=36049]="FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",e[e.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=36050]="FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",e[e.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=36051]="FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",e[e.COLOR_ATTACHMENT0=36064]="COLOR_ATTACHMENT0",e[e.DEPTH_ATTACHMENT=36096]="DEPTH_ATTACHMENT",e[e.STENCIL_ATTACHMENT=36128]="STENCIL_ATTACHMENT",e[e.DEPTH_STENCIL_ATTACHMENT=33306]="DEPTH_STENCIL_ATTACHMENT",e[e.NONE=0]="NONE",e[e.FRAMEBUFFER_COMPLETE=36053]="FRAMEBUFFER_COMPLETE",e[e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT=36054]="FRAMEBUFFER_INCOMPLETE_ATTACHMENT",e[e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=36055]="FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",e[e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS=36057]="FRAMEBUFFER_INCOMPLETE_DIMENSIONS",e[e.FRAMEBUFFER_UNSUPPORTED=36061]="FRAMEBUFFER_UNSUPPORTED",e[e.FRAMEBUFFER_BINDING=36006]="FRAMEBUFFER_BINDING",e[e.RENDERBUFFER_BINDING=36007]="RENDERBUFFER_BINDING",e[e.READ_FRAMEBUFFER=36008]="READ_FRAMEBUFFER",e[e.DRAW_FRAMEBUFFER=36009]="DRAW_FRAMEBUFFER",e[e.MAX_RENDERBUFFER_SIZE=34024]="MAX_RENDERBUFFER_SIZE",e[e.INVALID_FRAMEBUFFER_OPERATION=1286]="INVALID_FRAMEBUFFER_OPERATION",e[e.UNPACK_FLIP_Y_WEBGL=37440]="UNPACK_FLIP_Y_WEBGL",e[e.UNPACK_PREMULTIPLY_ALPHA_WEBGL=37441]="UNPACK_PREMULTIPLY_ALPHA_WEBGL",e[e.UNPACK_COLORSPACE_CONVERSION_WEBGL=37443]="UNPACK_COLORSPACE_CONVERSION_WEBGL",e[e.READ_BUFFER=3074]="READ_BUFFER",e[e.UNPACK_ROW_LENGTH=3314]="UNPACK_ROW_LENGTH",e[e.UNPACK_SKIP_ROWS=3315]="UNPACK_SKIP_ROWS",e[e.UNPACK_SKIP_PIXELS=3316]="UNPACK_SKIP_PIXELS",e[e.PACK_ROW_LENGTH=3330]="PACK_ROW_LENGTH",e[e.PACK_SKIP_ROWS=3331]="PACK_SKIP_ROWS",e[e.PACK_SKIP_PIXELS=3332]="PACK_SKIP_PIXELS",e[e.TEXTURE_BINDING_3D=32874]="TEXTURE_BINDING_3D",e[e.UNPACK_SKIP_IMAGES=32877]="UNPACK_SKIP_IMAGES",e[e.UNPACK_IMAGE_HEIGHT=32878]="UNPACK_IMAGE_HEIGHT",e[e.MAX_3D_TEXTURE_SIZE=32883]="MAX_3D_TEXTURE_SIZE",e[e.MAX_ELEMENTS_VERTICES=33e3]="MAX_ELEMENTS_VERTICES",e[e.MAX_ELEMENTS_INDICES=33001]="MAX_ELEMENTS_INDICES",e[e.MAX_TEXTURE_LOD_BIAS=34045]="MAX_TEXTURE_LOD_BIAS",e[e.MAX_FRAGMENT_UNIFORM_COMPONENTS=35657]="MAX_FRAGMENT_UNIFORM_COMPONENTS",e[e.MAX_VERTEX_UNIFORM_COMPONENTS=35658]="MAX_VERTEX_UNIFORM_COMPONENTS",e[e.MAX_ARRAY_TEXTURE_LAYERS=35071]="MAX_ARRAY_TEXTURE_LAYERS",e[e.MIN_PROGRAM_TEXEL_OFFSET=35076]="MIN_PROGRAM_TEXEL_OFFSET",e[e.MAX_PROGRAM_TEXEL_OFFSET=35077]="MAX_PROGRAM_TEXEL_OFFSET",e[e.MAX_VARYING_COMPONENTS=35659]="MAX_VARYING_COMPONENTS",e[e.FRAGMENT_SHADER_DERIVATIVE_HINT=35723]="FRAGMENT_SHADER_DERIVATIVE_HINT",e[e.RASTERIZER_DISCARD=35977]="RASTERIZER_DISCARD",e[e.VERTEX_ARRAY_BINDING=34229]="VERTEX_ARRAY_BINDING",e[e.MAX_VERTEX_OUTPUT_COMPONENTS=37154]="MAX_VERTEX_OUTPUT_COMPONENTS",e[e.MAX_FRAGMENT_INPUT_COMPONENTS=37157]="MAX_FRAGMENT_INPUT_COMPONENTS",e[e.MAX_SERVER_WAIT_TIMEOUT=37137]="MAX_SERVER_WAIT_TIMEOUT",e[e.MAX_ELEMENT_INDEX=36203]="MAX_ELEMENT_INDEX",e[e.RED=6403]="RED",e[e.RGB8=32849]="RGB8",e[e.RGBA8=32856]="RGBA8",e[e.RGB10_A2=32857]="RGB10_A2",e[e.TEXTURE_3D=32879]="TEXTURE_3D",e[e.TEXTURE_WRAP_R=32882]="TEXTURE_WRAP_R",e[e.TEXTURE_MIN_LOD=33082]="TEXTURE_MIN_LOD",e[e.TEXTURE_MAX_LOD=33083]="TEXTURE_MAX_LOD",e[e.TEXTURE_BASE_LEVEL=33084]="TEXTURE_BASE_LEVEL",e[e.TEXTURE_MAX_LEVEL=33085]="TEXTURE_MAX_LEVEL",e[e.TEXTURE_COMPARE_MODE=34892]="TEXTURE_COMPARE_MODE",e[e.TEXTURE_COMPARE_FUNC=34893]="TEXTURE_COMPARE_FUNC",e[e.SRGB=35904]="SRGB",e[e.SRGB8=35905]="SRGB8",e[e.SRGB8_ALPHA8=35907]="SRGB8_ALPHA8",e[e.COMPARE_REF_TO_TEXTURE=34894]="COMPARE_REF_TO_TEXTURE",e[e.RGBA32F=34836]="RGBA32F",e[e.RGB32F=34837]="RGB32F",e[e.RGBA16F=34842]="RGBA16F",e[e.RGB16F=34843]="RGB16F",e[e.TEXTURE_2D_ARRAY=35866]="TEXTURE_2D_ARRAY",e[e.TEXTURE_BINDING_2D_ARRAY=35869]="TEXTURE_BINDING_2D_ARRAY",e[e.R11F_G11F_B10F=35898]="R11F_G11F_B10F",e[e.RGB9_E5=35901]="RGB9_E5",e[e.RGBA32UI=36208]="RGBA32UI",e[e.RGB32UI=36209]="RGB32UI",e[e.RGBA16UI=36214]="RGBA16UI",e[e.RGB16UI=36215]="RGB16UI",e[e.RGBA8UI=36220]="RGBA8UI",e[e.RGB8UI=36221]="RGB8UI",e[e.RGBA32I=36226]="RGBA32I",e[e.RGB32I=36227]="RGB32I",e[e.RGBA16I=36232]="RGBA16I",e[e.RGB16I=36233]="RGB16I",e[e.RGBA8I=36238]="RGBA8I",e[e.RGB8I=36239]="RGB8I",e[e.RED_INTEGER=36244]="RED_INTEGER",e[e.RGB_INTEGER=36248]="RGB_INTEGER",e[e.RGBA_INTEGER=36249]="RGBA_INTEGER",e[e.R8=33321]="R8",e[e.RG8=33323]="RG8",e[e.R16F=33325]="R16F",e[e.R32F=33326]="R32F",e[e.RG16F=33327]="RG16F",e[e.RG32F=33328]="RG32F",e[e.R8I=33329]="R8I",e[e.R8UI=33330]="R8UI",e[e.R16I=33331]="R16I",e[e.R16UI=33332]="R16UI",e[e.R32I=33333]="R32I",e[e.R32UI=33334]="R32UI",e[e.RG8I=33335]="RG8I",e[e.RG8UI=33336]="RG8UI",e[e.RG16I=33337]="RG16I",e[e.RG16UI=33338]="RG16UI",e[e.RG32I=33339]="RG32I",e[e.RG32UI=33340]="RG32UI",e[e.R8_SNORM=36756]="R8_SNORM",e[e.RG8_SNORM=36757]="RG8_SNORM",e[e.RGB8_SNORM=36758]="RGB8_SNORM",e[e.RGBA8_SNORM=36759]="RGBA8_SNORM",e[e.RGB10_A2UI=36975]="RGB10_A2UI",e[e.TEXTURE_IMMUTABLE_FORMAT=37167]="TEXTURE_IMMUTABLE_FORMAT",e[e.TEXTURE_IMMUTABLE_LEVELS=33503]="TEXTURE_IMMUTABLE_LEVELS",e[e.UNSIGNED_INT_2_10_10_10_REV=33640]="UNSIGNED_INT_2_10_10_10_REV",e[e.UNSIGNED_INT_10F_11F_11F_REV=35899]="UNSIGNED_INT_10F_11F_11F_REV",e[e.UNSIGNED_INT_5_9_9_9_REV=35902]="UNSIGNED_INT_5_9_9_9_REV",e[e.FLOAT_32_UNSIGNED_INT_24_8_REV=36269]="FLOAT_32_UNSIGNED_INT_24_8_REV",e[e.UNSIGNED_INT_24_8=34042]="UNSIGNED_INT_24_8",e[e.HALF_FLOAT=5131]="HALF_FLOAT",e[e.RG=33319]="RG",e[e.RG_INTEGER=33320]="RG_INTEGER",e[e.INT_2_10_10_10_REV=36255]="INT_2_10_10_10_REV",e[e.CURRENT_QUERY=34917]="CURRENT_QUERY",e[e.QUERY_RESULT=34918]="QUERY_RESULT",e[e.QUERY_RESULT_AVAILABLE=34919]="QUERY_RESULT_AVAILABLE",e[e.ANY_SAMPLES_PASSED=35887]="ANY_SAMPLES_PASSED",e[e.ANY_SAMPLES_PASSED_CONSERVATIVE=36202]="ANY_SAMPLES_PASSED_CONSERVATIVE",e[e.MAX_DRAW_BUFFERS=34852]="MAX_DRAW_BUFFERS",e[e.DRAW_BUFFER0=34853]="DRAW_BUFFER0",e[e.DRAW_BUFFER1=34854]="DRAW_BUFFER1",e[e.DRAW_BUFFER2=34855]="DRAW_BUFFER2",e[e.DRAW_BUFFER3=34856]="DRAW_BUFFER3",e[e.DRAW_BUFFER4=34857]="DRAW_BUFFER4",e[e.DRAW_BUFFER5=34858]="DRAW_BUFFER5",e[e.DRAW_BUFFER6=34859]="DRAW_BUFFER6",e[e.DRAW_BUFFER7=34860]="DRAW_BUFFER7",e[e.DRAW_BUFFER8=34861]="DRAW_BUFFER8",e[e.DRAW_BUFFER9=34862]="DRAW_BUFFER9",e[e.DRAW_BUFFER10=34863]="DRAW_BUFFER10",e[e.DRAW_BUFFER11=34864]="DRAW_BUFFER11",e[e.DRAW_BUFFER12=34865]="DRAW_BUFFER12",e[e.DRAW_BUFFER13=34866]="DRAW_BUFFER13",e[e.DRAW_BUFFER14=34867]="DRAW_BUFFER14",e[e.DRAW_BUFFER15=34868]="DRAW_BUFFER15",e[e.MAX_COLOR_ATTACHMENTS=36063]="MAX_COLOR_ATTACHMENTS",e[e.COLOR_ATTACHMENT1=36065]="COLOR_ATTACHMENT1",e[e.COLOR_ATTACHMENT2=36066]="COLOR_ATTACHMENT2",e[e.COLOR_ATTACHMENT3=36067]="COLOR_ATTACHMENT3",e[e.COLOR_ATTACHMENT4=36068]="COLOR_ATTACHMENT4",e[e.COLOR_ATTACHMENT5=36069]="COLOR_ATTACHMENT5",e[e.COLOR_ATTACHMENT6=36070]="COLOR_ATTACHMENT6",e[e.COLOR_ATTACHMENT7=36071]="COLOR_ATTACHMENT7",e[e.COLOR_ATTACHMENT8=36072]="COLOR_ATTACHMENT8",e[e.COLOR_ATTACHMENT9=36073]="COLOR_ATTACHMENT9",e[e.COLOR_ATTACHMENT10=36074]="COLOR_ATTACHMENT10",e[e.COLOR_ATTACHMENT11=36075]="COLOR_ATTACHMENT11",e[e.COLOR_ATTACHMENT12=36076]="COLOR_ATTACHMENT12",e[e.COLOR_ATTACHMENT13=36077]="COLOR_ATTACHMENT13",e[e.COLOR_ATTACHMENT14=36078]="COLOR_ATTACHMENT14",e[e.COLOR_ATTACHMENT15=36079]="COLOR_ATTACHMENT15",e[e.SAMPLER_3D=35679]="SAMPLER_3D",e[e.SAMPLER_2D_SHADOW=35682]="SAMPLER_2D_SHADOW",e[e.SAMPLER_2D_ARRAY=36289]="SAMPLER_2D_ARRAY",e[e.SAMPLER_2D_ARRAY_SHADOW=36292]="SAMPLER_2D_ARRAY_SHADOW",e[e.SAMPLER_CUBE_SHADOW=36293]="SAMPLER_CUBE_SHADOW",e[e.INT_SAMPLER_2D=36298]="INT_SAMPLER_2D",e[e.INT_SAMPLER_3D=36299]="INT_SAMPLER_3D",e[e.INT_SAMPLER_CUBE=36300]="INT_SAMPLER_CUBE",e[e.INT_SAMPLER_2D_ARRAY=36303]="INT_SAMPLER_2D_ARRAY",e[e.UNSIGNED_INT_SAMPLER_2D=36306]="UNSIGNED_INT_SAMPLER_2D",e[e.UNSIGNED_INT_SAMPLER_3D=36307]="UNSIGNED_INT_SAMPLER_3D",e[e.UNSIGNED_INT_SAMPLER_CUBE=36308]="UNSIGNED_INT_SAMPLER_CUBE",e[e.UNSIGNED_INT_SAMPLER_2D_ARRAY=36311]="UNSIGNED_INT_SAMPLER_2D_ARRAY",e[e.MAX_SAMPLES=36183]="MAX_SAMPLES",e[e.SAMPLER_BINDING=35097]="SAMPLER_BINDING",e[e.PIXEL_PACK_BUFFER=35051]="PIXEL_PACK_BUFFER",e[e.PIXEL_UNPACK_BUFFER=35052]="PIXEL_UNPACK_BUFFER",e[e.PIXEL_PACK_BUFFER_BINDING=35053]="PIXEL_PACK_BUFFER_BINDING",e[e.PIXEL_UNPACK_BUFFER_BINDING=35055]="PIXEL_UNPACK_BUFFER_BINDING",e[e.COPY_READ_BUFFER=36662]="COPY_READ_BUFFER",e[e.COPY_WRITE_BUFFER=36663]="COPY_WRITE_BUFFER",e[e.COPY_READ_BUFFER_BINDING=36662]="COPY_READ_BUFFER_BINDING",e[e.COPY_WRITE_BUFFER_BINDING=36663]="COPY_WRITE_BUFFER_BINDING",e[e.FLOAT_MAT2x3=35685]="FLOAT_MAT2x3",e[e.FLOAT_MAT2x4=35686]="FLOAT_MAT2x4",e[e.FLOAT_MAT3x2=35687]="FLOAT_MAT3x2",e[e.FLOAT_MAT3x4=35688]="FLOAT_MAT3x4",e[e.FLOAT_MAT4x2=35689]="FLOAT_MAT4x2",e[e.FLOAT_MAT4x3=35690]="FLOAT_MAT4x3",e[e.UNSIGNED_INT_VEC2=36294]="UNSIGNED_INT_VEC2",e[e.UNSIGNED_INT_VEC3=36295]="UNSIGNED_INT_VEC3",e[e.UNSIGNED_INT_VEC4=36296]="UNSIGNED_INT_VEC4",e[e.UNSIGNED_NORMALIZED=35863]="UNSIGNED_NORMALIZED",e[e.SIGNED_NORMALIZED=36764]="SIGNED_NORMALIZED",e[e.VERTEX_ATTRIB_ARRAY_INTEGER=35069]="VERTEX_ATTRIB_ARRAY_INTEGER",e[e.VERTEX_ATTRIB_ARRAY_DIVISOR=35070]="VERTEX_ATTRIB_ARRAY_DIVISOR",e[e.TRANSFORM_FEEDBACK_BUFFER_MODE=35967]="TRANSFORM_FEEDBACK_BUFFER_MODE",e[e.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS=35968]="MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",e[e.TRANSFORM_FEEDBACK_VARYINGS=35971]="TRANSFORM_FEEDBACK_VARYINGS",e[e.TRANSFORM_FEEDBACK_BUFFER_START=35972]="TRANSFORM_FEEDBACK_BUFFER_START",e[e.TRANSFORM_FEEDBACK_BUFFER_SIZE=35973]="TRANSFORM_FEEDBACK_BUFFER_SIZE",e[e.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN=35976]="TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",e[e.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS=35978]="MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",e[e.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS=35979]="MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",e[e.INTERLEAVED_ATTRIBS=35980]="INTERLEAVED_ATTRIBS",e[e.SEPARATE_ATTRIBS=35981]="SEPARATE_ATTRIBS",e[e.TRANSFORM_FEEDBACK_BUFFER=35982]="TRANSFORM_FEEDBACK_BUFFER",e[e.TRANSFORM_FEEDBACK_BUFFER_BINDING=35983]="TRANSFORM_FEEDBACK_BUFFER_BINDING",e[e.TRANSFORM_FEEDBACK=36386]="TRANSFORM_FEEDBACK",e[e.TRANSFORM_FEEDBACK_PAUSED=36387]="TRANSFORM_FEEDBACK_PAUSED",e[e.TRANSFORM_FEEDBACK_ACTIVE=36388]="TRANSFORM_FEEDBACK_ACTIVE",e[e.TRANSFORM_FEEDBACK_BINDING=36389]="TRANSFORM_FEEDBACK_BINDING",e[e.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING=33296]="FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",e[e.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE=33297]="FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",e[e.FRAMEBUFFER_ATTACHMENT_RED_SIZE=33298]="FRAMEBUFFER_ATTACHMENT_RED_SIZE",e[e.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE=33299]="FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",e[e.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE=33300]="FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",e[e.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE=33301]="FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",e[e.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE=33302]="FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",e[e.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE=33303]="FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",e[e.FRAMEBUFFER_DEFAULT=33304]="FRAMEBUFFER_DEFAULT",e[e.DEPTH24_STENCIL8=35056]="DEPTH24_STENCIL8",e[e.DRAW_FRAMEBUFFER_BINDING=36006]="DRAW_FRAMEBUFFER_BINDING",e[e.READ_FRAMEBUFFER_BINDING=36010]="READ_FRAMEBUFFER_BINDING",e[e.RENDERBUFFER_SAMPLES=36011]="RENDERBUFFER_SAMPLES",e[e.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER=36052]="FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",e[e.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE=36182]="FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",e[e.UNIFORM_BUFFER=35345]="UNIFORM_BUFFER",e[e.UNIFORM_BUFFER_BINDING=35368]="UNIFORM_BUFFER_BINDING",e[e.UNIFORM_BUFFER_START=35369]="UNIFORM_BUFFER_START",e[e.UNIFORM_BUFFER_SIZE=35370]="UNIFORM_BUFFER_SIZE",e[e.MAX_VERTEX_UNIFORM_BLOCKS=35371]="MAX_VERTEX_UNIFORM_BLOCKS",e[e.MAX_FRAGMENT_UNIFORM_BLOCKS=35373]="MAX_FRAGMENT_UNIFORM_BLOCKS",e[e.MAX_COMBINED_UNIFORM_BLOCKS=35374]="MAX_COMBINED_UNIFORM_BLOCKS",e[e.MAX_UNIFORM_BUFFER_BINDINGS=35375]="MAX_UNIFORM_BUFFER_BINDINGS",e[e.MAX_UNIFORM_BLOCK_SIZE=35376]="MAX_UNIFORM_BLOCK_SIZE",e[e.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS=35377]="MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",e[e.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS=35379]="MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",e[e.UNIFORM_BUFFER_OFFSET_ALIGNMENT=35380]="UNIFORM_BUFFER_OFFSET_ALIGNMENT",e[e.ACTIVE_UNIFORM_BLOCKS=35382]="ACTIVE_UNIFORM_BLOCKS",e[e.UNIFORM_TYPE=35383]="UNIFORM_TYPE",e[e.UNIFORM_SIZE=35384]="UNIFORM_SIZE",e[e.UNIFORM_BLOCK_INDEX=35386]="UNIFORM_BLOCK_INDEX",e[e.UNIFORM_OFFSET=35387]="UNIFORM_OFFSET",e[e.UNIFORM_ARRAY_STRIDE=35388]="UNIFORM_ARRAY_STRIDE",e[e.UNIFORM_MATRIX_STRIDE=35389]="UNIFORM_MATRIX_STRIDE",e[e.UNIFORM_IS_ROW_MAJOR=35390]="UNIFORM_IS_ROW_MAJOR",e[e.UNIFORM_BLOCK_BINDING=35391]="UNIFORM_BLOCK_BINDING",e[e.UNIFORM_BLOCK_DATA_SIZE=35392]="UNIFORM_BLOCK_DATA_SIZE",e[e.UNIFORM_BLOCK_ACTIVE_UNIFORMS=35394]="UNIFORM_BLOCK_ACTIVE_UNIFORMS",e[e.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES=35395]="UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",e[e.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER=35396]="UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",e[e.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER=35398]="UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",e[e.OBJECT_TYPE=37138]="OBJECT_TYPE",e[e.SYNC_CONDITION=37139]="SYNC_CONDITION",e[e.SYNC_STATUS=37140]="SYNC_STATUS",e[e.SYNC_FLAGS=37141]="SYNC_FLAGS",e[e.SYNC_FENCE=37142]="SYNC_FENCE",e[e.SYNC_GPU_COMMANDS_COMPLETE=37143]="SYNC_GPU_COMMANDS_COMPLETE",e[e.UNSIGNALED=37144]="UNSIGNALED",e[e.SIGNALED=37145]="SIGNALED",e[e.ALREADY_SIGNALED=37146]="ALREADY_SIGNALED",e[e.TIMEOUT_EXPIRED=37147]="TIMEOUT_EXPIRED",e[e.CONDITION_SATISFIED=37148]="CONDITION_SATISFIED",e[e.WAIT_FAILED=37149]="WAIT_FAILED",e[e.SYNC_FLUSH_COMMANDS_BIT=1]="SYNC_FLUSH_COMMANDS_BIT",e[e.COLOR=6144]="COLOR",e[e.DEPTH=6145]="DEPTH",e[e.STENCIL=6146]="STENCIL",e[e.MIN=32775]="MIN",e[e.MAX=32776]="MAX",e[e.DEPTH_COMPONENT24=33190]="DEPTH_COMPONENT24",e[e.STREAM_READ=35041]="STREAM_READ",e[e.STREAM_COPY=35042]="STREAM_COPY",e[e.STATIC_READ=35045]="STATIC_READ",e[e.STATIC_COPY=35046]="STATIC_COPY",e[e.DYNAMIC_READ=35049]="DYNAMIC_READ",e[e.DYNAMIC_COPY=35050]="DYNAMIC_COPY",e[e.DEPTH_COMPONENT32F=36012]="DEPTH_COMPONENT32F",e[e.DEPTH32F_STENCIL8=36013]="DEPTH32F_STENCIL8",e[e.INVALID_INDEX=4294967295]="INVALID_INDEX",e[e.TIMEOUT_IGNORED=-1]="TIMEOUT_IGNORED",e[e.MAX_CLIENT_WAIT_TIMEOUT_WEBGL=37447]="MAX_CLIENT_WAIT_TIMEOUT_WEBGL",e[e.UNMASKED_VENDOR_WEBGL=37445]="UNMASKED_VENDOR_WEBGL",e[e.UNMASKED_RENDERER_WEBGL=37446]="UNMASKED_RENDERER_WEBGL",e[e.MAX_TEXTURE_MAX_ANISOTROPY_EXT=34047]="MAX_TEXTURE_MAX_ANISOTROPY_EXT",e[e.TEXTURE_MAX_ANISOTROPY_EXT=34046]="TEXTURE_MAX_ANISOTROPY_EXT",e[e.R16_EXT=33322]="R16_EXT",e[e.RG16_EXT=33324]="RG16_EXT",e[e.RGB16_EXT=32852]="RGB16_EXT",e[e.RGBA16_EXT=32859]="RGBA16_EXT",e[e.R16_SNORM_EXT=36760]="R16_SNORM_EXT",e[e.RG16_SNORM_EXT=36761]="RG16_SNORM_EXT",e[e.RGB16_SNORM_EXT=36762]="RGB16_SNORM_EXT",e[e.RGBA16_SNORM_EXT=36763]="RGBA16_SNORM_EXT",e[e.COMPRESSED_RGB_S3TC_DXT1_EXT=33776]="COMPRESSED_RGB_S3TC_DXT1_EXT",e[e.COMPRESSED_RGBA_S3TC_DXT1_EXT=33777]="COMPRESSED_RGBA_S3TC_DXT1_EXT",e[e.COMPRESSED_RGBA_S3TC_DXT3_EXT=33778]="COMPRESSED_RGBA_S3TC_DXT3_EXT",e[e.COMPRESSED_RGBA_S3TC_DXT5_EXT=33779]="COMPRESSED_RGBA_S3TC_DXT5_EXT",e[e.COMPRESSED_SRGB_S3TC_DXT1_EXT=35916]="COMPRESSED_SRGB_S3TC_DXT1_EXT",e[e.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT=35917]="COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT",e[e.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT=35918]="COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT",e[e.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT=35919]="COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT",e[e.COMPRESSED_RED_RGTC1_EXT=36283]="COMPRESSED_RED_RGTC1_EXT",e[e.COMPRESSED_SIGNED_RED_RGTC1_EXT=36284]="COMPRESSED_SIGNED_RED_RGTC1_EXT",e[e.COMPRESSED_RED_GREEN_RGTC2_EXT=36285]="COMPRESSED_RED_GREEN_RGTC2_EXT",e[e.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT=36286]="COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT",e[e.COMPRESSED_RGBA_BPTC_UNORM_EXT=36492]="COMPRESSED_RGBA_BPTC_UNORM_EXT",e[e.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT=36493]="COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT",e[e.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT=36494]="COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT",e[e.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT=36495]="COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT",e[e.COMPRESSED_R11_EAC=37488]="COMPRESSED_R11_EAC",e[e.COMPRESSED_SIGNED_R11_EAC=37489]="COMPRESSED_SIGNED_R11_EAC",e[e.COMPRESSED_RG11_EAC=37490]="COMPRESSED_RG11_EAC",e[e.COMPRESSED_SIGNED_RG11_EAC=37491]="COMPRESSED_SIGNED_RG11_EAC",e[e.COMPRESSED_RGB8_ETC2=37492]="COMPRESSED_RGB8_ETC2",e[e.COMPRESSED_RGBA8_ETC2_EAC=37493]="COMPRESSED_RGBA8_ETC2_EAC",e[e.COMPRESSED_SRGB8_ETC2=37494]="COMPRESSED_SRGB8_ETC2",e[e.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC=37495]="COMPRESSED_SRGB8_ALPHA8_ETC2_EAC",e[e.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2=37496]="COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2",e[e.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2=37497]="COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2",e[e.COMPRESSED_RGB_PVRTC_4BPPV1_IMG=35840]="COMPRESSED_RGB_PVRTC_4BPPV1_IMG",e[e.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG=35842]="COMPRESSED_RGBA_PVRTC_4BPPV1_IMG",e[e.COMPRESSED_RGB_PVRTC_2BPPV1_IMG=35841]="COMPRESSED_RGB_PVRTC_2BPPV1_IMG",e[e.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG=35843]="COMPRESSED_RGBA_PVRTC_2BPPV1_IMG",e[e.COMPRESSED_RGB_ETC1_WEBGL=36196]="COMPRESSED_RGB_ETC1_WEBGL",e[e.COMPRESSED_RGB_ATC_WEBGL=35986]="COMPRESSED_RGB_ATC_WEBGL",e[e.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL=35986]="COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL",e[e.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL=34798]="COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL",e[e.COMPRESSED_RGBA_ASTC_4x4_KHR=37808]="COMPRESSED_RGBA_ASTC_4x4_KHR",e[e.COMPRESSED_RGBA_ASTC_5x4_KHR=37809]="COMPRESSED_RGBA_ASTC_5x4_KHR",e[e.COMPRESSED_RGBA_ASTC_5x5_KHR=37810]="COMPRESSED_RGBA_ASTC_5x5_KHR",e[e.COMPRESSED_RGBA_ASTC_6x5_KHR=37811]="COMPRESSED_RGBA_ASTC_6x5_KHR",e[e.COMPRESSED_RGBA_ASTC_6x6_KHR=37812]="COMPRESSED_RGBA_ASTC_6x6_KHR",e[e.COMPRESSED_RGBA_ASTC_8x5_KHR=37813]="COMPRESSED_RGBA_ASTC_8x5_KHR",e[e.COMPRESSED_RGBA_ASTC_8x6_KHR=37814]="COMPRESSED_RGBA_ASTC_8x6_KHR",e[e.COMPRESSED_RGBA_ASTC_8x8_KHR=37815]="COMPRESSED_RGBA_ASTC_8x8_KHR",e[e.COMPRESSED_RGBA_ASTC_10x5_KHR=37816]="COMPRESSED_RGBA_ASTC_10x5_KHR",e[e.COMPRESSED_RGBA_ASTC_10x6_KHR=37817]="COMPRESSED_RGBA_ASTC_10x6_KHR",e[e.COMPRESSED_RGBA_ASTC_10x8_KHR=37818]="COMPRESSED_RGBA_ASTC_10x8_KHR",e[e.COMPRESSED_RGBA_ASTC_10x10_KHR=37819]="COMPRESSED_RGBA_ASTC_10x10_KHR",e[e.COMPRESSED_RGBA_ASTC_12x10_KHR=37820]="COMPRESSED_RGBA_ASTC_12x10_KHR",e[e.COMPRESSED_RGBA_ASTC_12x12_KHR=37821]="COMPRESSED_RGBA_ASTC_12x12_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR=37840]="COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR=37841]="COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR=37842]="COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR=37843]="COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR=37844]="COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR=37845]="COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR=37846]="COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR=37847]="COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR=37848]="COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR=37849]="COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR=37850]="COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR=37851]="COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR=37852]="COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR",e[e.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR=37853]="COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR",e[e.QUERY_COUNTER_BITS_EXT=34916]="QUERY_COUNTER_BITS_EXT",e[e.CURRENT_QUERY_EXT=34917]="CURRENT_QUERY_EXT",e[e.QUERY_RESULT_EXT=34918]="QUERY_RESULT_EXT",e[e.QUERY_RESULT_AVAILABLE_EXT=34919]="QUERY_RESULT_AVAILABLE_EXT",e[e.TIME_ELAPSED_EXT=35007]="TIME_ELAPSED_EXT",e[e.TIMESTAMP_EXT=36392]="TIMESTAMP_EXT",e[e.GPU_DISJOINT_EXT=36795]="GPU_DISJOINT_EXT",e[e.COMPLETION_STATUS_KHR=37297]="COMPLETION_STATUS_KHR",e[e.DEPTH_CLAMP_EXT=34383]="DEPTH_CLAMP_EXT",e[e.FIRST_VERTEX_CONVENTION_WEBGL=36429]="FIRST_VERTEX_CONVENTION_WEBGL",e[e.LAST_VERTEX_CONVENTION_WEBGL=36430]="LAST_VERTEX_CONVENTION_WEBGL",e[e.PROVOKING_VERTEX_WEBL=36431]="PROVOKING_VERTEX_WEBL",e[e.POLYGON_MODE_WEBGL=2880]="POLYGON_MODE_WEBGL",e[e.POLYGON_OFFSET_LINE_WEBGL=10754]="POLYGON_OFFSET_LINE_WEBGL",e[e.LINE_WEBGL=6913]="LINE_WEBGL",e[e.FILL_WEBGL=6914]="FILL_WEBGL",e[e.MAX_CLIP_DISTANCES_WEBGL=3378]="MAX_CLIP_DISTANCES_WEBGL",e[e.MAX_CULL_DISTANCES_WEBGL=33529]="MAX_CULL_DISTANCES_WEBGL",e[e.MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL=33530]="MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL",e[e.CLIP_DISTANCE0_WEBGL=12288]="CLIP_DISTANCE0_WEBGL",e[e.CLIP_DISTANCE1_WEBGL=12289]="CLIP_DISTANCE1_WEBGL",e[e.CLIP_DISTANCE2_WEBGL=12290]="CLIP_DISTANCE2_WEBGL",e[e.CLIP_DISTANCE3_WEBGL=12291]="CLIP_DISTANCE3_WEBGL",e[e.CLIP_DISTANCE4_WEBGL=12292]="CLIP_DISTANCE4_WEBGL",e[e.CLIP_DISTANCE5_WEBGL=12293]="CLIP_DISTANCE5_WEBGL",e[e.CLIP_DISTANCE6_WEBGL=12294]="CLIP_DISTANCE6_WEBGL",e[e.CLIP_DISTANCE7_WEBGL=12295]="CLIP_DISTANCE7_WEBGL",e[e.POLYGON_OFFSET_CLAMP_EXT=36379]="POLYGON_OFFSET_CLAMP_EXT",e[e.LOWER_LEFT_EXT=36001]="LOWER_LEFT_EXT",e[e.UPPER_LEFT_EXT=36002]="UPPER_LEFT_EXT",e[e.NEGATIVE_ONE_TO_ONE_EXT=37726]="NEGATIVE_ONE_TO_ONE_EXT",e[e.ZERO_TO_ONE_EXT=37727]="ZERO_TO_ONE_EXT",e[e.CLIP_ORIGIN_EXT=37724]="CLIP_ORIGIN_EXT",e[e.CLIP_DEPTH_MODE_EXT=37725]="CLIP_DEPTH_MODE_EXT",e[e.SRC1_COLOR_WEBGL=35065]="SRC1_COLOR_WEBGL",e[e.SRC1_ALPHA_WEBGL=34185]="SRC1_ALPHA_WEBGL",e[e.ONE_MINUS_SRC1_COLOR_WEBGL=35066]="ONE_MINUS_SRC1_COLOR_WEBGL",e[e.ONE_MINUS_SRC1_ALPHA_WEBGL=35067]="ONE_MINUS_SRC1_ALPHA_WEBGL",e[e.MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL=35068]="MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL",e[e.MIRROR_CLAMP_TO_EDGE_EXT=34627]="MIRROR_CLAMP_TO_EDGE_EXT",e}(i||{})},7406:(e,n,t)=>{t.d(n,{M:()=>l,P:()=>s});var i=t(3845),r=t(8862),o=t(9905),a=t(5264);function s(e,n){for(var t,r={},o=(0,i.A)(e.attributes);!(t=o()).done;){var a=t.value,s=u(e,n,a.name);s&&(r[a.name]=s)}return r}function l(e,n,t){void 0===t&&(t=16);for(var i=s(e,n),r=new Array(t).fill(null),o=0,a=Object.values(i);o<a.length;o++){var l=a[o];r[l.location]=l}return r}function u(e,n,t){var s=function(e,n){var t=e.attributes.find((function(e){return e.name===n}));t||r.R.warn('shader layout attribute "'+n+'" not present in shader');return t||null}(e,t),l=function(e,n){c(e);var t=function(e,n){for(var t,r=(0,i.A)(e);!(t=r()).done;){var o=t.value;if(o.format&&o.name===n)return{attributeName:o.name,bufferName:n,stepMode:o.stepMode,vertexFormat:o.format,byteOffset:0,byteStride:o.byteStride||0}}return null}(e,n);if(t)return t;if(t=function(e,n){for(var t,r=(0,i.A)(e);!(t=r()).done;){var o,s=t.value,l=s.byteStride;if("number"!=typeof s.byteStride)for(var u,c=(0,i.A)(s.attributes||[]);!(u=c()).done;){var f=u.value;l+=(0,a.yx)(f.format).byteLength}var p=null==(o=s.attributes)?void 0:o.find((function(e){return e.attribute===n}));if(p)return{attributeName:p.attribute,bufferName:s.name,stepMode:s.stepMode,vertexFormat:p.format,byteOffset:p.byteOffset,byteStride:l}}return null}(e,n),t)return t;return r.R.warn('layout for attribute "'+n+'" not present in buffer layout'),null}(n,t);if(!s)return null;var u=(0,o.wH)(s.type),f=(0,a.Mz)(u),p=(null==l?void 0:l.vertexFormat)||f,d=(0,a.yx)(p);return{attributeName:(null==l?void 0:l.attributeName)||s.name,bufferName:(null==l?void 0:l.bufferName)||s.name,location:s.location,shaderType:s.type,primitiveType:u.primitiveType,shaderComponents:u.components,vertexFormat:p,bufferDataType:d.type,bufferComponents:d.components,normalized:d.normalized,integer:u.integer,stepMode:(null==l?void 0:l.stepMode)||s.stepMode||"vertex",byteOffset:(null==l?void 0:l.byteOffset)||0,byteStride:(null==l?void 0:l.byteStride)||0}}function c(e){for(var n,t=(0,i.A)(e);!(n=t()).done;){var o=n.value;(o.attributes&&o.format||!o.attributes&&!o.format)&&r.R.warn("BufferLayout "+name+" must have either 'attributes' or 'format' field")}}},2947:(e,n,t)=>{t.d(n,{pF:()=>d,I7:()=>p,PI:()=>f});var i,r=t(8696),o=t(675),a=t(5997),s=t(8862),l=t(1010),u=t(8564),c=t(3177);var f=function(){},p=function(e){function n(e,n){void 0===e&&(e=[]),this.features=new Set(e),this.disabledFeatures=n||{}}var t=n.prototype;return t[e]=(0,o.A)().mark((function e(){return(0,o.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(this.features,"t0",1);case 1:case"end":return e.stop()}}),e,this)})),t.has=function(e){var n;return!(null!=(n=this.disabledFeatures)&&n[e])&&this.features.has(e)},n}(Symbol.iterator);i=Symbol.toStringTag;var d=function(){function e(n){this.userData={},this.statsManager=a.d,this.timestamp=0,this._lumaData={},this._textureCaps={},this.props=Object.assign({},e.defaultProps,n),this.id=this.props.id||(0,l.L)(this[Symbol.toStringTag].toLowerCase())}var n=e.prototype;return n.getTextureFormatInfo=function(e){return(0,c.p)(e)},n.getTextureFormatCapabilities=function(e){var n=this._textureCaps[e];if(!n){var t=this._getDeviceTextureFormatCapabilities(e);n=this._getDeviceSpecificTextureFormatCapabilities(t),this._textureCaps[e]=n}return n},n.getMipLevelCount=function(e,n,t){void 0===t&&(t=1);var i=Math.max(e,n,t);return 1+Math.floor(Math.log2(i))},n.isExternalImage=function(e){return function(e){return"undefined"!=typeof ImageData&&e instanceof ImageData||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement||"undefined"!=typeof VideoFrame&&e instanceof VideoFrame||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas}(e)},n.getExternalImageSize=function(e){return function(e){if("undefined"!=typeof ImageData&&e instanceof ImageData||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas)return{width:e.width,height:e.height};if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)return{width:e.naturalWidth,height:e.naturalHeight};if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)return{width:e.videoWidth,height:e.videoHeight};if("undefined"!=typeof VideoFrame&&e instanceof VideoFrame)return{width:e.displayWidth,height:e.displayHeight};throw new Error("Unknown image type")}(e)},n.isTextureFormatSupported=function(e){return this.getTextureFormatCapabilities(e).create},n.isTextureFormatFilterable=function(e){return this.getTextureFormatCapabilities(e).filter},n.isTextureFormatRenderable=function(e){return this.getTextureFormatCapabilities(e).render},n.isTextureFormatCompressed=function(e){return(0,c.YU)(e)},n.pushDebugGroup=function(e){this.commandEncoder.pushDebugGroup(e)},n.popDebugGroup=function(){var e;null==(e=this.commandEncoder)||e.popDebugGroup()},n.insertDebugMarker=function(e){var n;null==(n=this.commandEncoder)||n.insertDebugMarker(e)},n.loseDevice=function(){return!1},n.incrementTimestamp=function(){return this.timestamp++},n.reportError=function(e,n){this.props.debug,this.props.onError(e,n)},n.getDefaultCanvasContext=function(){if(!this.canvasContext)throw new Error("Device has no default CanvasContext. See props.createCanvasContext");return this.canvasContext},n.beginRenderPass=function(e){return this.commandEncoder.beginRenderPass(e)},n.beginComputePass=function(e){return this.commandEncoder.beginComputePass(e)},n.getCanvasContext=function(){return this.getDefaultCanvasContext()},n.readPixelsToArrayWebGL=function(e,n){throw new Error("not implemented")},n.readPixelsToBufferWebGL=function(e,n){throw new Error("not implemented")},n.setParametersWebGL=function(e){throw new Error("not implemented")},n.getParametersWebGL=function(e){throw new Error("not implemented")},n.withParametersWebGL=function(e,n){throw new Error("not implemented")},n.clearWebGL=function(e){throw new Error("not implemented")},n.resetWebGL=function(){throw new Error("not implemented")},n._getDeviceTextureFormatCapabilities=function(e){var n=this,t=(0,c.v8)(e),i=function(e){var t;return null==(t="string"==typeof e?n.features.has(e):e)||t},r=i(t.create);return{format:e,create:r,render:r&&i(t.render),filter:r&&i(t.filter),blend:r&&i(t.blend),store:r&&i(t.store)}},n._normalizeBufferProps=function(e){(e instanceof ArrayBuffer||ArrayBuffer.isView(e))&&(e={data:e});var n=Object.assign({},e);return(e.usage||0)&u.h.INDEX&&!e.indexType&&(e.data instanceof Uint32Array?n.indexType="uint32":e.data instanceof Uint16Array?n.indexType="uint16":s.R.warn("indices buffer content must be of type uint16 or uint32")()),n},(0,r.A)(e,[{key:i,get:function(){return"Device"}}]),e}();d.defaultProps={id:null,powerPreference:"high-performance",failIfMajorPerformanceCaveat:!1,createCanvasContext:void 0,webgl:{},onError:function(e,n){return s.R.error(e.message,n)()},onResize:function(e,n){var t=e.getDevicePixelSize(),i=t[0],r=t[1],o=n.oldPixelSize,a=o[0],l=o[1];s.R.log(1,e+" Resized "+a+"x"+l+" => "+i+"x"+r+"px")()},onVisibilityChange:function(e){return s.R.log(1,e+" Visibility changed "+e.isVisible)()},onDevicePixelRatioChange:function(e,n){return s.R.log(1,e+" DPR changed "+n.oldRatio+" => "+e.devicePixelRatio)()},debug:s.R.get("debug")||void 0,debugShaders:s.R.get("debug-shaders")||void 0,debugFramebuffers:Boolean(s.R.get("debug-framebuffers")),debugFactories:Boolean(s.R.get("debug-factories")),debugWebGL:Boolean(s.R.get("debug-webgl")),debugSpectorJS:void 0,debugSpectorJSUrl:void 0,_requestMaxLimits:!0,_cacheShaders:!1,_cachePipelines:!1,_cacheDestroyPolicy:"unused",_initializeFeatures:!0,_disabledFeatures:{"compilation-status-async-webgl":!0},_handle:void 0}},8564:(e,n,t)=>{t.d(n,{h:()=>s});var i,r=t(8696),o=t(7387),a=t(8314);i=Symbol.toStringTag;var s=function(e){function n(t,i){var r,o=Object.assign({},i);return(i.usage||0)&n.INDEX&&!i.indexType&&(i.data instanceof Uint32Array?o.indexType="uint32":i.data instanceof Uint16Array&&(o.indexType="uint16")),delete o.data,(r=e.call(this,t,o,n.defaultProps)||this).debugData=new ArrayBuffer(0),r.usage=o.usage||0,r.indexType=o.indexType,r.updateTimestamp=t.incrementTimestamp(),r}(0,o.A)(n,e);var t=n.prototype;return t.clone=function(e){return this.device.createBuffer(Object.assign({},this.props,e))},t.readSyncWebGL=function(e,n){throw new Error("not implemented")},t._setDebugData=function(e,t,i){var r=ArrayBuffer.isView(e)?e.buffer:e,o=Math.min(e?e.byteLength:i,n.DEBUG_DATA_MAX_LENGTH);null===r?this.debugData=new ArrayBuffer(o):0===t&&i===r.byteLength?this.debugData=r.slice(0,o):this.debugData=r.slice(t,t+o)},(0,r.A)(n,[{key:i,get:function(){return"Buffer"}}]),n}(a.F);s.INDEX=16,s.VERTEX=32,s.UNIFORM=64,s.STORAGE=128,s.INDIRECT=256,s.QUERY_RESOLVE=512,s.MAP_READ=1,s.MAP_WRITE=2,s.COPY_SRC=4,s.COPY_DST=8,s.DEBUG_DATA_MAX_LENGTH=32,s.defaultProps=Object.assign({},a.F.defaultProps,{usage:0,byteLength:0,byteOffset:0,data:null,indexType:"uint16",mappedAtCreation:!1})},5128:(e,n,t)=>{t.d(n,{C:()=>s});var i,r=t(8696),o=t(7387),a=t(8314);i=Symbol.toStringTag;var s=function(e){function n(t,i){var r;return(r=e.call(this,t,i,n.defaultProps)||this).hash="",r.shaderLayout=i.shaderLayout,r}return(0,o.A)(n,e),(0,r.A)(n,[{key:i,get:function(){return"ComputePipeline"}}]),n}(a.F);s.defaultProps=Object.assign({},a.F.defaultProps,{shader:void 0,entryPoint:void 0,constants:{},shaderLayout:void 0})},9853:(e,n,t)=>{t.d(n,{r:()=>s});var i,r=t(8696),o=t(7387),a=t(8314);i=Symbol.toStringTag;var s=function(e){function n(t,i){var r;return(r=e.call(this,t,i,n.defaultProps)||this).linkStatus="pending",r.hash="",r.shaderLayout=r.props.shaderLayout,r.bufferLayout=r.props.bufferLayout||[],r}return(0,o.A)(n,e),(0,r.A)(n,[{key:i,get:function(){return"RenderPipeline"}}]),n}(a.F);s.defaultProps=Object.assign({},a.F.defaultProps,{vs:null,vertexEntryPoint:"vertexMain",vsConstants:{},fs:null,fragmentEntryPoint:"fragmentMain",fsConstants:{},shaderLayout:null,bufferLayout:[],topology:"triangle-list",colorAttachmentFormats:void 0,depthStencilAttachmentFormat:void 0,parameters:{},bindings:{},uniforms:{}})},8314:(e,n,t)=>{t.d(n,{F:()=>r});var i=t(1010),r=function(){var e=n.prototype;function n(e,n,t){if(this.userData={},this.destroyed=!1,this.allocatedBytes=0,this._attachedResources=new Set,!e)throw new Error("no device");this._device=e,this.props=function(e,n){var t=Object.assign({},n);for(var i in e)void 0!==e[i]&&(t[i]=e[i]);return t}(n,t);var r="undefined"!==this.props.id?this.props.id:(0,i.L)(this[Symbol.toStringTag]);this.props.id=r,this.id=r,this.userData=this.props.userData||{},this.addStats()}return e.toString=function(){return(this[Symbol.toStringTag]||this.constructor.name)+':"'+this.id+'"'},e.destroy=function(){this.destroyResource()},e.delete=function(){return this.destroy(),this},e.getProps=function(){return this.props},e.attachResource=function(e){this._attachedResources.add(e)},e.detachResource=function(e){this._attachedResources.delete(e)},e.destroyAttachedResource=function(e){this._attachedResources.delete(e)&&e.destroy()},e.destroyAttachedResources=function(){for(var e=0,n=Object.values(this._attachedResources);e<n.length;e++){n[e].destroy()}this._attachedResources=new Set},e.destroyResource=function(){this.destroyAttachedResources(),this.removeStats(),this.destroyed=!0},e.removeStats=function(){var e=this._device.statsManager.getStats("Resource Counts"),n=this[Symbol.toStringTag];e.get(n+"s Active").decrementCount()},e.trackAllocatedMemory=function(e,n){void 0===n&&(n=this[Symbol.toStringTag]);var t=this._device.statsManager.getStats("Resource Counts");t.get("GPU Memory").addCount(e),t.get(n+" Memory").addCount(e),this.allocatedBytes=e},e.trackDeallocatedMemory=function(e){void 0===e&&(e=this[Symbol.toStringTag]);var n=this._device.statsManager.getStats("Resource Counts");n.get("GPU Memory").subtractCount(this.allocatedBytes),n.get(e+" Memory").subtractCount(this.allocatedBytes),this.allocatedBytes=0},e.addStats=function(){var e=this._device.statsManager.getStats("Resource Counts"),n=this[Symbol.toStringTag];e.get("Resources Created").incrementCount(),e.get(n+"s Created").incrementCount(),e.get(n+"s Active").incrementCount()},n}();r.defaultProps={id:"undefined",handle:void 0,userData:void 0}},9532:(e,n,t)=>{t.d(n,{L:()=>s});var i,r=t(8696),o=t(7387),a=t(8314);i=Symbol.toStringTag;var s=function(e){function n(t,i){return i=n.normalizeProps(t,i),e.call(this,t,i,n.defaultProps)||this}return(0,o.A)(n,e),n.normalizeProps=function(e,n){return n},(0,r.A)(n,[{key:i,get:function(){return"Sampler"}}]),n}(a.F);s.defaultProps=Object.assign({},a.F.defaultProps,{type:"color-sampler",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge",magFilter:"nearest",minFilter:"nearest",mipmapFilter:"none",lodMinClamp:0,lodMaxClamp:32,compare:"less-equal",maxAnisotropy:1})},349:(e,n,t)=>{t.d(n,{M:()=>d});var i,r=t(675),o=t(467),a=t(8696),s=t(7387),l=t(8314),u=t(1010),c=t(3845);function f(e,n,t,i){if(null!=i&&i.inlineSource){var r=function(e,n,t){for(var i="",r=n-2;r<=n;r++){var o=e[r-1];void 0!==o&&(i+=p(o,n,t))}return i}(n,t);return"\n"+r+(e.linePos>0?" ".repeat(e.linePos+5)+"^^^\n":"")+e.type.toUpperCase()+": "+e.message+"\n\n"}var o="error"===e.type?"red":"#8B4000";return null!=i&&i.html?"<div class='luma-compiler-log-error' style=\"color:"+o+';"><b> '+e.type.toUpperCase()+": "+e.message+"</b></div>":e.type.toUpperCase()+": "+e.message}function p(e,n,t){var i=null!=t&&t.html?e.replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;").replaceAll('"',"&quot;").replaceAll("'","&#039;"):e;return function(e,n){for(var t="",i=e.length;i<n;++i)t+=" ";return t+e}(String(n),4)+": "+i+(null!=t&&t.html?"<br/>":"\n")}i=Symbol.toStringTag;var d=function(e){function n(t,i){var r;return i=Object.assign({},i,{debugShaders:i.debugShaders||t.props.debugShaders||"errors"}),(r=e.call(this,t,Object.assign({id:_(i)},i),n.defaultProps)||this).compilationStatus="pending",r.stage=r.props.stage,r.source=r.props.source,r}(0,s.A)(n,e);var t=n.prototype;return t.getCompilationInfoSync=function(){return null},t.getTranslatedSource=function(){return null},t.debugShader=function(){var e=(0,o.A)((0,r.A)().mark((function e(){var n,t;return(0,r.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=this.props.debugShaders,e.t0=n,e.next="never"===e.t0?4:"errors"===e.t0?5:"warnings"===e.t0||"always"===e.t0?8:9;break;case 4:return e.abrupt("return");case 5:if("success"!==this.compilationStatus){e.next=7;break}return e.abrupt("return");case 7:case 8:return e.abrupt("break",9);case 9:return e.next=11,this.getCompilationInfo();case 11:if(t=e.sent,"warnings"!==n||0!==(null==t?void 0:t.length)){e.next=14;break}return e.abrupt("return");case 14:this._displayShaderLog(t,this.id);case 15:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}(),t._displayShaderLog=function(e,n){var t,i,r=this;if("undefined"!=typeof document&&null!=(t=document)&&t.createElement){var o=n,a=this.stage+' shader "'+o+'"',s=function(e,n,t){var i="",r=n.split(/\r?\n/),o=e.slice().sort((function(e,n){return e.lineNum-n.lineNum}));switch((null==t?void 0:t.showSourceCode)||"no"){case"all":for(var a=0,s=1;s<=r.length;s++)for(i+=p(r[s-1],s,t);o.length>a&&o[a].lineNum===s;){var l=o[a++];i+=f(l,r,l.lineNum,Object.assign({},t,{inlineSource:!1}))}for(;o.length>a;)i+=f(o[a++],[],0,Object.assign({},t,{inlineSource:!1}));return i;case"issues":case"no":for(var u,d=(0,c.A)(e);!(u=d()).done;){var _=u.value;i+=f(_,r,_.lineNum,{inlineSource:"no"!==(null==t?void 0:t.showSourceCode)})}return i}}(e,this.source,{showSourceCode:"all",html:!0}),l=this.getTranslatedSource();l&&(s+='<br /><br /><h1>Translated Source</h1><br /><br /><code style="user-select:text;"><pre>'+l+"</pre></code>");var u=document.createElement("Button");u.innerHTML="\n<h1>Compilation error in "+a+'</h1><br /><br />\n<code style="user-select:text;"><pre>\n'+s+"\n</pre></code>",u.style.top="10px",u.style.left="10px",u.style.position="absolute",u.style.zIndex="9999",u.style.width="100%",u.style.textAlign="left",document.body.appendChild(u),null==(i=document.getElementsByClassName("luma-compiler-log-error")[0])||i.scrollIntoView(),u.onclick=function(){var e="data:text/plain,"+encodeURIComponent(r.source);navigator.clipboard.writeText(e)}}},(0,a.A)(n,[{key:i,get:function(){return"Shader"}}]),n}(l.F);function _(e){return function(e,n){void 0===n&&(n="unnamed");var t=/#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/.exec(e);return t?t[1]:n}(e.source)||e.id||(0,u.L)("unnamed "+e.stage+"-shader")}d.defaultProps=Object.assign({},l.F.defaultProps,{language:"auto",stage:void 0,source:"",sourceMap:null,entryPoint:"main",debugShaders:void 0})},1213:(e,n,t)=>{t.d(n,{X:()=>s});var i,r=t(8696),o=t(7387),a=t(8314);i=Symbol.toStringTag;var s=function(e){function n(t,i){return e.call(this,t,i,n.defaultProps)||this}return(0,o.A)(n,e),(0,r.A)(n,[{key:i,get:function(){return"TextureView"}}]),n}(a.F);s.defaultProps=Object.assign({},a.F.defaultProps,{format:void 0,dimension:void 0,aspect:"all",baseMipLevel:0,mipLevelCount:void 0,baseArrayLayer:0,arrayLayerCount:void 0})},5839:(e,n,t)=>{t.d(n,{g:()=>p});var i,r,o=t(8696),a=t(9417),s=t(7387),l=t(8314),u=t(9532),c=t(8862),f={"1d":"1d","2d":"2d","2d-array":"2d",cube:"2d","cube-array":"2d","3d":"3d"};r=Symbol.toStringTag;var p=function(e){(0,s.A)(t,e);var n=t.prototype;function t(n,i){var r;if(i=t.normalizeProps(n,i),(r=e.call(this,n,i,t.defaultProps)||this).dimension=r.props.dimension,r.baseDimension=f[r.dimension],r.format=r.props.format,r.width=r.props.width,r.height=r.props.height,r.depth=r.props.depth,r.mipLevels=r.props.mipLevels,void 0===r.props.width||void 0===r.props.height)if(n.isExternalImage(i.data)){var o=n.getExternalImageSize(i.data);r.width=(null==o?void 0:o.width)||1,r.height=(null==o?void 0:o.height)||1}else r.width=1,r.height=1,void 0!==r.props.width&&void 0!==r.props.height||c.R.warn((0,a.A)(r)+" created with undefined width or height. This is deprecated. Use AsyncTexture instead.")();return r.updateTimestamp=n.incrementTimestamp(),r}return n.toString=function(){return"Texture("+this.id+","+this.format+","+this.width+"x"+this.height+")"},n.setSampler=function(e){this.sampler=e instanceof u.L?e:this.device.createSampler(e)},n.clone=function(e){return this.device.createTexture(Object.assign({},this.props,e))},t.normalizeProps=function(e,n){var t=Object.assign({},n),i=t.width,r=t.height;return"number"==typeof i&&(t.width=Math.max(1,Math.ceil(i))),"number"==typeof r&&(t.height=Math.max(1,Math.ceil(r))),t},n._initializeData=function(e){this.device.isExternalImage(e)?this.copyExternalImage({image:e,width:this.width,height:this.height,depth:this.depth,mipLevel:0,x:0,y:0,z:0,aspect:"all",colorSpace:"srgb",premultipliedAlpha:!1,flipY:!1}):e&&this.copyImageData({data:e,mipLevel:0,x:0,y:0,z:0,aspect:"all"})},n._normalizeCopyImageDataOptions=function(e){var n=this.width,i=this.height,r=this.depth,o=Object.assign({},t.defaultCopyDataOptions,{width:n,height:i,depth:r},e),a=this.device.getTextureFormatInfo(this.format);if(!e.bytesPerRow&&!a.bytesPerPixel)throw new Error("bytesPerRow must be provided for texture format "+this.format);return o.bytesPerRow=e.bytesPerRow||n*(a.bytesPerPixel||4),o.rowsPerImage=e.rowsPerImage||i,o},n._normalizeCopyExternalImageOptions=function(e){var n=this.device.getExternalImageSize(e.image),i=Object.assign({},t.defaultCopyExternalImageOptions,n,e);return i.width=Math.min(i.width,this.width-i.x),i.height=Math.min(i.height,this.height-i.y),i},(0,o.A)(t,[{key:r,get:function(){return"Texture"}}]),t}(l.F);i=p,p.SAMPLE=4,p.STORAGE=8,p.RENDER=16,p.COPY_SRC=1,p.COPY_DST=2,p.TEXTURE=4,p.RENDER_ATTACHMENT=16,p.defaultProps=Object.assign({},l.F.defaultProps,{data:null,dimension:"2d",format:"rgba8unorm",usage:i.TEXTURE|i.RENDER_ATTACHMENT|i.COPY_DST,width:void 0,height:void 0,depth:1,mipLevels:1,samples:void 0,sampler:{},view:void 0}),p.defaultCopyDataOptions={data:void 0,byteOffset:0,bytesPerRow:void 0,rowsPerImage:void 0,mipLevel:0,x:0,y:0,z:0,aspect:"all"},p.defaultCopyExternalImageOptions={image:void 0,sourceX:0,sourceY:0,width:void 0,height:void 0,depth:1,mipLevel:0,x:0,y:0,z:0,aspect:"all",colorSpace:"srgb",premultipliedAlpha:!1,flipY:!1}},2596:(e,n,t)=>{function i(e){var n=l[e],t=n[0],i=n[1],r=n[2],o=e.includes("norm");return{signedType:t,primitiveType:i,byteLength:r,normalized:o,integer:!o&&!e.startsWith("float"),signed:e.startsWith("s")}}function r(e){var n=e;switch(n){case"uint8":return"unorm8";case"sint8":return"snorm8";case"uint16":return"unorm16";case"sint16":return"snorm16";default:return n}}function o(e,n){switch(n){case 1:return e;case 2:return e+e%2;default:return e+(4-e%4)%4}}function a(e){var n=ArrayBuffer.isView(e)?e.constructor:e;switch(n){case Float32Array:return"float32";case Uint16Array:return"uint16";case Uint32Array:return"uint32";case Uint8Array:case Uint8ClampedArray:return"uint8";case Int8Array:return"sint8";case Int16Array:return"sint16";case Int32Array:return"sint32";default:throw new Error(n.constructor.name)}}function s(e){switch(e){case"f32":case"float32":return Float32Array;case"u32":case"uint32":return Uint32Array;case"i32":case"sint32":return Int32Array;case"uint16":case"unorm16":return Uint16Array;case"sint16":case"snorm16":return Int16Array;case"uint8":case"unorm8":return Uint8Array;case"sint8":case"snorm8":return Int8Array;default:throw new Error(e)}}t.d(n,{JP:()=>o,UE:()=>a,Y0:()=>s,gm:()=>r,vE:()=>i});var l={uint8:["uint8","u32",1,!1],sint8:["sint8","i32",1,!1],unorm8:["uint8","f32",1,!0],snorm8:["sint8","f32",1,!0],uint16:["uint16","u32",2,!1],sint16:["sint16","i32",2,!1],unorm16:["uint16","u32",2,!0],snorm16:["sint16","i32",2,!0],float16:["float16","f16",2,!1],float32:["float32","f32",4,!1],uint32:["uint32","u32",4,!1],sint32:["sint32","i32",4,!1]}},9905:(e,n,t)=>{function i(e){return s[e]}function r(e){var n=a[e],t=n[0],i=n[1],r="i32"===t||"u32"===t,s="u32"!==t;return{primitiveType:t,components:i,byteLength:o[t]*i,integer:r,signed:s}}t.d(n,{k0:()=>i,wH:()=>r});var o={f32:4,f16:2,i32:4,u32:4},a={f32:["f32",1],"vec2<f32>":["f32",2],"vec3<f32>":["f32",3],"vec4<f32>":["f32",4],f16:["f16",1],"vec2<f16>":["f16",2],"vec3<f16>":["f16",3],"vec4<f16>":["f16",4],i32:["i32",1],"vec2<i32>":["i32",2],"vec3<i32>":["i32",3],"vec4<i32>":["i32",4],u32:["u32",1],"vec2<u32>":["u32",2],"vec3<u32>":["u32",3],"vec4<u32>":["u32",4]},s={f32:{type:"f32",components:1},f16:{type:"f16",components:1},i32:{type:"i32",components:1},u32:{type:"u32",components:1},"vec2<f32>":{type:"f32",components:2},"vec3<f32>":{type:"f32",components:3},"vec4<f32>":{type:"f32",components:4},"vec2<f16>":{type:"f16",components:2},"vec3<f16>":{type:"f16",components:3},"vec4<f16>":{type:"f16",components:4},"vec2<i32>":{type:"i32",components:2},"vec3<i32>":{type:"i32",components:3},"vec4<i32>":{type:"i32",components:4},"vec2<u32>":{type:"u32",components:2},"vec3<u32>":{type:"u32",components:3},"vec4<u32>":{type:"u32",components:4},"mat2x2<f32>":{type:"f32",components:4},"mat2x3<f32>":{type:"f32",components:6},"mat2x4<f32>":{type:"f32",components:8},"mat3x2<f32>":{type:"f32",components:6},"mat3x3<f32>":{type:"f32",components:9},"mat3x4<f32>":{type:"f32",components:12},"mat4x2<f32>":{type:"f32",components:8},"mat4x3<f32>":{type:"f32",components:12},"mat4x4<f32>":{type:"f32",components:16},"mat2x2<f16>":{type:"f16",components:4},"mat2x3<f16>":{type:"f16",components:6},"mat2x4<f16>":{type:"f16",components:8},"mat3x2<f16>":{type:"f16",components:6},"mat3x3<f16>":{type:"f16",components:9},"mat3x4<f16>":{type:"f16",components:12},"mat4x2<f16>":{type:"f16",components:8},"mat4x3<f16>":{type:"f16",components:12},"mat4x4<f16>":{type:"f16",components:16},"mat2x2<i32>":{type:"i32",components:4},"mat2x3<i32>":{type:"i32",components:6},"mat2x4<i32>":{type:"i32",components:8},"mat3x2<i32>":{type:"i32",components:6},"mat3x3<i32>":{type:"i32",components:9},"mat3x4<i32>":{type:"i32",components:12},"mat4x2<i32>":{type:"i32",components:8},"mat4x3<i32>":{type:"i32",components:12},"mat4x4<i32>":{type:"i32",components:16},"mat2x2<u32>":{type:"u32",components:4},"mat2x3<u32>":{type:"u32",components:6},"mat2x4<u32>":{type:"u32",components:8},"mat3x2<u32>":{type:"u32",components:6},"mat3x3<u32>":{type:"u32",components:9},"mat3x4<u32>":{type:"u32",components:12},"mat4x2<u32>":{type:"u32",components:8},"mat4x3<u32>":{type:"u32",components:12},"mat4x4<u32>":{type:"u32",components:16}},l={vec2i:"vec2<i32>",vec3i:"vec3<i32>",vec4i:"vec4<i32>",vec2u:"vec2<u32>",vec3u:"vec3<u32>",vec4u:"vec4<u32>",vec2f:"vec2<f32>",vec3f:"vec3<f32>",vec4f:"vec4<f32>",vec2h:"vec2<f16>",vec3h:"vec3<f16>",vec4h:"vec4<f16>"};Object.assign({},l,{mat2x2f:"mat2x2<f32>",mat2x3f:"mat2x3<f32>",mat2x4f:"mat2x4<f32>",mat3x2f:"mat3x2<f32>",mat3x3f:"mat3x3<f32>",mat3x4f:"mat3x4<f32>",mat4x2f:"mat4x2<f32>",mat4x3f:"mat4x3<f32>",mat4x4f:"mat4x4<f32>",mat2x2i:"mat2x2<i32>",mat2x3i:"mat2x3<i32>",mat2x4i:"mat2x4<i32>",mat3x2i:"mat3x2<i32>",mat3x3i:"mat3x3<i32>",mat3x4i:"mat3x4<i32>",mat4x2i:"mat4x2<i32>",mat4x3i:"mat4x3<i32>",mat4x4i:"mat4x4<i32>",mat2x2u:"mat2x2<u32>",mat2x3u:"mat2x3<u32>",mat2x4u:"mat2x4<u32>",mat3x2u:"mat3x2<u32>",mat3x3u:"mat3x3<u32>",mat3x4u:"mat3x4<u32>",mat4x2u:"mat4x2<u32>",mat4x3u:"mat4x3<u32>",mat4x4u:"mat4x4<u32>",mat2x2h:"mat2x2<f16>",mat2x3h:"mat2x3<f16>",mat2x4h:"mat2x4<f16>",mat3x2h:"mat3x2<f16>",mat3x3h:"mat3x3<f16>",mat3x4h:"mat3x4<f16>",mat4x2h:"mat4x2<f16>",mat4x3h:"mat4x3<f16>",mat4x4h:"mat4x4<f16>"})},3177:(e,n,t)=>{t.d(n,{v8:()=>b,p:()=>R,YU:()=>A});var i=t(2596),r="texture-compression-bc",o="texture-compression-astc",a="texture-compression-etc2",s="texture-compression-pvrtc-webgl",l="texture-compression-atc-webgl",u="float32-renderable-webgl",c="float16-renderable-webgl",f="snorm8-renderable-webgl",p="norm16-renderable-webgl",d="snorm16-renderable-webgl",_="float32-filterable",h="float16-filterable-webgl";function m(e){var n=v[e];if(!n)throw new Error("Unsupported texture format "+e);return n}var v={r8unorm:{},r8snorm:{render:f},r8uint:{},r8sint:{},rg8unorm:{},rg8snorm:{render:f},rg8uint:{},rg8sint:{},r16uint:{},r16sint:{},r16float:{render:c,filter:"float16-filterable-webgl"},"r16unorm-webgl":{f:p},"r16snorm-webgl":{f:d},"rgba4unorm-webgl":{channels:"rgba",bitsPerChannel:[4,4,4,4],packed:!0},"rgb565unorm-webgl":{channels:"rgb",bitsPerChannel:[5,6,5,0],packed:!0},"rgb5a1unorm-webgl":{channels:"rgba",bitsPerChannel:[5,5,5,1],packed:!0},"rgb8unorm-webgl":{},"rgb8snorm-webgl":{},rgba8unorm:{},"rgba8unorm-srgb":{},rgba8snorm:{render:f},rgba8uint:{},rgba8sint:{},bgra8unorm:{},"bgra8unorm-srgb":{},rg16uint:{},rg16sint:{},rg16float:{render:c,filter:h},"rg16unorm-webgl":{render:p},"rg16snorm-webgl":{render:d},r32uint:{},r32sint:{},r32float:{render:u,filter:_},rgb9e5ufloat:{channels:"rgb",packed:!0,render:"rgb9e5ufloat-renderable-webgl"},rg11b10ufloat:{channels:"rgb",bitsPerChannel:[11,11,10,0],packed:!0,p:1,render:u},rgb10a2unorm:{channels:"rgba",bitsPerChannel:[10,10,10,2],packed:!0,p:1},rgb10a2uint:{channels:"rgba",bitsPerChannel:[10,10,10,2],packed:!0,p:1},"rgb16unorm-webgl":{f:p},"rgb16snorm-webgl":{f:p},rg32uint:{},rg32sint:{},rg32float:{render:!1,filter:_},rgba16uint:{},rgba16sint:{},rgba16float:{render:c,filter:h},"rgba16unorm-webgl":{render:p},"rgba16snorm-webgl":{render:d},"rgb32float-webgl":{render:u,filter:_},rgba32uint:{},rgba32sint:{},rgba32float:{render:u,filter:_},stencil8:{attachment:"stencil",bitsPerChannel:[8,0,0,0],dataType:"uint8"},depth16unorm:{attachment:"depth",bitsPerChannel:[16,0,0,0],dataType:"uint16"},depth24plus:{attachment:"depth",bitsPerChannel:[24,0,0,0],dataType:"uint32"},depth32float:{attachment:"depth",bitsPerChannel:[32,0,0,0],dataType:"float32"},"depth24plus-stencil8":{attachment:"depth-stencil",bitsPerChannel:[24,8,0,0],packed:!0},"depth32float-stencil8":{attachment:"depth-stencil",bitsPerChannel:[32,8,0,0],packed:!0},"bc1-rgb-unorm-webgl":{f:r},"bc1-rgb-unorm-srgb-webgl":{f:r},"bc1-rgba-unorm":{f:r},"bc1-rgba-unorm-srgb":{f:r},"bc2-rgba-unorm":{f:r},"bc2-rgba-unorm-srgb":{f:r},"bc3-rgba-unorm":{f:r},"bc3-rgba-unorm-srgb":{f:r},"bc4-r-unorm":{f:r},"bc4-r-snorm":{f:r},"bc5-rg-unorm":{f:r},"bc5-rg-snorm":{f:r},"bc6h-rgb-ufloat":{f:r},"bc6h-rgb-float":{f:r},"bc7-rgba-unorm":{f:r},"bc7-rgba-unorm-srgb":{f:r},"etc2-rgb8unorm":{f:a},"etc2-rgb8unorm-srgb":{f:a},"etc2-rgb8a1unorm":{f:a},"etc2-rgb8a1unorm-srgb":{f:a},"etc2-rgba8unorm":{f:a},"etc2-rgba8unorm-srgb":{f:a},"eac-r11unorm":{f:a},"eac-r11snorm":{f:a},"eac-rg11unorm":{f:a},"eac-rg11snorm":{f:a},"astc-4x4-unorm":{f:o},"astc-4x4-unorm-srgb":{f:o},"astc-5x4-unorm":{f:o},"astc-5x4-unorm-srgb":{f:o},"astc-5x5-unorm":{f:o},"astc-5x5-unorm-srgb":{f:o},"astc-6x5-unorm":{f:o},"astc-6x5-unorm-srgb":{f:o},"astc-6x6-unorm":{f:o},"astc-6x6-unorm-srgb":{f:o},"astc-8x5-unorm":{f:o},"astc-8x5-unorm-srgb":{f:o},"astc-8x6-unorm":{f:o},"astc-8x6-unorm-srgb":{f:o},"astc-8x8-unorm":{f:o},"astc-8x8-unorm-srgb":{f:o},"astc-10x5-unorm":{f:o},"astc-10x5-unorm-srgb":{f:o},"astc-10x6-unorm":{f:o},"astc-10x6-unorm-srgb":{f:o},"astc-10x8-unorm":{f:o},"astc-10x8-unorm-srgb":{f:o},"astc-10x10-unorm":{f:o},"astc-10x10-unorm-srgb":{f:o},"astc-12x10-unorm":{f:o},"astc-12x10-unorm-srgb":{f:o},"astc-12x12-unorm":{f:o},"astc-12x12-unorm-srgb":{f:o},"pvrtc-rgb4unorm-webgl":{f:s},"pvrtc-rgba4unorm-webgl":{f:s},"pvrtc-rbg2unorm-webgl":{f:s},"pvrtc-rgba2unorm-webgl":{f:s},"etc1-rbg-unorm-webgl":{f:"texture-compression-etc1-webgl"},"atc-rgb-unorm-webgl":{f:l},"atc-rgba-unorm-webgl":{f:l},"atc-rgbai-unorm-webgl":{f:l}},g=["bc1","bc2","bc3","bc4","bc5","bc6","bc7","etc1","etc2","eac","atc","astc","pvrtc"],E=/^(r|rg|rgb|rgba|bgra)([0-9]*)([a-z]*)(-srgb)?(-webgl)?$/;function A(e){return g.some((function(n){return e.startsWith(n)}))}function R(e){var n=function(e){var n,t,i,r,o,a,s,l,u=m(e),c=u.bytesPerPixel||1,f=u.bitsPerChannel||[8,8,8,8];delete u.bitsPerChannel,delete u.bytesPerPixel,delete u.f,delete u.render,delete u.filter,delete u.blend,delete u.store;var p=Object.assign({},u,{format:e,attachment:u.attachment||"color",channels:u.channels||"r",components:u.components||(null==(n=u.channels)?void 0:n.length)||1,bytesPerPixel:c,bitsPerChannel:f,dataType:u.dataType||"uint8",srgb:null!=(t=u.srgb)&&t,packed:null!=(i=u.packed)&&i,webgl:null!=(r=u.webgl)&&r,integer:null!=(o=u.integer)&&o,signed:null!=(a=u.signed)&&a,normalized:null!=(s=u.normalized)&&s,compressed:null!=(l=u.compressed)&&l});return p}(e);if(A(e)){n.channels="rgb",n.components=3,n.bytesPerPixel=1,n.srgb=!1,n.compressed=!0;var t=function(e){var n=/.*-(\d+)x(\d+)-.*/.exec(e);if(n){var t=n[1],i=n[2];return{blockWidth:Number(t),blockHeight:Number(i)}}return null}(e);t&&(n.blockWidth=t.blockWidth,n.blockHeight=t.blockHeight)}var r=E.exec(e);if(r){var o=r[1],a=r[2],s=r[3],l=r[4],u=r[5],c=""+s+a,f=(0,i.vE)(c),p=8*f.byteLength,d=o.length,_=[p,d>=2?p:0,d>=3?p:0,d>=4?p:0];n={format:e,attachment:n.attachment,dataType:f.signedType,components:d,channels:o,integer:f.integer,signed:f.signed,normalized:f.normalized,bitsPerChannel:_,bytesPerPixel:f.byteLength*o.length,packed:n.packed,srgb:n.srgb},"-webgl"===u&&(n.webgl=!0),"-srgb"===l&&(n.srgb=!0)}return e.endsWith("-webgl")&&(n.webgl=!0),e.endsWith("-srgb")&&(n.srgb=!0),n}function b(e){var n,t,i,r,o,a=m(e),s={format:e,create:null==(n=a.f)||n,render:null==(t=a.render)||t,filter:null==(i=a.filter)||i,blend:null==(r=a.blend)||r,store:null==(o=a.store)||o},l=R(e),u=e.startsWith("depth")||e.startsWith("stencil"),c=null==l?void 0:l.signed,f=null==l?void 0:l.integer,p=null==l?void 0:l.webgl;return s.render&&(s.render=!c),s.filter&&(s.filter=!(u||c||f||p)),s}},5264:(e,n,t)=>{t.d(n,{Mz:()=>a,OB:()=>o,yx:()=>r});var i=t(2596);function r(e){var n;e.endsWith("-webgl")&&(e.replace("-webgl",""),n=!0);var t=e.split("x"),r=t[0],o=t[1],a=r,s=o?parseInt(o):1,l=(0,i.vE)(a),u={type:a,components:s,byteLength:l.byteLength*s,integer:l.integer,signed:l.signed,normalized:l.normalized};return n&&(u.webglOnly=!0),u}function o(e,n,t){if(!n||n>4)throw new Error("size "+n);var r=n;return function(e,n,t){var r=t?(0,i.gm)(e):e;switch(r){case"unorm8":return 1===n?"unorm8-webgl":3===n?"unorm8x3-webgl":r+"x"+n;case"snorm8":case"uint8":case"sint8":case"uint16":case"sint16":case"unorm16":case"snorm16":case"float16":if(1===n||3===n)throw new Error("size: "+n);return r+"x"+n;default:return 1===n?r:r+"x"+n}}((0,i.UE)(e),r,t)}function a(e){var n;switch(e.primitiveType){case"f32":n="float32";break;case"i32":n="sint32";break;case"u32":n="uint32";break;case"f16":return e.components<=2?"float16x2":"float16x4"}return 1===e.components?n:n+"x"+e.components}},8397:(e,n,t)=>{var i;function r(e){return(!i||i.byteLength<e)&&(i=new ArrayBuffer(e)),i}function o(e,n){return new e(r(e.BYTES_PER_ELEMENT*n),0,n)}t.d(n,{X:()=>o,o:()=>r})},8862:(e,n,t)=>{t.d(n,{R:()=>i});var i=new(t(5593).t)({id:"luma.gl"})},5997:(e,n,t)=>{t.d(n,{d:()=>r});var i=t(6237),r=new(function(){function e(){this.stats=new Map}var n=e.prototype;return n.getStats=function(e){return this.get(e)},n.get=function(e){return this.stats.has(e)||this.stats.set(e,new i.A({id:e})),this.stats.get(e)},e}())},1010:(e,n,t)=>{t.d(n,{L:()=>r});var i={};function r(e){return void 0===e&&(e="id"),i[e]=i[e]||1,e+"-"+i[e]++}},147:(e,n,t)=>{t.d(n,{Dt:()=>s,Qj:()=>a});var i=t(675),r=t(467),o="";function a(e){o=e}function s(e,n){return l.apply(this,arguments)}function l(){return(l=(0,r.A)((0,i.A)().mark((function e(n,t){var r;return(0,i.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(r=new Image).crossOrigin=(null==t?void 0:t.crossOrigin)||"anonymous",r.src=n.startsWith("http")?n:o+n,e.next=5,r.decode();case 5:if(!t){e.next=11;break}return e.next=8,createImageBitmap(r,t);case 8:e.t0=e.sent,e.next=14;break;case 11:return e.next=13,createImageBitmap(r);case 13:e.t0=e.sent;case 14:return e.abrupt("return",e.t0);case 15:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},1716:(e,n,t)=>{t.d(n,{_G:()=>f,ic:()=>c,k2:()=>d});var i=t(675),r=t(467),o=t(8862),a=t(3618),s=1,l=null,u=!1,c={debugSpectorJS:o.R.get("debug-spectorjs"),debugSpectorJSUrl:"https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js",gl:void 0};function f(e){return p.apply(this,arguments)}function p(){return(p=(0,r.A)((0,i.A)().mark((function e(n){return(0,i.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(globalThis.SPECTOR){e.next=9;break}return e.prev=1,e.next=4,(0,a.k)(n.debugSpectorJSUrl||c.debugSpectorJSUrl);case 4:e.next=9;break;case 6:e.prev=6,e.t0=e.catch(1),o.R.warn(String(e.t0));case 9:case"end":return e.stop()}}),e,null,[[1,6]])})))).apply(this,arguments)}function d(e){var n,t,i;if(!(e=Object.assign({},c,e)).debugSpectorJS)return null;if(!l&&globalThis.SPECTOR&&(null==(n=globalThis.luma)||!n.spector)){o.R.probe(s,"SPECTOR found and initialized. Start with `luma.spector.displayUI()`")();var r=globalThis.SPECTOR.Spector;l=new r,globalThis.luma&&(globalThis.luma.spector=l)}if(!l)return null;u||(u=!0,l.spyCanvases(),null==(t=l)||t.onCaptureStarted.add((function(e){return o.R.info("Spector capture started:",e)()})),null==(i=l)||i.onCapture.add((function(e){var n,t,i;o.R.info("Spector capture complete:",e)(),null==(n=l)||n.getResultUI(),null==(t=l)||t.resultView.display(),null==(i=l)||i.resultView.addCapture(e)})));if(e.gl){var a,f=e.gl,p=f.device;null==(a=l)||a.startCapture(e.gl,500),f.device=p,new Promise((function(e){return setTimeout(e,2e3)})).then((function(e){var n;o.R.info("Spector capture stopped after 2 seconds")(),null==(n=l)||n.stopCapture()}))}return l}},4976:(e,n,t)=>{t.d(n,{$:()=>p,l:()=>_});var i=t(675),r=t(3845),o=t(467),a=t(8862),s=t(5981),l=t(6769),u=t(3618),c="https://unpkg.com/webgl-debug@2.0.1/index.js";function f(e){return e.luma=e.luma||{},e.luma}function p(){return d.apply(this,arguments)}function d(){return(d=(0,o.A)((0,i.A)().mark((function e(){return(0,i.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(0,l.B)()||globalThis.WebGLDebugUtils){e.next=5;break}return globalThis.global=globalThis.global||globalThis,globalThis.global.module={},e.next=5,(0,u.k)(c);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function _(e,n){return void 0===n&&(n={}),n.debugWebGL||n.traceWebGL?function(e,n){if(!globalThis.WebGLDebugUtils)return a.R.warn("webgl-debug not loaded")(),e;var t=f(e);if(t.debugContext)return t.debugContext;globalThis.WebGLDebugUtils.init(Object.assign({},s.GL,e));var i=globalThis.WebGLDebugUtils.makeDebugContext(e,m.bind(null,n),v.bind(null,n));for(var r in s.GL)r in i||"number"!=typeof s.GL[r]||(i[r]=s.GL[r]);var o=function(){};Object.setPrototypeOf(i,Object.getPrototypeOf(e)),Object.setPrototypeOf(o,i);var l=Object.create(o);return t.realContext=e,t.debugContext=l,l.debug=!0,l}(e,n):function(e){var n=f(e);return n.realContext?n.realContext:e}(e)}function h(e,n){n=Array.from(n).map((function(e){return void 0===e?"undefined":e}));var t=globalThis.WebGLDebugUtils.glFunctionArgsToString(e,n);return"gl."+e+"("+(t=t.slice(0,100)+(t.length>100?"...":""))+")"}function m(e,n,t,i){i=Array.from(i).map((function(e){return void 0===e?"undefined":e}));var r=globalThis.WebGLDebugUtils.glEnumToString(n)+" in gl."+t+"("+globalThis.WebGLDebugUtils.glFunctionArgsToString(t,i)+")";a.R.error(r)()}function v(e,n,t){var i="";a.R.level>=1&&(i=h(n,t),e.traceWebGL&&a.R.log(1,i)());for(var o,s=(0,r.A)(t);!(o=s()).done;){void 0===o.value&&(i=i||h(n,t))}}},3618:(e,n,t)=>{t.d(n,{k:()=>o});var i=t(675),r=t(467);function o(e,n){return a.apply(this,arguments)}function a(){return(a=(0,r.A)((0,i.A)().mark((function e(n,t){var r,o;return(0,i.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=document.getElementsByTagName("head")[0]){e.next=3;break}throw new Error("loadScript");case 3:return(o=document.createElement("script")).setAttribute("type","text/javascript"),o.setAttribute("src",n),t&&(o.id=t),e.abrupt("return",new Promise((function(e,t){o.onload=e,o.onerror=function(e){return t(new Error("Unable to load script '"+n+"': "+e))},r.appendChild(o)})));case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}},4255:(e,n,t)=>{t.d(n,{PZ:()=>$i,gl:()=>er,MV:()=>rr,k9:()=>lr,zW:()=>ur,Jh:()=>tr,z6:()=>ir,yr:()=>or,LL:()=>Zi,BA:()=>sr,_j:()=>Qi,YI:()=>Ji,YE:()=>cr,ZM:()=>fr,Z5:()=>nr,rq:()=>dr,yt:()=>pr,n5:()=>ar});var i={};t.r(i),t.d(i,{ShaderAssembler:()=>ge,_getDependencyGraph:()=>Z,_resolveModules:()=>Q,assembleGLSLShaderPair:()=>ce,capitalize:()=>_t,checkShaderModuleDeprecations:()=>K,combineInjects:()=>X,convertToVec4:()=>dt,dirlight:()=>sn,fp32:()=>Lt,fp64:()=>yt,fp64LowPart:()=>xt,fp64arithmetic:()=>Ot,fp64ify:()=>St,fp64ifyMatrix4:()=>Nt,fromHalfFloat:()=>Ct,generateShaderForModule:()=>gt,getPassthroughFS:()=>ct,getQualifierDetails:()=>ut,getShaderInfo:()=>oe,getShaderLayoutFromWGSL:()=>P,getShaderModuleDependencies:()=>q,getShaderModuleSource:()=>_e,getShaderModuleUniforms:()=>z,gouraudMaterial:()=>Vt,initializeShaderModule:()=>W,initializeShaderModules:()=>j,lighting:()=>Ut,pbrMaterial:()=>Wt,phongMaterial:()=>Xt,picking:()=>Mt,preprocess:()=>ve,random:()=>Pt,toHalfFloat:()=>Tt,typeToChannelCount:()=>pt,typeToChannelSuffix:()=>ft});t(6540);var r=t(5175),o=t(3845),a=t(7387),s=t(8564),l=t(8862);function u(e){return Array.isArray(e)?0===e.length||"number"==typeof e[0]:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}(e)}var c=function(){function e(e){if(this.uniforms={},this.modifiedUniforms={},this.modified=!0,this.bindingLayout={},this.needsRedraw="initialized",this.name=(null==e?void 0:e.name)||"unnamed",null!=e&&e.name&&null!=e&&e.shaderLayout){var n,t=null==e||null==(n=e.shaderLayout.bindings)?void 0:n.find((function(n){return"uniform"===n.type&&n.name===(null==e?void 0:e.name)}));if(!t)throw new Error(null==e?void 0:e.name);for(var i,r=t,a=(0,o.A)(r.uniforms||[]);!(i=a()).done;){var s=i.value;this.bindingLayout[s.name]=s}}}var n=e.prototype;return n.setUniforms=function(e){for(var n=0,t=Object.entries(e);n<t.length;n++){var i=t[n],r=i[0],o=i[1];this._setUniform(r,o),this.needsRedraw||this.setNeedsRedraw(this.name+"."+r+"="+o)}},n.setNeedsRedraw=function(e){this.needsRedraw=this.needsRedraw||e},n.getAllUniforms=function(){return this.modifiedUniforms={},this.needsRedraw=!1,this.uniforms||{}},n._setUniform=function(e,n){var t;(function(e,n,t){if(void 0===t&&(t=16),e!==n)return!1;var i=e,r=n;if(!u(i))return!1;if(u(r)&&i.length===r.length)for(var o=0;o<i.length;++o)if(r[o]!==i[o])return!1;return!0})(this.uniforms[e],n)||(this.uniforms[e]=u(t=n)?t.slice():t,this.modifiedUniforms[e]=!0,this.modified=!0)},e}(),f=t(2596),p=t(9905),d=t(8397),_=function(){function e(e){this.layout={};for(var n=0,t=0,i=Object.entries(e);t<i.length;t++){var r=i[t],o=r[0],a=r[1],s=(0,p.k0)(a),l=s.type,u=s.components,c=n=(0,f.JP)(n,u);n+=u,this.layout[o]={type:l,size:u,offset:c}}var d=4*(n+=(4-n%4)%4);this.byteLength=Math.max(d,1024)}var n=e.prototype;return n.getData=function(e){for(var n=Math.max(this.byteLength,1024),t=(0,d.o)(n),i={i32:new Int32Array(t),u32:new Uint32Array(t),f32:new Float32Array(t),f16:new Uint16Array(t)},r=0,o=Object.entries(e);r<o.length;r++){var a=o[r],s=a[0],c=a[1],f=this.layout[s];if(f){var p=f.type,_=f.size,h=f.offset,m=i[p];if(1===_){if("number"!=typeof c&&"boolean"!=typeof c){l.R.warn("Supplied value for single component uniform "+s+" is not a number: "+c)();continue}m[h]=Number(c)}else{if(!u(c)){l.R.warn("Supplied value for multi component / array uniform "+s+" is not a numeric array: "+c)();continue}m.set(c,h)}}else l.R.warn("Supplied uniform value "+s+" not present in uniform block layout")()}return new Uint8Array(t)},n.has=function(e){return Boolean(this.layout[e])},n.get=function(e){return this.layout[e]},e}(),h=function(){function e(e){this.uniformBlocks=new Map,this.uniformBufferLayouts=new Map,this.uniformBuffers=new Map;for(var n=0,t=Object.entries(e);n<t.length;n++){var i=t[n],r=i[0],o=i[1],a=r,s=new _(o.uniformTypes||{});this.uniformBufferLayouts.set(a,s);var l=new c({name:r});l.setUniforms(o.defaultUniforms||{}),this.uniformBlocks.set(a,l)}}var n=e.prototype;return n.destroy=function(){for(var e,n=(0,o.A)(this.uniformBuffers.values());!(e=n()).done;){e.value.destroy()}},n.setUniforms=function(e){for(var n=0,t=Object.entries(e);n<t.length;n++){var i,r=t[n],o=r[0],a=r[1];null==(i=this.uniformBlocks.get(o))||i.setUniforms(a)}this.updateUniformBuffers()},n.getUniformBufferByteLength=function(e){var n;return(null==(n=this.uniformBufferLayouts.get(e))?void 0:n.byteLength)||0},n.getUniformBufferData=function(e){var n,t,i=(null==(n=this.uniformBlocks.get(e))?void 0:n.getAllUniforms())||{};return null==(t=this.uniformBufferLayouts.get(e))?void 0:t.getData(i)},n.createUniformBuffer=function(e,n,t){t&&this.setUniforms(t);var i=this.getUniformBufferByteLength(n),r=e.createBuffer({usage:s.h.UNIFORM|s.h.COPY_DST,byteLength:i}),o=this.getUniformBufferData(n);return r.write(o),r},n.getManagedUniformBuffer=function(e,n){if(!this.uniformBuffers.get(n)){var t=this.getUniformBufferByteLength(n),i=e.createBuffer({usage:s.h.UNIFORM|s.h.COPY_DST,byteLength:t});this.uniformBuffers.set(n,i)}return this.uniformBuffers.get(n)},n.updateUniformBuffers=function(){for(var e,n=!1,t=(0,o.A)(this.uniformBlocks.keys());!(e=t()).done;){var i=e.value,r=this.updateUniformBuffer(i);n||(n=r)}return n&&l.R.log(3,"UniformStore.updateUniformBuffers(): "+n)(),n},n.updateUniformBuffer=function(e){var n=this.uniformBlocks.get(e),t=this.uniformBuffers.get(e),i=!1;if(t&&null!=n&&n.needsRedraw){var r,o;i||(i=n.needsRedraw);var a=this.getUniformBufferData(e);null==(r=t=this.uniformBuffers.get(e))||r.write(a);var s=null==(o=this.uniformBlocks.get(e))?void 0:o.getAllUniforms();l.R.log(4,"Writing to uniform buffer "+String(e),a,s)()}return i},e}();function m(){var e=1,n=1;return function(){return e=Math.sin(17.23*n),n=Math.cos(27.92*e),(t=1432.71*Math.abs(e*n))-Math.floor(t);var t}}var v=1,g=1,E=function(){function e(){this.time=0,this.channels=new Map,this.animations=new Map,this.playing=!1,this.lastEngineTime=-1}var n=e.prototype;return n.addChannel=function(e){var n=e.delay,t=void 0===n?0:n,i=e.duration,r=void 0===i?Number.POSITIVE_INFINITY:i,o=e.rate,a=void 0===o?1:o,s=e.repeat,l=v++,u={time:0,delay:t,duration:r,rate:a,repeat:void 0===s?1:s};return this._setChannelTime(u,this.time),this.channels.set(l,u),l},n.removeChannel=function(e){this.channels.delete(e);for(var n,t=(0,o.A)(this.animations);!(n=t()).done;){var i=n.value,r=i[0];i[1].channel===e&&this.detachAnimation(r)}},n.isFinished=function(e){var n=this.channels.get(e);return void 0!==n&&this.time>=n.delay+n.duration*n.repeat},n.getTime=function(e){if(void 0===e)return this.time;var n=this.channels.get(e);return void 0===n?-1:n.time},n.setTime=function(e){this.time=Math.max(0,e);for(var n,t=this.channels.values(),i=(0,o.A)(t);!(n=i()).done;){var r=n.value;this._setChannelTime(r,this.time)}for(var a,s=this.animations.values(),l=(0,o.A)(s);!(a=l()).done;){var u=a.value,c=u.animation,f=u.channel;c.setTime(this.getTime(f))}},n.play=function(){this.playing=!0},n.pause=function(){this.playing=!1,this.lastEngineTime=-1},n.reset=function(){this.setTime(0)},n.attachAnimation=function(e,n){var t=g++;return this.animations.set(t,{animation:e,channel:n}),e.setTime(this.getTime(n)),t},n.detachAnimation=function(e){this.animations.delete(e)},n.update=function(e){this.playing&&(-1===this.lastEngineTime&&(this.lastEngineTime=e),this.setTime(this.time+(e-this.lastEngineTime)),this.lastEngineTime=e)},n._setChannelTime=function(e,n){var t=n-e.delay;t>=e.duration*e.repeat?e.time=e.duration*e.rate:(e.time=Math.max(0,t)%e.duration,e.time*=e.rate)},e}(),A=function(){function e(e){this.startIndex=-1,this.endIndex=-1,this.factor=0,this.times=[],this.values=[],this._lastTime=-1,this.setKeyFrames(e),this.setTime(0)}var n=e.prototype;return n.setKeyFrames=function(e){var n=e.length;this.times.length=n,this.values.length=n;for(var t=0;t<n;++t)this.times[t]=e[t][0],this.values[t]=e[t][1];this._calculateKeys(this._lastTime)},n.setTime=function(e){(e=Math.max(0,e))!==this._lastTime&&(this._calculateKeys(e),this._lastTime=e)},n.getStartTime=function(){return this.times[this.startIndex]},n.getEndTime=function(){return this.times[this.endIndex]},n.getStartData=function(){return this.values[this.startIndex]},n.getEndData=function(){return this.values[this.endIndex]},n._calculateKeys=function(e){var n=0,t=this.times.length;for(n=0;n<t-2&&!(this.times[n+1]>e);++n);this.startIndex=n,this.endIndex=n+1;var i=this.times[this.startIndex],r=this.times[this.endIndex];this.factor=Math.min(Math.max(0,(e-i)/(r-i)),1)},e}(),R=t(8696),b=function(){function e(e){this.bufferLayouts=e}var n=e.prototype;return n.getBufferLayout=function(e){return this.bufferLayouts.find((function(n){return n.name===e}))||null},n.getAttributeNamesForBuffer=function(e){var n;return e.attributes?null==(n=e.attributes)?void 0:n.map((function(e){return e.attribute})):[e.name]},n.mergeBufferLayouts=function(e,n){for(var t,i=[].concat(e),r=function(){var e=t.value,n=i.findIndex((function(n){return n.name===e.name}));n<0?i.push(e):i[n]=e},a=(0,o.A)(n);!(t=a()).done;)r();return i},e}(),T=t(1213),C=t(5839),I=t(9532),S=t(7406),x=t(9853),N=t(2973);function P(e){var n,t={attributes:[],bindings:[]};try{n=function(e){try{return new N.$X(e)}catch(t){if(t instanceof Error)throw t;var n="WGSL parse error";throw"object"==typeof t&&null!=t&&t.message&&(n+=": "+t.message+" "),"object"==typeof t&&null!=t&&t.token&&(n+=t.token.line||""),new Error(n,{cause:t})}}(e)}catch(C){return l.R.error(C.message)(),t}for(var i,r=(0,o.A)(n.uniforms);!(i=r()).done;){for(var a,s=i.value,u=[],c=(0,o.A)((null==(f=s.type)?void 0:f.members)||[]);!(a=c()).done;){var f,p=a.value;u.push({name:p.name,type:L(p.type)})}t.bindings.push({type:"uniform",name:s.name,group:s.group,location:s.binding,members:u})}for(var d,_=(0,o.A)(n.textures);!(d=_()).done;){var h=d.value;t.bindings.push({type:"texture",name:h.name,group:h.group,location:h.binding})}for(var m,v=(0,o.A)(n.samplers);!(m=v()).done;){var g=m.value;t.bindings.push({type:"sampler",name:g.name,group:g.group,location:g.binding})}for(var E=n.entry.vertex[0],A=(null==E?void 0:E.inputs.length)||0,R=0;R<A;R++){var b=E.inputs[R];if("location"===b.locationType){var T=L(b.type);t.attributes.push({name:b.name,location:Number(b.location),type:T})}}return t}function L(e){return e.format?e.name+"<"+e.format.name+">":e.name}function O(e,n){if(!e)throw new Error(n||"shadertools: assertion failed.")}var y={number:{type:"number",validate:function(e,n){return Number.isFinite(e)&&"object"==typeof n&&(void 0===n.max||e<=n.max)&&(void 0===n.min||e>=n.min)}},array:{type:"array",validate:function(e,n){return Array.isArray(e)||ArrayBuffer.isView(e)}}};function M(e){var n=F(e);if("object"!==n)return Object.assign({value:e},y[n],{type:n});if("object"==typeof e)return e?void 0!==e.type?Object.assign({},e,y[e.type],{type:e.type}):void 0===e.value?{type:"object",value:e}:(n=F(e.value),Object.assign({},e,y[n],{type:n})):{type:"object",value:null};throw new Error("props")}function F(e){return Array.isArray(e)||ArrayBuffer.isView(e)?"array":typeof e}var w={vertex:"#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n",fragment:"#ifdef MODULE_MATERIAL\n  fragColor = material_filterColor(fragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  fragColor = lighting_filterColor(fragColor);\n#endif\n\n#ifdef MODULE_FOG\n  fragColor = fog_filterColor(fragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  fragColor = picking_filterHighlightColor(fragColor);\n  fragColor = picking_filterPickingColor(fragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth();\n#endif\n"},D=/void\s+main\s*\([^)]*\)\s*\{\n?/,B=/}\n?[^{}]*$/,U=[],G="__LUMA_INJECT_DECLARATIONS__";function H(e){var n={vertex:{},fragment:{}};for(var t in e){var i=e[t];"string"==typeof i&&(i={order:0,injection:i}),n[k(t)][t]=i}return n}function k(e){var n=e.slice(0,2);switch(n){case"vs":return"vertex";case"fs":return"fragment";default:throw new Error(n)}}function V(e,n,t,i){void 0===i&&(i=!1);var r="vertex"===n,o=function(){var n=t[a];n.sort((function(e,n){return e.order-n.order})),U.length=n.length;for(var i=0,o=n.length;i<o;++i)U[i]=n[i].injection;var s=U.join("\n")+"\n";switch(a){case"vs:#decl":r&&(e=e.replace(G,s));break;case"vs:#main-start":r&&(e=e.replace(D,(function(e){return e+s})));break;case"vs:#main-end":r&&(e=e.replace(B,(function(e){return s+e})));break;case"fs:#decl":r||(e=e.replace(G,s));break;case"fs:#main-start":r||(e=e.replace(D,(function(e){return e+s})));break;case"fs:#main-end":r||(e=e.replace(B,(function(e){return s+e})));break;default:e=e.replace(a,(function(e){return e+s}))}};for(var a in t)o();return e=e.replace(G,""),i&&(e=e.replace(/\}\s*$/,(function(e){return e+w[n]}))),e}function X(e){var n={};return O(Array.isArray(e)&&e.length>1),e.forEach((function(e){for(var t in e)n[t]=n[t]?n[t]+"\n"+e[t]:e[t]})),n}function j(e){e.map((function(e){return W(e)}))}function W(e){if(!e.instance){j(e.dependencies||[]);var n=e.propTypes,t=void 0===n?{}:n,i=e.deprecations,r=void 0===i?[]:i,o=e.inject,a={normalizedInjections:H(void 0===o?{}:o),parsedDeprecations:Y(r)};t&&(a.propValidators=function(e){for(var n={},t=0,i=Object.entries(e);t<i.length;t++){var r=i[t],o=r[0],a=r[1];n[o]=M(a)}return n}(t)),e.instance=a;var s={};t&&(s=Object.entries(t).reduce((function(e,n){var t=n[0],i=n[1],r=null==i?void 0:i.value;return r&&(e[t]=r),e}),{})),e.defaultUniforms=Object.assign({},e.defaultUniforms,s)}}function z(e,n,t){var i;W(e);var r=t||Object.assign({},e.defaultUniforms);return n&&e.getUniforms?e.getUniforms(n,r):function(e,n,t){for(var i={},r=0,o=Object.entries(n);r<o.length;r++){var a=o[r],s=a[0],l=a[1];e&&s in e&&!l.private?(l.validate&&O(l.validate(e[s],l),t+": invalid "+s),i[s]=e[s]):i[s]=l.value}return i}(n,null==(i=e.instance)?void 0:i.propValidators,e.name)}function K(e,n,t){var i;null==(i=e.deprecations)||i.forEach((function(e){var i;null!=(i=e.regex)&&i.test(n)&&(e.deprecated?t.deprecated(e.old,e.new)():t.removed(e.old,e.new)())}))}function Y(e){return e.forEach((function(e){if("function"===e.type)e.regex=new RegExp("\\b"+e.old+"\\(");else e.regex=new RegExp(e.type+" "+e.old+";")})),e}function q(e){j(e);var n={},t={};Z({modules:e,level:0,moduleMap:n,moduleDepth:t});var i=Object.keys(t).sort((function(e,n){return t[n]-t[e]})).map((function(e){return n[e]}));return j(i),i}function Z(e){var n=e.modules,t=e.level,i=e.moduleMap,r=e.moduleDepth;if(t>=5)throw new Error("Possible loop in shader dependency graph");for(var a,s=(0,o.A)(n);!(a=s()).done;){var l=a.value;i[l.name]=l,(void 0===r[l.name]||r[l.name]<t)&&(r[l.name]=t)}for(var u,c=(0,o.A)(n);!(u=c()).done;){var f=u.value;f.dependencies&&Z({modules:f.dependencies,level:t+1,moduleMap:i,moduleDepth:r})}}function Q(e){return function(e){j(e);var n={},t={};return Z({modules:e,level:0,moduleMap:n,moduleDepth:t}),j(e=Object.keys(t).sort((function(e,n){return t[n]-t[e]})).map((function(e){return n[e]}))),e}(e)}var J=[[/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/,"#version 300 es\n"],[/\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g,"textureLod("],[/\btexture(2D|2DProj|Cube)(EXT)?\(/g,"texture("]],$=[].concat(J,[[te("attribute"),"in $1"],[te("varying"),"out $1"]]),ee=[].concat(J,[[te("varying"),"in $1"]]);function ne(e,n){for(var t,i=(0,o.A)(n);!(t=i()).done;){var r=t.value,a=r[0],s=r[1];e=e.replace(a,s)}return e}function te(e){return new RegExp("\\b"+e+"[ \\t]+(\\w+[ \\t]+\\w+(\\[\\w+\\])?;)","g")}function ie(e,n){var t="";for(var i in e){var r=e[i];if(t+="void "+r.signature+" {\n",r.header&&(t+="  "+r.header),n[i]){var a=n[i];a.sort((function(e,n){return e.order-n.order}));for(var s,l=(0,o.A)(a);!(s=l()).done;){t+="  "+s.value.injection+"\n"}}r.footer&&(t+="  "+r.footer),t+="}\n"}return t}function re(e){for(var n,t={vertex:{},fragment:{}},i=(0,o.A)(e);!(n=i()).done;){var r=n.value,a=void 0,s=void 0;"string"!=typeof r?s=(a=r).hook:(a={},s=r);var l=(s=s.trim()).split(":"),u=l[0],c=l[1],f=s.replace(/\(.+/,""),p=Object.assign(a,{signature:c});switch(u){case"vs":t.vertex[f]=p;break;case"fs":t.fragment[f]=p;break;default:throw new Error(u)}}return t}function oe(e,n){return{name:ae(e,n),language:"glsl",version:se(e)}}function ae(e,n){void 0===n&&(n="unnamed");var t=/#define[^\S\r\n]*SHADER_NAME[^\S\r\n]*([A-Za-z0-9_-]+)\s*/.exec(e);return t?t[1]:n}function se(e){var n=100,t=e.match(/[^\s]+/g);if(t&&t.length>=2&&"#version"===t[0]){var i=parseInt(t[1],10);Number.isFinite(i)&&(n=i)}if(100!==n&&300!==n)throw new Error("Invalid GLSL version "+n);return n}var le="\n\n"+G+"\n",ue="precision highp float;\n";function ce(e){var n=e.vs,t=e.fs,i=q(e.modules||[]);return{vs:pe(e.platformInfo,Object.assign({},e,{source:n,stage:"vertex",modules:i})),fs:pe(e.platformInfo,Object.assign({},e,{source:t,stage:"fragment",modules:i})),getUniforms:de(i)}}function fe(e,n){var t=n.source,i=n.stage,r=n.modules,a=n.hookFunctions,s=void 0===a?[]:a,l=n.inject,u=void 0===l?{}:l,c=n.log;O("string"==typeof t,"shader source must be a string");var f=t,p="",d=re(s),_={},h={},m={};for(var v in u){var g="string"==typeof u[v]?{injection:u[v],order:0}:u[v],E=/^(v|f)s:(#)?([\w-]+)$/.exec(v);if(E){var A=E[2],R=E[3];A?"decl"===R?h[v]=[g]:m[v]=[g]:_[v]=[g]}else m[v]=[g]}for(var b,T=r,C=(0,o.A)(T);!(b=C()).done;){var I,S=b.value;c&&K(S,f,c),p+=_e(S,"wgsl");var x=(null==(I=S.injections)?void 0:I[i])||{};for(var N in x){var P=/^(v|f)s:#([\w-]+)$/.exec(N);if(P){var L="decl"===P[2]?h:m;L[N]=L[N]||[],L[N].push(x[N])}else _[N]=_[N]||[],_[N].push(x[N])}}return p=V(p+=le,i,h),p+=ie(d[i],_),p=V(p+=f,i,m)}function pe(e,n){var t=n.source,i=n.stage,r=n.language,a=void 0===r?"glsl":r,s=n.modules,l=n.defines,u=void 0===l?{}:l,c=n.hookFunctions,f=void 0===c?[]:c,p=n.inject,d=void 0===p?{}:p,_=n.prologue,h=void 0===_||_,m=n.log;O("string"==typeof t,"shader source must be a string");var v="glsl"===a?oe(t).version:-1,g=e.shaderLanguageVersion,E=100===v?"#version 100":"#version 300 es",A=t.split("\n").slice(1).join("\n"),R={};s.forEach((function(e){Object.assign(R,e.defines)})),Object.assign(R,u);var b="";switch(a){case"wgsl":break;case"glsl":b=h?E+"\n\n// ----- PROLOGUE -------------------------\n#define SHADER_TYPE_"+i.toUpperCase()+"\n\n"+function(e){switch(null==e?void 0:e.gpu.toLowerCase()){case"apple":return"#define APPLE_GPU\n// Apple optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n";case"nvidia":return"#define NVIDIA_GPU\n// Nvidia optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n";case"intel":return"#define INTEL_GPU\n// Intel optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n";case"amd":return"#define AMD_GPU\n";default:return"#define DEFAULT_GPU\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Headless Chrome's software shader 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// If the GPU doesn't have full 32 bits precision, will causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n"}}(e)+"\n"+("fragment"===i?ue:"")+"\n\n// ----- APPLICATION DEFINES -------------------------\n\n"+function(e){void 0===e&&(e={});var n="";for(var t in e){var i=e[t];(i||Number.isFinite(i))&&(n+="#define "+t.toUpperCase()+" "+e[t]+"\n")}return n}(R)+"\n\n":E+"\n"}var T=re(f),C={},I={},S={};for(var x in d){var N="string"==typeof d[x]?{injection:d[x],order:0}:d[x],P=/^(v|f)s:(#)?([\w-]+)$/.exec(x);if(P){var L=P[2],y=P[3];L?"decl"===y?I[x]=[N]:S[x]=[N]:C[x]=[N]}else S[x]=[N]}for(var M,F=(0,o.A)(s);!(M=F()).done;){var w,D=M.value;m&&K(D,A,m),b+=_e(D,i);var B=(null==(w=D.instance)?void 0:w.normalizedInjections[i])||{};for(var U in B){var G=/^(v|f)s:#([\w-]+)$/.exec(U);if(G){var H="decl"===G[2]?I:S;H[U]=H[U]||[],H[U].push(B[U])}else C[U]=C[U]||[],C[U].push(B[U])}}return b+="// ----- MAIN SHADER SOURCE -------------------------",b=V(b+=le,i,I),b+=ie(T[i],C),b=V(b+=A,i,S),"glsl"===a&&v!==g&&(b=function(e,n){var t;if(300!==Number((null==(t=e.match(/^#version[ \t]+(\d+)/m))?void 0:t[1])||100))throw new Error("luma.gl v9 only supports GLSL 3.00 shader sources");switch(n){case"vertex":return ne(e,$);case"fragment":return ne(e,ee);default:throw new Error(n)}}(b,i)),b.trim()}function de(e){return function(n){for(var t,i={},r=(0,o.A)(e);!(t=r()).done;){var a=t.value,s=null==a.getUniforms?void 0:a.getUniforms(n,i);Object.assign(i,s)}return i}}function _e(e,n){var t;switch(n){case"vertex":t=e.vs||"";break;case"fragment":t=e.fs||"";break;case"wgsl":t=e.source||"";break;default:O(!1)}if(!e.name)throw new Error("Shader module must have a name");var i=e.name.toUpperCase().replace(/[^0-9a-z]/gi,"_"),r="// ----- MODULE "+e.name+" ---------------\n\n";return"wgsl"!==n&&(r+="#define MODULE_"+i+"\n"),r+=t+"\n"}var he=/^\s*\#\s*ifdef\s*([a-zA-Z_]+)\s*$/,me=/^\s*\#\s*endif\s*$/;function ve(e,n){for(var t,i=e.split("\n"),r=[],a=!0,s=null,l=(0,o.A)(i);!(t=l()).done;){var u,c=t.value,f=c.match(he),p=c.match(me);if(f)s=f[1],a=Boolean(null==n||null==(u=n.defines)?void 0:u[s]);else p?a=!0:a&&r.push(c)}return r.join("\n")}var ge=function(){function e(){this._hookFunctions=[],this._defaultModules=[]}e.getDefaultShaderAssembler=function(){return e.defaultShaderAssembler=e.defaultShaderAssembler||new e,e.defaultShaderAssembler};var n=e.prototype;return n.addDefaultModule=function(e){this._defaultModules.find((function(n){return n.name===("string"==typeof e?e:e.name)}))||this._defaultModules.push(e)},n.removeDefaultModule=function(e){var n="string"==typeof e?e:e.name;this._defaultModules=this._defaultModules.filter((function(e){return e.name!==n}))},n.addShaderHook=function(e,n){n&&(e=Object.assign(n,{hook:e})),this._hookFunctions.push(e)},n.assembleWGSLShader=function(e){var n=this._getModuleList(e.modules),t=this._hookFunctions,i=function(e){var n=q(e.modules||[]);return{source:fe(e.platformInfo,Object.assign({},e,{source:e.source,stage:"vertex",modules:n})),getUniforms:de(n)}}(Object.assign({},e,{source:e.source,modules:n,hookFunctions:t})),r=i.source,o=i.getUniforms;return{source:"wgsl"===e.platformInfo.shaderLanguage?ve(r):r,getUniforms:o,modules:n}},n.assembleGLSLShaderPair=function(e){var n=this._getModuleList(e.modules),t=this._hookFunctions,i=ce(Object.assign({},e,{vs:e.vs,fs:e.fs,modules:n,hookFunctions:t}));return Object.assign({},i,{modules:n})},n._getModuleList=function(e){void 0===e&&(e=[]);for(var n=new Array(this._defaultModules.length+e.length),t={},i=0,r=0,o=this._defaultModules.length;r<o;++r){var a=this._defaultModules[r],s=a.name;n[i++]=a,t[s]=!0}for(var l=0,u=e.length;l<u;++l){var c=e[l],f=c.name;t[f]||(n[i++]=c,t[f]=!0)}return n.length=i,j(n),n},e}(),Ee=t(5264),Ae={};function Re(e){return void 0===e&&(e="id"),Ae[e]=Ae[e]||1,e+"-"+Ae[e]++}var be=function(){function e(e){if(this.userData={},this.bufferLayout=[],this.id=e.id||Re("geometry"),this.topology=e.topology,this.indices=e.indices||null,this.attributes=e.attributes,this.vertexCount=e.vertexCount,this.bufferLayout=e.bufferLayout||[],this.indices&&!(this.indices.usage&s.h.INDEX))throw new Error("Index buffer must have INDEX usage")}var n=e.prototype;return n.destroy=function(){var e;null==(e=this.indices)||e.destroy();for(var n=0,t=Object.values(this.attributes);n<t.length;n++){t[n].destroy()}},n.getVertexCount=function(){return this.vertexCount},n.getAttributes=function(){return this.attributes},n.getIndexes=function(){return this.indices||null},n._calculateVertexCount=function(e){return e.byteLength/12},e}();function Te(e,n){if(n instanceof be)return n;var t=function(e,n){if(!n.indices)return;var t=n.indices.value;return e.createBuffer({usage:s.h.INDEX,data:t})}(e,n),i=function(e,n){for(var t=[],i={},r=0,o=Object.entries(n.attributes);r<o.length;r++){var a=o[r],s=a[0],l=a[1],u=s;switch(s){case"POSITION":u="positions";break;case"NORMAL":u="normals";break;case"TEXCOORD_0":u="texCoords";break;case"COLOR_0":u="colors"}if(l){i[u]=e.createBuffer({data:l.value,id:s+"-buffer"});var c=l.value,f=l.size,p=l.normalized;t.push({name:u,format:(0,Ee.OB)(c,f,p)})}}var d=n._calculateVertexCount(n.attributes,n.indices);return{attributes:i,bufferLayout:t,vertexCount:d}}(e,n),r=i.attributes,o=i.bufferLayout;return new be({topology:n.topology||"triangle-list",bufferLayout:o,vertexCount:n.vertexCount,indices:t,attributes:r})}var Ce,Ie=t(5128);Ce=Symbol.toStringTag;var Se=function(){n.getDefaultPipelineFactory=function(e){return e._lumaData.defaultPipelineFactory=e._lumaData.defaultPipelineFactory||new n(e),e._lumaData.defaultPipelineFactory};var e=n.prototype;function n(e){this._hashCounter=0,this._hashes={},this._renderPipelineCache={},this._computePipelineCache={},this.device=e,this.cachingEnabled=e.props._cachePipelines,this.destroyPolicy=e.props._cacheDestroyPolicy,this.debug=e.props.debugFactories}return e.toString=function(){return"PipelineFactory("+this.device.id+")"},e.createRenderPipeline=function(e){var n;if(!this.cachingEnabled)return this.device.createRenderPipeline(e);var t=Object.assign({},x.r.defaultProps,e),i=this._renderPipelineCache,r=this._hashRenderPipeline(t),o=null==(n=i[r])?void 0:n.pipeline;return o?(i[r].useCount++,this.debug&&l.R.warn(this+": "+i[r].pipeline+" reused, count="+i[r].useCount+", (id="+e.id+")")()):((o=this.device.createRenderPipeline(Object.assign({},t,{id:t.id?t.id+"-cached":Re("unnamed-cached")}))).hash=r,i[r]={pipeline:o,useCount:1},this.debug&&l.R.warn(this+": "+o+" created, count="+i[r].useCount)()),o},e.createComputePipeline=function(e){var n;if(!this.cachingEnabled)return this.device.createComputePipeline(e);var t=Object.assign({},Ie.C.defaultProps,e),i=this._computePipelineCache,r=this._hashComputePipeline(t),o=null==(n=i[r])?void 0:n.pipeline;return o?(i[r].useCount++,this.debug&&l.R.warn(this+": "+i[r].pipeline+" reused, count="+i[r].useCount+", (id="+e.id+")")()):((o=this.device.createComputePipeline(Object.assign({},t,{id:t.id?t.id+"-cached":void 0}))).hash=r,i[r]={pipeline:o,useCount:1},this.debug&&l.R.warn(this+": "+o+" created, count="+i[r].useCount)()),o},e.release=function(e){if(this.cachingEnabled){var n=this._getCache(e),t=e.hash;n[t].useCount--,0===n[t].useCount?(this._destroyPipeline(e),this.debug&&l.R.warn(this+": "+e+" released and destroyed")()):n[t].useCount<0?(l.R.error(this+": "+e+" released, useCount < 0, resetting")(),n[t].useCount=0):this.debug&&l.R.warn(this+": "+e+" released, count="+n[t].useCount)()}else e.destroy()},e._destroyPipeline=function(e){var n=this._getCache(e);switch(this.destroyPolicy){case"never":return!1;case"unused":return delete n[e.hash],e.destroy(),!0}},e._getCache=function(e){var n;if(e instanceof Ie.C&&(n=this._computePipelineCache),e instanceof x.r&&(n=this._renderPipelineCache),!n)throw new Error(""+this);if(!n[e.hash])throw new Error(this+": "+e+" matched incorrect entry");return n},e._hashComputePipeline=function(e){return this.device.type+"/C/"+this._getHash(e.shader.source)},e._hashRenderPipeline=function(e){var n=e.vs?this._getHash(e.vs.source):0,t=e.fs?this._getHash(e.fs.source):0,i=this._getHash(JSON.stringify(e.bufferLayout)),r=this.device.type;if("webgl"===r)return r+"/R/"+n+"/"+t+"V-BL"+i;var o=this._getHash(JSON.stringify(e.parameters));return r+"/R/"+n+"/"+t+"V-T"+e.topology+"P"+o+"BL"+i},e._getHash=function(e){return void 0===this._hashes[e]&&(this._hashes[e]=this._hashCounter++),this._hashes[e]},(0,R.A)(n,[{key:Ce,get:function(){return"PipelineFactory"}}]),n}();Se.defaultProps=Object.assign({},x.r.defaultProps);var xe,Ne=t(349);xe=Symbol.toStringTag;var Pe=function(){n.getDefaultShaderFactory=function(e){var t;return(t=e._lumaData).defaultShaderFactory||(t.defaultShaderFactory=new n(e)),e._lumaData.defaultShaderFactory};var e=n.prototype;function n(e){this._cache={},this.device=e,this.cachingEnabled=e.props._cacheShaders,this.destroyPolicy=e.props._cacheDestroyPolicy,this.debug=!0}return e.toString=function(){return this[Symbol.toStringTag]+"("+this.device.id+")"},e.createShader=function(e){if(!this.cachingEnabled)return this.device.createShader(e);var n=this._hashShader(e),t=this._cache[n];if(t)t.useCount++,this.debug&&l.R.warn(this+": Reusing shader "+t.shader.id+" count="+t.useCount)();else{var i=this.device.createShader(Object.assign({},e,{id:e.id?e.id+"-cached":void 0}));this._cache[n]=t={shader:i,useCount:1},this.debug&&l.R.warn(this+": Created new shader "+i.id)()}return t.shader},e.release=function(e){if(this.cachingEnabled){var n=this._hashShader(e),t=this._cache[n];if(t)if(t.useCount--,0===t.useCount)"unused"===this.destroyPolicy&&(delete this._cache[n],t.shader.destroy(),this.debug&&l.R.warn(this+": Releasing shader "+e.id+", destroyed")());else{if(t.useCount<0)throw new Error("ShaderFactory: Shader "+e.id+" released too many times");this.debug&&l.R.warn(this+": Releasing shader "+e.id+" count="+t.useCount)()}}else e.destroy()},e._hashShader=function(e){return e.stage+":"+e.source},(0,R.A)(n,[{key:xe,get:function(){return"ShaderFactory"}}]),n}();Pe.defaultProps=Object.assign({},Ne.M.defaultProps);var Le=null,Oe=null;function ye(e,n,t){if(e===n)return!0;if(!t||!e||!n)return!1;if(Array.isArray(e)){if(!Array.isArray(n)||e.length!==n.length)return!1;for(var i=0;i<e.length;i++)if(!ye(e[i],n[i],t-1))return!1;return!0}if(Array.isArray(n))return!1;if("object"==typeof e&&"object"==typeof n){var r=Object.keys(e),o=Object.keys(n);if(r.length!==o.length)return!1;for(var a=0,s=r;a<s.length;a++){var l=s[a];if(!n.hasOwnProperty(l))return!1;if(!ye(e[l],n[l],t-1))return!1}return!0}return!1}var Me=t(6282);function Fe(e){var n={bindings:{},uniforms:{}};return Object.keys(e).forEach((function(t){var i,r=e[t];i=r,(0,Me.H9)(i)||"number"==typeof i||"boolean"==typeof i?n.uniforms[t]=r:n.bindings[t]=r})),n}var we,De=function(){function e(e,n){this.options={disableWarnings:!1},Object.assign(this.options,n);for(var t,i=q(Object.values(e).filter((function(e){return e.dependencies}))),r=(0,o.A)(i);!(t=r()).done;){var a=t.value;e[a.name]=a}l.R.log(1,"Creating ShaderInputs with modules",Object.keys(e))(),this.modules=e,this.moduleUniforms={},this.moduleBindings={};for(var s=0,u=Object.entries(e);s<u.length;s++){var c=u[s],f=c[0],p=c[1];this._addModule(p),p.name&&f!==p.name&&!this.options.disableWarnings&&l.R.warn("Module name: "+f+" vs "+p.name)()}}var n=e.prototype;return n.destroy=function(){},n.setProps=function(e){for(var n=0,t=Object.keys(e);n<t.length;n++){var i=t[n],r=i,o=e[r]||{},a=this.modules[r];if(a||this.options.disableWarnings){var s=this.moduleUniforms[r],u=this.moduleBindings[r],c=Fe((null==a.getUniforms?void 0:a.getUniforms(o,s))||o),f=c.uniforms,p=c.bindings;this.moduleUniforms[r]=Object.assign({},s,f),this.moduleBindings[r]=Object.assign({},u,p)}else l.R.warn("Module "+i+" not found")()}},n.getModules=function(){return Object.values(this.modules)},n.getUniformValues=function(){return this.moduleUniforms},n.getBindingValues=function(){for(var e={},n=0,t=Object.values(this.moduleBindings);n<t.length;n++){var i=t[n];Object.assign(e,i)}return e},n.getDebugTable=function(){for(var e={},n=0,t=Object.entries(this.moduleUniforms);n<t.length;n++)for(var i=t[n],r=i[0],o=i[1],a=0,s=Object.entries(o);a<s.length;a++){var l,u=s[a],c=u[0],f=u[1];e[r+"."+c]={type:null==(l=this.modules[r].uniformTypes)?void 0:l[c],value:String(f)}}return e},n._addModule=function(e){var n=e.name;this.moduleUniforms[n]=e.defaultUniforms||{},this.moduleBindings[n]={}},e}(),Be=t(675),Ue=t(467),Ge=t(147),He=["+X","-X","+Y","-Y","+Z","-Z"],ke=["+X","-X","+Y","-Y","+Z","-Z"];we=Symbol.toStringTag;var Ve,Xe=function(){var e=n.prototype;function n(e,t){var i,r=this;this.isReady=!1,this.destroyed=!1,this.resolveReady=function(){},this.rejectReady=function(){},this.device=e;var o=Re("async-texture");this.props=Object.assign({},n.defaultProps,{id:o},t),this.id=this.props.id,"string"==typeof(null==(i=t=Object.assign({},t))?void 0:i.data)&&"2d"===t.dimension&&(t.data=(0,Ge.Dt)(t.data)),t.mipmaps&&(t.mipLevels="auto"),this.ready=new Promise((function(e,n){r.resolveReady=function(){r.isReady=!0,e()},r.rejectReady=n})),this.initAsync(t)}return e.toString=function(){return'AsyncTexture:"'+this.id+'"('+(this.isReady?"ready":"loading")+")"},e.initAsync=function(){var e=(0,Ue.A)((0,Be.A)().mark((function e(n){var t,i,r,o,a;return(0,Be.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.data,e.next=3,je(t).then(undefined,undefined);case 3:if(i=e.sent,!this.destroyed){e.next=6;break}return e.abrupt("return");case 6:if(r=this.props.width&&this.props.height?{width:this.props.width,height:this.props.height}:this.getTextureDataSize(i)){e.next=9;break}throw new Error("Texture size could not be determined");case 9:if(o=Object.assign({},r,n,{data:void 0,mipLevels:1}),a=this.device.getMipLevelCount(o.width,o.height),o.mipLevels="auto"===this.props.mipLevels?a:Math.min(a,this.props.mipLevels),this.texture=this.device.createTexture(o),this.sampler=this.texture.sampler,this.view=this.texture.view,this.isReady=!0,!n.data){e.next=32;break}e.t0=this.props.dimension,e.next="1d"===e.t0?20:"2d"===e.t0?22:"3d"===e.t0?24:"2d-array"===e.t0?26:"cube"===e.t0?28:"cube-array"===e.t0?30:32;break;case 20:return this._setTexture1DData(this.texture,i),e.abrupt("break",32);case 22:return this._setTexture2DData(i),e.abrupt("break",32);case 24:return this._setTexture3DData(this.texture,i),e.abrupt("break",32);case 26:return this._setTextureArrayData(this.texture,i),e.abrupt("break",32);case 28:return this._setTextureCubeData(this.texture,i),e.abrupt("break",32);case 30:return this._setTextureCubeArrayData(this.texture,i),e.abrupt("break",32);case 32:this.props.mipmaps&&this.generateMipmaps(),l.R.info(1,this+" loaded");case 34:case"end":return e.stop()}}),e,this)})));return function(n){return e.apply(this,arguments)}}(),e.destroy=function(){this.texture&&(this.texture.destroy(),this.texture=null),this.destroyed=!0},e.generateMipmaps=function(){this.texture.generateMipmapsWebGL()},e.setSampler=function(e){void 0===e&&(e={}),this.texture.setSampler(e instanceof I.L?e:this.device.createSampler(e))},e.resize=function(e){if(!this.isReady)throw new Error("Cannot resize texture before it is ready");if(e.width===this.texture.width&&e.height===this.texture.height)return!1;if(this.texture){var n=this.texture;this.texture=n.clone(e),n.destroy()}return!0},e.isTextureLevelData=function(e){var n=null==e?void 0:e.data;return ArrayBuffer.isView(n)},e.getTextureDataSize=function(e){if(!e)return null;if(ArrayBuffer.isView(e))return null;if(Array.isArray(e))return this.getTextureDataSize(e[0]);if(this.device.isExternalImage(e))return this.device.getExternalImageSize(e);if(e&&"object"==typeof e&&e.constructor===Object){var n=Object.values(e)[0];return{width:n.width,height:n.height}}throw new Error("texture size deduction failed")},e.getCubeFaceDepth=function(e){switch(e){case"+X":return 0;case"-X":return 1;case"+Y":return 2;case"-Y":return 3;case"+Z":return 4;case"-Z":return 5;default:throw new Error(e)}},e.setTextureData=function(e){},e._setTexture1DData=function(e,n){throw new Error("setTexture1DData not supported in WebGL.")},e._setTexture2DData=function(e,n){if(void 0===n&&(n=0),!this.texture)throw new Error("Texture not initialized");var t=this._normalizeTextureData(e);t.length>1&&!1!==this.props.mipmaps&&l.R.warn("Texture "+this.id+" mipmap and multiple LODs.")();for(var i=0;i<t.length;i++){var r=t[i];this.device.isExternalImage(r)?this.texture.copyExternalImage({image:r,depth:n,mipLevel:i,flipY:!0}):this.texture.copyImageData({data:r.data,mipLevel:i})}},e._setTexture3DData=function(e,n){var t;if("3d"!==(null==(t=this.texture)?void 0:t.props.dimension))throw new Error(this.id);for(var i=0;i<n.length;i++)this._setTexture2DData(n[i],i)},e._setTextureCubeData=function(e,n){var t;if("cube"!==(null==(t=this.texture)?void 0:t.props.dimension))throw new Error(this.id);for(var i=0,r=Object.entries(n);i<r.length;i++){var o=r[i],a=o[0],s=o[1],l=ke.indexOf(a);this._setTexture2DData(s,l)}},e._setTextureArrayData=function(e,n){var t;if("2d-array"!==(null==(t=this.texture)?void 0:t.props.dimension))throw new Error(this.id);for(var i=0;i<n.length;i++)this._setTexture2DData(n[i],i)},e._setTextureCubeArrayData=function(e,n){throw new Error("setTextureCubeArrayData not supported in WebGL2.")},e._setTextureCubeFaceData=function(e,n,t,i){void 0===i&&(i=0),Array.isArray(n)&&n.length>1&&!1!==this.props.mipmaps&&l.R.warn(this.id+" has mipmap and multiple LODs.")();var r=He.indexOf(t);this._setTexture2DData(n,r)},e._normalizeTextureData=function(e){var n=this.texture;return ArrayBuffer.isView(e)?[{data:e,width:n.width,height:n.height}]:Array.isArray(e)?e:[e]},(0,R.A)(n,[{key:we,get:function(){return"AsyncTexture"}}]),n}();function je(e){return We.apply(this,arguments)}function We(){return We=(0,Ue.A)((0,Be.A)().mark((function e(n){var t,i,r,o,a;return(0,Be.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n;case 2:if(n=e.sent,!Array.isArray(n)){e.next=7;break}return e.next=6,Promise.all(n.map(je));case 6:return e.abrupt("return",e.sent);case 7:if(!n||"object"!=typeof n||n.constructor!==Object){e.next=16;break}return t=n,e.next=11,Promise.all(Object.values(t));case 11:for(i=e.sent,r=Object.keys(t),o={},a=0;a<r.length;a++)o[r[a]]=i[a];return e.abrupt("return",o);case 16:return e.abrupt("return",n);case 17:case"end":return e.stop()}}),e)}))),We.apply(this,arguments)}Xe.defaultProps=Object.assign({},C.g.defaultProps,{data:null,mipmaps:!1});Ve=Symbol.toStringTag;var ze=function(){var e=n.prototype;function n(e,t){var i,r,o;this.userData={},this.isInstanced=void 0,this.instanceCount=0,this.indexBuffer=null,this.bufferAttributes={},this.constantAttributes={},this.bindings={},this.transformFeedback=null,this._attributeInfos={},this._gpuGeometry=null,this._pipelineNeedsUpdate="newly created",this._needsRedraw="initializing",this._destroyed=!1,this._lastDrawTimestamp=-1,this._lastLogTime=0,this._logOpen=!1,this._drawCount=0,this.props=Object.assign({},n.defaultProps,t),t=this.props,this.id=t.id||Re("model"),this.device=e,Object.assign(this.userData,t.userData);var a=Object.fromEntries((null==(i=this.props.modules)?void 0:i.map((function(e){return[e.name,e]})))||[]),s=t.shaderInputs||new De(a,{disableWarnings:this.props.disableWarnings});this.setShaderInputs(s);var l=function(e){return{type:e.type,shaderLanguage:e.info.shadingLanguage,shaderLanguageVersion:e.info.shadingLanguageVersion,gpu:e.info.gpu,features:e.features}}(e),u=((null==(r=this.props.modules)?void 0:r.length)>0?this.props.modules:null==(o=this.shaderInputs)?void 0:o.getModules())||[];if("webgpu"===this.device.type&&this.props.source){var c;(c=this.props).shaderLayout||(c.shaderLayout=P(this.props.source));var f=this.props.shaderAssembler.assembleWGSLShader(Object.assign({platformInfo:l},this.props,{modules:u})),p=f.source,d=f.getUniforms;this.source=p,this._getModuleUniforms=d}else{var _=this.props.shaderAssembler.assembleGLSLShaderPair(Object.assign({platformInfo:l},this.props,{modules:u})),h=_.vs,m=_.fs,v=_.getUniforms;this.vs=h,this.fs=m,this._getModuleUniforms=v}this.vertexCount=this.props.vertexCount,this.instanceCount=this.props.instanceCount,this.topology=this.props.topology,this.bufferLayout=this.props.bufferLayout,this.parameters=this.props.parameters,t.geometry&&this.setGeometry(t.geometry),this.pipelineFactory=t.pipelineFactory||Se.getDefaultPipelineFactory(this.device),this.shaderFactory=t.shaderFactory||Pe.getDefaultShaderFactory(this.device),this.pipeline=this._updatePipeline(),this.vertexArray=e.createVertexArray({shaderLayout:this.pipeline.shaderLayout,bufferLayout:this.pipeline.bufferLayout}),this._gpuGeometry&&this._setGeometryAttributes(this._gpuGeometry),"isInstanced"in t&&(this.isInstanced=t.isInstanced),t.instanceCount&&this.setInstanceCount(t.instanceCount),t.vertexCount&&this.setVertexCount(t.vertexCount),t.indexBuffer&&this.setIndexBuffer(t.indexBuffer),t.attributes&&this.setAttributes(t.attributes),t.constantAttributes&&this.setConstantAttributes(t.constantAttributes),t.bindings&&this.setBindings(t.bindings),t.transformFeedback&&(this.transformFeedback=t.transformFeedback),Object.seal(this)}return e.toString=function(){return"Model("+this.id+")"},e.destroy=function(){var e;this._destroyed||(this.pipelineFactory.release(this.pipeline),this.shaderFactory.release(this.pipeline.vs),this.pipeline.fs&&this.shaderFactory.release(this.pipeline.fs),this._uniformStore.destroy(),null==(e=this._gpuGeometry)||e.destroy(),this._destroyed=!0)},e.needsRedraw=function(){this._getBindingsUpdateTimestamp()>this._lastDrawTimestamp&&this.setNeedsRedraw("contents of bound textures or buffers updated");var e=this._needsRedraw;return this._needsRedraw=!1,e},e.setNeedsRedraw=function(e){this._needsRedraw||(this._needsRedraw=e)},e.predraw=function(){this.updateShaderInputs(),this.pipeline=this._updatePipeline()},e.draw=function(e){var n,t=this._areBindingsLoading();if(t)return l.R.info(2,">>> DRAWING ABORTED "+this.id+": "+t+" not loaded")(),!1;try{e.pushDebugGroup(this+".predraw("+e+")"),this.predraw()}finally{e.popDebugGroup()}try{e.pushDebugGroup(this+".draw("+e+")"),this._logDrawCallStart(),this.pipeline=this._updatePipeline();var i=this._getBindings();this.pipeline.setBindings(i,{disableWarnings:this.props.disableWarnings});var r=this.vertexArray.indexBuffer,o=r?r.byteLength/("uint32"===r.indexType?4:2):void 0;n=this.pipeline.draw({renderPass:e,vertexArray:this.vertexArray,isInstanced:this.isInstanced,vertexCount:this.vertexCount,instanceCount:this.instanceCount,indexCount:o,transformFeedback:this.transformFeedback||void 0,parameters:this.parameters,topology:this.topology})}finally{e.popDebugGroup(),this._logDrawCallEnd()}return this._logFramebuffer(e),n?(this._lastDrawTimestamp=this.device.timestamp,this._needsRedraw=!1):this._needsRedraw="waiting for resource initialization",n},e.setGeometry=function(e){var n;null==(n=this._gpuGeometry)||n.destroy();var t=e&&Te(this.device,e);if(t){this.setTopology(t.topology||"triangle-list");var i=new b(this.bufferLayout);this.bufferLayout=i.mergeBufferLayouts(t.bufferLayout,this.bufferLayout),this.vertexArray&&this._setGeometryAttributes(t)}this._gpuGeometry=t},e.setTopology=function(e){e!==this.topology&&(this.topology=e,this._setPipelineNeedsUpdate("topology"))},e.setBufferLayout=function(e){var n=new b(this.bufferLayout);this.bufferLayout=this._gpuGeometry?n.mergeBufferLayouts(e,this._gpuGeometry.bufferLayout):e,this._setPipelineNeedsUpdate("bufferLayout"),this.pipeline=this._updatePipeline(),this.vertexArray=this.device.createVertexArray({shaderLayout:this.pipeline.shaderLayout,bufferLayout:this.pipeline.bufferLayout}),this._gpuGeometry&&this._setGeometryAttributes(this._gpuGeometry)},e.setParameters=function(e){ye(e,this.parameters,2)||(this.parameters=e,this._setPipelineNeedsUpdate("parameters"))},e.setInstanceCount=function(e){this.instanceCount=e,void 0===this.isInstanced&&e>0&&(this.isInstanced=!0),this.setNeedsRedraw("instanceCount")},e.setVertexCount=function(e){this.vertexCount=e,this.setNeedsRedraw("vertexCount")},e.setShaderInputs=function(e){this.shaderInputs=e,this._uniformStore=new h(this.shaderInputs.modules);for(var n=0,t=Object.entries(this.shaderInputs.modules);n<t.length;n++){var i=t[n],r=i[0];if(Ke(i[1])){var o=this._uniformStore.getManagedUniformBuffer(this.device,r);this.bindings[r+"Uniforms"]=o}}this.setNeedsRedraw("shaderInputs")},e.updateShaderInputs=function(){this._uniformStore.setUniforms(this.shaderInputs.getUniformValues()),this.setBindings(this.shaderInputs.getBindingValues()),this.setNeedsRedraw("shaderInputs")},e.setBindings=function(e){Object.assign(this.bindings,e),this.setNeedsRedraw("bindings")},e.setTransformFeedback=function(e){this.transformFeedback=e,this.setNeedsRedraw("transformFeedback")},e.setIndexBuffer=function(e){this.vertexArray.setIndexBuffer(e),this.setNeedsRedraw("indexBuffer")},e.setAttributes=function(e,n){var t,i=null!=(t=null==n?void 0:n.disableWarnings)?t:this.props.disableWarnings;e.indices&&l.R.warn("Model:"+this.id+" setAttributes() - indexBuffer should be set using setIndexBuffer()")();for(var r=new b(this.bufferLayout),a=0,s=Object.entries(e);a<s.length;a++){var u=s[a],c=u[0],f=u[1],p=r.getBufferLayout(c);if(p){for(var d,_=r.getAttributeNamesForBuffer(p),h=!1,m=(0,o.A)(_);!(d=m()).done;){var v=d.value,g=this._attributeInfos[v];g&&(this.vertexArray.setBuffer(g.location,f),h=!0)}h||i||l.R.warn("Model("+this.id+'): Ignoring buffer "'+f.id+'" for unknown attribute "'+c+'"')()}else i||l.R.warn("Model("+this.id+'): Missing layout for buffer "'+c+'".')()}this.setNeedsRedraw("attributes")},e.setConstantAttributes=function(e,n){for(var t=0,i=Object.entries(e);t<i.length;t++){var r,o=i[t],a=o[0],s=o[1],u=this._attributeInfos[a];u?this.vertexArray.setConstantWebGL(u.location,s):(null!=(r=null==n?void 0:n.disableWarnings)?r:this.props.disableWarnings)||l.R.warn('Model "'+this.id+': Ignoring constant supplied for unknown attribute "'+a+'"')()}this.setNeedsRedraw("constants")},e._areBindingsLoading=function(){for(var e=0,n=Object.values(this.bindings);e<n.length;e++){var t=n[e];if(t instanceof Xe&&!t.isReady)return t.id}return!1},e._getBindings=function(){for(var e={},n=0,t=Object.entries(this.bindings);n<t.length;n++){var i=t[n],r=i[0],o=i[1];o instanceof Xe?o.isReady&&(e[r]=o.texture):e[r]=o}return e},e._getBindingsUpdateTimestamp=function(){for(var e=0,n=0,t=Object.values(this.bindings);n<t.length;n++){var i=t[n];i instanceof T.X?e=Math.max(e,i.texture.updateTimestamp):i instanceof s.h||i instanceof C.g?e=Math.max(e,i.updateTimestamp):i instanceof Xe?e=i.texture?Math.max(e,i.texture.updateTimestamp):1/0:i instanceof I.L||(e=Math.max(e,i.buffer.updateTimestamp))}return e},e._setGeometryAttributes=function(e){for(var n=this,t=Object.assign({},e.attributes),i=function(){var e=o[r][0];n.pipeline.shaderLayout.attributes.find((function(n){return n.name===e}))||"positions"===e||delete t[e]},r=0,o=Object.entries(t);r<o.length;r++)i();this.vertexCount=e.vertexCount,this.setIndexBuffer(e.indices||null),this.setAttributes(e.attributes,{disableWarnings:!0}),this.setAttributes(t,{disableWarnings:this.props.disableWarnings}),this.setNeedsRedraw("geometry attributes")},e._setPipelineNeedsUpdate=function(e){this._pipelineNeedsUpdate||(this._pipelineNeedsUpdate=e),this.setNeedsRedraw(e)},e._updatePipeline=function(){if(this._pipelineNeedsUpdate){var e=null,n=null;this.pipeline&&(l.R.log(1,"Model "+this.id+': Recreating pipeline because "'+this._pipelineNeedsUpdate+'".')(),e=this.pipeline.vs,n=this.pipeline.fs),this._pipelineNeedsUpdate=!1;var t=this.shaderFactory.createShader({id:this.id+"-vertex",stage:"vertex",source:this.source||this.vs,debugShaders:this.props.debugShaders}),i=null;this.source?i=t:this.fs&&(i=this.shaderFactory.createShader({id:this.id+"-fragment",stage:"fragment",source:this.source||this.fs,debugShaders:this.props.debugShaders})),this.pipeline=this.pipelineFactory.createRenderPipeline(Object.assign({},this.props,{bufferLayout:this.bufferLayout,topology:this.topology,parameters:this.parameters,bindings:this._getBindings(),vs:t,fs:i})),this._attributeInfos=(0,S.P)(this.pipeline.shaderLayout,this.bufferLayout),e&&this.shaderFactory.release(e),n&&this.shaderFactory.release(n)}return this.pipeline},e._logDrawCallStart=function(){var e=l.R.level>3?0:1e4;l.R.level<2||Date.now()-this._lastLogTime<e||(this._lastLogTime=Date.now(),this._logOpen=!0,l.R.group(2,">>> DRAWING MODEL "+this.id,{collapsed:l.R.level<=2})())},e._logDrawCallEnd=function(){if(this._logOpen){var e=function(e,n){var t,i,r={},a="Values";if(0===e.attributes.length&&(null==(t=e.varyings)||!t.length))return{"No attributes or varyings":(i={},i[a]="N/A",i)};for(var s,l=(0,o.A)(e.attributes);!(s=l()).done;){var u,c=s.value;c&&(r["in "+c.location+" "+c.name+": "+c.type]=((u={})[a]=c.stepMode||"vertex",u))}for(var f,p=(0,o.A)(e.varyings||[]);!(f=p()).done;){var d,_=f.value;r["out "+_.location+" "+_.name]=((d={})[a]=JSON.stringify(_),d)}return r}(this.pipeline.shaderLayout,this.id);l.R.table(2,e)();var n=this.shaderInputs.getDebugTable();l.R.table(2,n)();var t=this._getAttributeDebugTable();l.R.table(2,this._attributeInfos)(),l.R.table(2,t)(),l.R.groupEnd(2)(),this._logOpen=!1}},e._logFramebuffer=function(e){var n=this.device.props.debugFramebuffers;if(this._drawCount++,n){var t=e.props.framebuffer;t&&function(e,n){var t,i=n.id,r=(n.minimap,n.opaque),o=n.top,a=void 0===o?"0":o,s=n.left,l=void 0===s?"0":s,u=n.rgbaScale,c=void 0===u?1:u;Le||((Le=document.createElement("canvas")).id=i,Le.title=i,Le.style.zIndex="100",Le.style.position="absolute",Le.style.top=a,Le.style.left=l,Le.style.border="blue 5px solid",Le.style.transform="scaleY(-1)",document.body.appendChild(Le),Oe=Le.getContext("2d")),Le.width===e.width&&Le.height===e.height||(Le.width=e.width/2,Le.height=e.height/2,Le.style.width="400px",Le.style.height="400px");var f=e.device.readPixelsToArrayWebGL(e),p=null==(t=Oe)?void 0:t.createImageData(e.width,e.height);if(p){for(var d,_=0;_<f.length;_+=4)p.data[0+_+0]=f[_+0]*c,p.data[0+_+1]=f[_+1]*c,p.data[0+_+2]=f[_+2]*c,p.data[0+_+3]=r?255:f[_+3]*c;null==(d=Oe)||d.putImageData(p,0,0)}}(t,{id:t.id,minimap:!0})}},e._getAttributeDebugTable=function(){for(var e={},n=0,t=Object.entries(this._attributeInfos);n<t.length;n++){var i=t[n],r=i[0],o=i[1],a=this.vertexArray.attributes[o.location];e[o.location]={name:r,type:o.shaderType,values:a?this._getBufferOrConstantValues(a,o.bufferDataType):"null"}}if(this.vertexArray.indexBuffer){var s=this.vertexArray.indexBuffer,l="uint32"===s.indexType?new Uint32Array(s.debugData):new Uint16Array(s.debugData);e.indices={name:"indices",type:s.indexType,values:l.toString()}}return e},e._getBufferOrConstantValues=function(e,n){var t=(0,f.Y0)(n);return(e instanceof s.h?new t(e.debugData):e).toString()},(0,R.A)(n,[{key:Ve,get:function(){return"Model"}}]),n}();function Ke(e){return Boolean(e.uniformTypes&&!function(e){for(var n in e)return!1;return!0}(e.uniformTypes))}ze.defaultProps=Object.assign({},x.r.defaultProps,{source:void 0,vs:null,fs:null,id:"unnamed",handle:void 0,userData:{},defines:{},modules:[],geometry:null,indexBuffer:null,attributes:{},constantAttributes:{},varyings:[],isInstanced:void 0,instanceCount:0,vertexCount:0,shaderInputs:void 0,pipelineFactory:void 0,shaderFactory:void 0,transformFeedback:void 0,shaderAssembler:ge.getDefaultShaderAssembler(),debugShaders:void 0,disableWarnings:void 0});var Ye=function(){function e(e){this.userData={};var n=e.attributes,t=void 0===n?{}:n,i=e.indices,r=void 0===i?null:i,o=e.vertexCount,a=void 0===o?null:o;this.id=e.id||Re("geometry"),this.topology=e.topology,r&&(this.indices=ArrayBuffer.isView(r)?{value:r,size:1}:r),this.attributes={};for(var s=0,l=Object.entries(t);s<l.length;s++){var u=l[s],c=u[0],f=u[1],p=ArrayBuffer.isView(f)?{value:f}:f;if(!ArrayBuffer.isView(p.value))throw new Error(this._print(c)+": must be typed array or object with value as typed array");if("POSITION"!==c&&"positions"!==c||p.size||(p.size=3),"indices"===c){if(this.indices)throw new Error("Multiple indices detected");this.indices=p}else this.attributes[c]=p}this.indices&&void 0!==this.indices.isIndexed&&(this.indices=Object.assign({},this.indices),delete this.indices.isIndexed),this.vertexCount=a||this._calculateVertexCount(this.attributes,this.indices)}var n=e.prototype;return n.getVertexCount=function(){return this.vertexCount},n.getAttributes=function(){return this.indices?Object.assign({indices:this.indices},this.attributes):this.attributes},n._print=function(e){return"Geometry "+this.id+" attribute "+e},n._setAttributes=function(e,n){return this},n._calculateVertexCount=function(e,n){if(n)return n.value.length;for(var t=1/0,i=0,r=Object.values(e);i<r.length;i++){var o=r[i],a=o.value,s=o.size;!o.constant&&a&&void 0!==s&&s>=1&&(t=Math.min(t,a.length/s))}return t},e}(),qe=function(e){function n(n){void 0===n&&(n={});var t=n,i=t.id,r=void 0===i?Re("cube-geometry"):i,o=t.indices,a=void 0===o||o;return e.call(this,a?Object.assign({},n,{id:r,topology:"triangle-list",indices:{size:1,value:Ze},attributes:Object.assign({},rn,n.attributes)}):Object.assign({},n,{id:r,topology:"triangle-list",indices:void 0,attributes:Object.assign({},on,n.attributes)}))||this}return(0,a.A)(n,e),n}(Ye),Ze=new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),Qe=new Float32Array([-1,-1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,-1,1,1,-1,1,-1]),Je=new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0]),$e=new Float32Array([0,0,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1]),en=new Float32Array([1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,1,1,-1,-1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,-1,1,-1,-1,-1,1,-1]),nn=new Float32Array([1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,1,0,1,0,0,1,0,1,1,0,0]),tn=new Float32Array([1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,0,1]),rn={POSITION:{size:3,value:Qe},NORMAL:{size:3,value:Je},TEXCOORD_0:{size:2,value:$e}},on={POSITION:{size:3,value:en},TEXCOORD_0:{size:2,value:nn},COLOR_0:{size:3,value:tn}},an=function(){function e(e){}return e.prototype.onInitialize=function(){var e=(0,Ue.A)((0,Be.A)().mark((function e(n){return(0,Be.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",null);case 1:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),e}(),sn={props:{},uniforms:{},name:"dirlight",dependencies:[],source:"  \nstruct dirlightUniforms {\n  lightDirection: vec3<f32>,\n};\n\nalias DirlightNormal = vec3<f32>;\n\nstruct DirlightInputs {\n  normal: DirlightNormal,\n};\n\n@binding(1) @group(0) var<uniform> dirlight : dirlightUniforms;\n\n// For vertex\nfn dirlight_setNormal(normal: vec3<f32>) -> DirlightNormal {\n  return normalize(normal);\n}\n\n// Returns color attenuated by angle from light source\nfn dirlight_filterColor(color: vec4<f32>, inputs: DirlightInputs) -> vec4<f32> {\n  // TODO - fix default light direction\n  // let lightDirection = dirlight.lightDirection;\n  let lightDirection = vec3<f32>(1, 1, 1);\n  let d: f32 = abs(dot(inputs.normal, normalize(lightDirection)));\n  return vec4<f32>(color.rgb * d, color.a);\n}\n",vs:"out vec3 dirlight_vNormal;\n\nvoid dirlight_setNormal(vec3 normal) {\n  dirlight_vNormal = normalize(normal);\n}\n",fs:"uniform dirlightUniforms {\n  vec3 lightDirection;\n} dirlight;\n\nin vec3 dirlight_vNormal;\n\n// Returns color attenuated by angle from light source\nvec4 dirlight_filterColor(vec4 color) {\n  float d = abs(dot(dirlight_vNormal, normalize(dirlight.lightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n",uniformTypes:{lightDirection:"vec3<f32>"},defaultUniforms:{lightDirection:[1,1,2]},getUniforms:function(e){void 0===e&&(e=sn.defaultUniforms);var n={};e.lightDirection&&(n.dirlight_uLightDirection=e.lightDirection);return n}};var ln=t(5663),un=t(4901),cn=m(),fn={uniformTypes:{uColor:"vec3<f32>",uModel:"mat4x4<f32>",uView:"mat4x4<f32>",uProjection:"mat4x4<f32>"}},pn=function(e){function n(n){var t,i=n.device,r=n.aspect,o=n.animationLoop;(t=e.call(this)||this).translations=[[2,-2,0],[2,2,0],[-2,2,0],[-2,-2,0]],t.rotations=[[cn(),cn(),cn()],[cn(),cn(),cn()],[cn(),cn(),cn()],[cn(),cn(),cn()]],t.colors=[[1,0,0],[0,1,0],[0,0,1],[1,1,0]],t.keyFrameData=[[0,0],[1e3,2*Math.PI],[2e3,Math.PI],[3e3,2*Math.PI],[4e3,0]],t.globalUniformStore=new h({dirlight:sn});var a=document.getElementById("play"),s=document.getElementById("pause");t.timeSlider=document.getElementById("time"),a&&s&&(a.addEventListener("click",(function(){return t.timeline.play()})),s.addEventListener("click",(function(){return t.timeline.pause()})),t.timeSlider.addEventListener("input",(function(e){return t.timeline.setTime(parseFloat(e.target.value))}))),t.timeline=new E,o.attachTimeline(t.timeline),t.timeline.play();var l=[t.timeline.addChannel({delay:2e3,rate:.5,duration:8e3,repeat:2}),t.timeline.addChannel({delay:1e4,rate:.2,duration:2e4,repeat:1}),t.timeline.addChannel({delay:7e3,rate:1,duration:4e3,repeat:8}),t.timeline.addChannel({delay:0,rate:.8,duration:5e3,repeat:Number.POSITIVE_INFINITY})];t.cubes=new Array(4);for(var u=[new A(t.keyFrameData),new A(t.keyFrameData),new A(t.keyFrameData),new A(t.keyFrameData)],c=0;c<4;++c){t.timeline.attachAnimation(u[c],l[c]);var f=new h({app:fn});f.setUniforms({app:{uProjection:(new ln.k).perspective({fovy:(0,un.F2)(60),aspect:r,near:1,far:20}),uView:(new ln.k).lookAt({center:[0,0,0],eye:[0,0,-8]}),uColor:t.colors[c]}}),t.cubes[c]={uniformStore:f,translation:t.translations[c],rotation:t.rotations[c],keyFrames:u[c],model:new ze(i,{id:"cube-"+c,source:"struct Uniforms {\n  uColor : vec3<f32>,\n  uModel : mat4x4<f32>,\n  uView : mat4x4<f32>,\n  uProjection : mat4x4<f32>,\n};\n\n@binding(0) @group(0) var<uniform> app : Uniforms;\n\nstruct VertexInputs {\n  // CUBE GEOMETRY\n  @location(0) positions : vec4<f32>,\n  @location(1) normals : vec3<f32>\n};\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) color : vec3<f32>,\n  @location(1) dirlightNormal: DirlightNormal,\n}\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs : FragmentInputs;\n  // gl_Position = app.uProjection * app.uView * app.uModel * vec4(positions, 1.0);\n  outputs.Position = app.uProjection * app.uView * app.uModel * inputs.positions;\n  outputs.color = app.uColor;\n\n  let normal: vec3<f32> = (app.uModel * vec4<f32>(inputs.normals, 0.0)).xyz;\n  outputs.dirlightNormal = dirlight_setNormal(normal);\n  return outputs;\n}\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  var fragColor = vec4(inputs.color, 1.);\n  fragColor = dirlight_filterColor(fragColor, DirlightInputs(inputs.dirlightNormal));\n  return fragColor;\n}\n",vs:"#version 300 es\n\nin vec3 positions;\nin vec3 normals;\n\nuniform appUniforms {\n  vec3 uColor;\n  mat4 uModel;\n  mat4 uView;\n  mat4 uProjection;\n} app;\n\nout vec3 color;\n\nvoid main(void) {\n  vec3 normal = vec3(app.uModel * vec4(normals, 0.0));\n\n  // Set up data for modules\n  color = app.uColor;\n  dirlight_setNormal(normal);\n  gl_Position = app.uProjection * app.uView * app.uModel * vec4(positions, 1.0);\n}\n",fs:"#version 300 es\n\nprecision highp float;\n\nin vec3 color;\nout vec4 fragColor;\n\nvoid main(void) {\n  fragColor = vec4(color, 1.);\n  fragColor = dirlight_filterColor(fragColor);\n}\n",instanceCount:1,modules:[sn],geometry:new qe,parameters:{depthWriteEnabled:!0,depthCompare:"less-equal"},bindings:{app:f.getManagedUniformBuffer(i,"app"),dirlight:t.globalUniformStore.getManagedUniformBuffer(i,"dirlight")}})}}return t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){for(var e,n=(0,o.A)(this.cubes);!(e=n()).done;){e.value.model.destroy()}},t.onRender=function(e){var n=e.device;this.timeSlider&&(this.timeSlider.value=this.timeline.getTime());for(var t,i=new ln.k,r=(0,o.A)(this.cubes);!(t=r()).done;){var a=t.value,s=a.keyFrames.getStartData(),l=a.keyFrames.getEndData(),u=s+a.keyFrames.factor*(l-s),c=a.rotation[0]+u,f=a.rotation[1]+u,p=a.rotation[2];i.identity().translate(a.translation).rotateXYZ([c,f,p]),a.uniformStore.setUniforms({app:{uModel:i}}),a.uniformStore.updateUniformBuffers()}for(var d,_=n.beginRenderPass({clearColor:[0,0,0,1],clearDepth:!0}),h=(0,o.A)(this.cubes);!(d=h()).done;){d.value.model.draw(_)}_.end()},n}(an);pn.info='Key frame animation based on multiple hierarchical timelines.\n<button id="play">Play</button>\n<button id="pause">Pause</button><BR>\nTime: <input type="range" id="time" min="0" max="30000" step="1"><BR>\n';var dn={name:"app",uniformTypes:{modelMatrix:"mat4x4<f32>",viewMatrix:"mat4x4<f32>",projectionMatrix:"vec3<f32>",eyePosition:"vec3<f32>"}},_n=function(e){function n(t,i){return e.call(this,t,Object.assign({},i,{id:"room-cube",geometry:new qe,source:n.source,vs:n.vs,fs:n.fs}))||this}return(0,a.A)(n,e),n}(ze);_n.source="struct appUniforms {\n  modelMatrix: mat4x4<f32>,\n  viewMatrix: mat4x4<f32>,\n  projectionMatrix: mat4x4<f32>,\n};\n\n@group(0) @binding(0) var<uniform> app : appUniforms;\n@group(0) @binding(1) var cubeTexture : texture_cube<f32>;\n@group(0) @binding(2) var cubeTextureSampler : sampler;\n\nstruct VertexInputs {\n  @location(0) positions : vec3<f32>,\n};\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) position : vec3<f32>,\n};\n\n@vertex \nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs : FragmentInputs;\n  outputs.Position = app.projectionMatrix * app.viewMatrix * app.modelMatrix * vec4<f32>(inputs.positions, 1.0);\n  outputs.position = inputs.positions;\n  return outputs;\n}\n\n@fragment \nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  // The outer cube just samples the texture cube directly\n  return textureSample(cubeTexture, cubeTextureSampler, normalize(inputs.position));\n}\n  ",_n.vs="#version 300 es\nin vec3 positions;\n\nuniform appUniforms {\n  mat4 modelMatrix;\n  mat4 viewMatrix;\n  mat4 projectionMatrix;\n} app;\n\nout vec3 vPosition;\n\nvoid main(void) {\n  gl_Position = app.projectionMatrix * app.viewMatrix * app.modelMatrix * vec4(positions, 1.0);\n  vPosition = positions;\n}\n  ",_n.fs="#version 300 es\nprecision highp float;\n\nuniform appUniforms {\n  mat4 modelMatrix;\n  mat4 viewMatrix;\n  mat4 projectionMatrix;\n} app;\n\nuniform samplerCube cubeTexture;\n\nin vec3 vPosition;\nout vec4 fragColor;\n\nvoid main(void) {\n  // The outer cube just samples the texture cube directly\n  fragColor = texture(cubeTexture, normalize(vPosition));\n}\n  ";var hn=function(e){function n(t,i){return e.call(this,t,Object.assign({},i,{id:"prism",geometry:new qe({indices:!0}),source:n.source,vs:n.vs,fs:n.fs}))||this}return(0,a.A)(n,e),n}(ze);hn.source="struct appUniforms {\n  modelMatrix: mat4x4<f32>,\n  viewMatrix: mat4x4<f32>,\n  projectionMatrix: mat4x4<f32>,\n  eyePosition: vec3<f32>,\n};\n\n@group(0) @binding(0) var<uniform> app : appUniforms;\n@group(0) @binding(1) var cubeTexture : texture_cube<f32>;\n@group(0) @binding(2) var cubeTextureSampler : sampler;\n@group(0) @binding(3) var prismTexture : texture_2d<f32>;\n@group(0) @binding(4) var prismTextureSampler : sampler;\n\nstruct VertexInputs {\n  @location(0) positions : vec3<f32>,\n  @location(1) normals : vec3<f32>,\n  @location(2) texCoords : vec2<f32>,\n};\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) position : vec3<f32>,\n  @location(1) normal : vec3<f32>,\n  @location(2) uv : vec2<f32>,\n};\n\n@vertex \nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs : FragmentInputs;\n  outputs.Position = app.projectionMatrix * app.viewMatrix * app.modelMatrix * vec4(inputs.positions, 1.0);\n  outputs.position = (app.modelMatrix * vec4(inputs.positions, 1.0)).xyz;\n  outputs.normal = normalize((app.modelMatrix * vec4(inputs.normals, 0.0)).xyz);\n  outputs.uv = inputs.texCoords;\n  return outputs;\n}\n\n@fragment \nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  let color = textureSample(prismTexture, prismTextureSampler, vec2(inputs.uv.x, 1.0 - inputs.uv.y));\n  let reflectedDir = reflect(normalize(inputs.position - app.eyePosition), inputs.normal);\n  let reflectedColor = textureSample(cubeTexture, cubeTextureSampler, reflectedDir);\n\n  return mix(color, reflectedColor, 0.8);\n}\n    ",hn.vs="#version 300 es\nin vec3 positions;\nin vec3 normals;\nin vec2 texCoords;\n\nout vec3 vPosition;\nout vec3 vNormal;\nout vec2 vUV;\n\nuniform appUniforms {\n  mat4 modelMatrix;\n  mat4 viewMatrix;\n  mat4 projectionMatrix;\n  vec3 eyePosition;\n} app;\n\nvoid main(void) {\n  gl_Position = app.projectionMatrix * app.viewMatrix * app.modelMatrix * vec4(positions, 1.0);\n  vPosition = vec3(app.modelMatrix * vec4(positions, 1.0));\n  vNormal = normalize(vec3(app.modelMatrix * vec4(normals, 0.0)));\n  vUV = texCoords;\n}\n  ",hn.fs="#version 300 es\nprecision highp float;\n\nin vec3 vPosition;\nin vec3 vNormal;\nin vec2 vUV;\n\nout vec4 fragColor;\n\nuniform appUniforms {\n  mat4 modelMatrix;\n  mat4 viewMatrix;\n  mat4 projectionMatrix;\n  vec3 eyePosition;\n} app;\n\nuniform sampler2D prismTexture;\nuniform samplerCube cubeTexture;\n\nvoid main(void) {\n  vec4 color = texture(prismTexture, vec2(vUV.x, 1.0 - vUV.y));\n  vec3 reflectedDir = reflect(normalize(vPosition - app.eyePosition), vNormal);\n  vec4 reflectedColor = texture(cubeTexture, reflectedDir);\n\n  fragColor = mix(color, reflectedColor, 0.8);\n}\n  ";var mn=function(e){function n(n){var t,i=n.device;(t=e.call(this)||this).roomShaderInputs=new De({app:dn}),t.prismShaderInputs=new De({app:dn});var r=new Xe(i,{dimension:"cube",mipmaps:!0,data:(0,Ue.A)((0,Be.A)().mark((function e(){return(0,Be.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,Ge.Dt)("sky-posx.png");case 2:return e.t0=e.sent,e.next=5,(0,Ge.Dt)("sky-negx.png");case 5:return e.t1=e.sent,e.next=8,(0,Ge.Dt)("sky-posy.png");case 8:return e.t2=e.sent,e.next=11,(0,Ge.Dt)("sky-negy.png");case 11:return e.t3=e.sent,e.next=14,(0,Ge.Dt)("sky-posz.png");case 14:return e.t4=e.sent,e.next=17,(0,Ge.Dt)("sky-negz.png");case 17:return e.t5=e.sent,e.abrupt("return",{"+X":e.t0,"-X":e.t1,"+Y":e.t2,"-Y":e.t3,"+Z":e.t4,"-Z":e.t5});case 19:case"end":return e.stop()}}),e)})))(),sampler:{magFilter:"linear",minFilter:"linear",mipmapFilter:"nearest"}}),o=new Xe(i,{data:(0,Ge.Dt)("vis-logo.png"),mipmaps:!0,sampler:{magFilter:"linear",minFilter:"linear",mipmapFilter:"nearest"}});return t.cube=new _n(i,{shaderInputs:t.roomShaderInputs,instanceCount:1,bindings:{cubeTexture:r},parameters:{depthWriteEnabled:!0,depthCompare:"less-equal"}}),t.prism=new hn(i,{shaderInputs:t.prismShaderInputs,instanceCount:1,bindings:{prismTexture:o,cubeTexture:r},parameters:{depthWriteEnabled:!0,depthCompare:"less-equal"}}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.prism.destroy(),this.cube.destroy()},t.onRender=function(e){var n=e.device,t=e.aspect,i=e.tick,r=[5,-3,5],o=(new ln.k).lookAt({eye:r}),a=(new ln.k).perspective({fovy:(0,un.F2)(45),aspect:t,near:.001,far:1e3}),s=n.beginRenderPass({clearColor:[0,0,0,1],clearDepth:1});this.roomShaderInputs.setProps({app:{viewMatrix:o,projectionMatrix:a,modelMatrix:(new ln.k).scale([20,20,20])}}),this.cube.draw(s),this.prismShaderInputs.setProps({app:{eyePosition:r,viewMatrix:o,projectionMatrix:a,modelMatrix:(new ln.k).rotateX(.01*i).rotateY(.013*i)}}),this.prism.draw(s),s.end()},n}(an);function vn(e,n,t){return e+t*(n-e)}function gn(e,n){for(var t=[],i=e;i<=n;i++)t.push(i);return t}function En(e,n){for(var t,i=e.length,r=0;i;)t=Math.floor(n()*i),r=e[i-=1],e[i]=e[t],e[t]=r;return e}mn.info="Uses a luma.gl <code>TextureCube</code> to simulate a reflective surface\n";var An=function(e){return e*e*e*(e*(6*e-15)+10)},Rn=function(e,n,t,i){var r=15&e,o=r<8?n:t,a=r<4?t:12==r||14==r?n:i;return(1&r?-o:o)+(2&r?-a:a)};var bn=m(),Tn={name:"app",uniformTypes:{mvpMatrix:"mat4x4<f32>",time:"f32"}},Cn=function(e){function n(n){var t,i=n.device;(t=e.call(this)||this).mvpMatrix=new ln.k,t.viewMat=(new ln.k).lookAt({eye:[1,1,1]}),t.shaderInputs=new De({app:Tn});var r=function(e){for(var n=1/e,t=new Float32Array(3*Math.pow(e,3)),i=0,r=-.5,o=0;o<e;++o){for(var a=-.5,s=0;s<e;++s){for(var l=-.5,u=0;u<e;++u)t[i++]=r,t[i++]=a,t[i++]=l,l+=n;a+=n}r+=n}return t}(128),o=i.createBuffer(r),a=function(e){for(var n=function(e){if("object"!=typeof e)throw new TypeError("params is not an object");if("function"!=typeof e.interpolation)throw new TypeError("params.interpolation is not a function");if(!Array.isArray(e.permutation))throw new TypeError("params.permutation is not an array");if(256!=e.permutation.length)throw new Error("params.permutation must have 256 items");for(var n=e.interpolation,t=e.permutation.slice(0),i=0;i<256;i++)t[256+i]=t[i];return function(e,i,r){var o=Math.floor(e),a=Math.floor(i),s=Math.floor(r),l=255&o,u=255&a,c=255&s;i-=a,r-=s;var f=An(e-=o),p=An(i),d=An(r),_=t[l]+u,h=t[_]+c,m=t[_+1]+c,v=t[l+1]+u,g=t[v]+c,E=t[v+1]+c;return n(n(n(Rn(t[h],e,i,r),Rn(t[g],e-1,i,r),f),n(Rn(t[m],e,i-1,r),Rn(t[E],e-1,i-1,r),f),p),n(n(Rn(t[h+1],e,i,r-1),Rn(t[g+1],e-1,i,r-1),f),n(Rn(t[m+1],e,i-1,r-1),Rn(t[E+1],e-1,i-1,r-1),f),p),d)}}({interpolation:vn,permutation:En(gn(0,255),bn)}),t=.07*e,i=new Uint8Array(Math.pow(e,3)),r=0,o=0;o<e;++o)for(var a=0;a<e;++a)for(var s=0;s<e;++s){var l=n(o/t,a/t,s/t);i[r++]=255*(.5+.5*l)}return i}(16);return t.texture3d=i.createTexture({dimension:"3d",width:16,height:16,depth:16,format:"r8unorm",sampler:{magFilter:"nearest",minFilter:"nearest",mipmapFilter:"none"}}),t.texture3d.copyImageData({data:a}),t.cloud=new ze(i,{source:"struct Uniforms {\n  mvpMatrix : mat4x4<f32>,\n  time : f32,\n};\n\n@binding(0) @group(0) var<uniform> app : Uniforms;\n@group(0) @binding(1) var uTexture : texture_3d<f32>;\n@group(0) @binding(2) var uTextureSampler : sampler;\n\nstruct VertexInputs {\n  // CUBE GEOMETRY\n  @location(0) positions : vec4<f32>,\n};\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUVW : vec3<f32>,\n}\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs : FragmentInputs;\n  outputs.Position = app.mvpMatrix * inputs.positions;\n  outputs.fragUVW = inputs.positions.xyz;\n  // outputs.fragPosition = 0.5 * (inputs.positions + vec4(1.0, 1.0, 1.0, 1.0));\n  return outputs;\n}\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  let sampleColor = textureSample(uTexture, uTextureSampler, inputs.fragUVW + vec3<f32>(0.0, 0.0, app.time));\n  let alpha = sampleColor.r * 0.1;\n  return vec4(fract(inputs.fragUVW) * alpha, alpha);\n}\n",vs:"#version 300 es\nin vec3 position;\n\nuniform appUniforms {\n  mat4 mvpMatrix;\n  float time;\n} app;\n\nout vec3 vUVW;\nvoid main() {\n  vUVW = position.xyz + 0.5;\n  gl_Position = app.mvpMatrix * vec4(position, 1.0);\n  gl_PointSize = 2.0;\n}",fs:"#version 300 es\nprecision highp float;\nprecision lowp sampler3D;\n\nuniform appUniforms {\n  mat4 mvpMatrix;\n  float time;\n} app;\n\nuniform sampler3D uTexture;\n\nin vec3 vUVW;\nout vec4 fragColor;\n\nvoid main() {\n  vec4 sampleColor = texture(uTexture, vUVW + vec3(0.0, 0.0, app.time));\n  float alpha = sampleColor.r * 0.1;\n  fragColor = vec4(fract(vUVW) * alpha, alpha);\n}",topology:"point-list",vertexCount:r.length/3,bufferLayout:[{name:"positions",format:"float32x3"}],attributes:{positions:o},bindings:{uTexture:t.texture3d},shaderInputs:t.shaderInputs,parameters:{depthWriteEnabled:!0,depthCompare:"less-equal",blend:!0,blendColorOperation:"add",blendAlphaOperation:"add",blendColorSrcFactor:"one",blendColorDstFactor:"one-minus-src",blendAlphaSrcFactor:"one",blendAlphaDstFactor:"one-minus-src-alpha"}}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.cloud.destroy()},t.onRender=function(e){var n=e.device,t=e.tick,i=e.aspect;this.mvpMatrix.perspective({fovy:(0,un.F2)(75),aspect:i,near:.1,far:10}).multiplyRight(this.viewMat),this.shaderInputs.setProps({app:{time:t/100,mvpMatrix:this.mvpMatrix}}),this.cloud.updateShaderInputs();var r=n.beginRenderPass({clearColor:[0,0,0,1],clearDepth:1});this.cloud.draw(r),r.end()},n}(an);Cn.info="  <p>\n  Volumetric 3D noise visualized using a <b>3D texture</b>.\n  <p>\n  Uses the luma.gl <code>Texture3D</code> class.\n  ",Cn.props={useDevicePixels:!0};var In=-1,Sn="precision highp float;\nprecision highp int;\n\nuniform pickingUniforms {\n  int isActive;\n  int indexMode;\n  int batchIndex;\n\n  int isHighlightActive;\n  int highlightedBatchIndex;\n  int highlightedObjectIndex;\n  vec4 highlightColor;\n} picking;\n";var xn={props:{},uniforms:{},name:"picking",uniformTypes:{isActive:"i32",indexMode:"i32",batchIndex:"i32",isHighlightActive:"i32",highlightedBatchIndex:"i32",highlightedObjectIndex:"i32",highlightColor:"vec4<f32>"},defaultUniforms:{isActive:!1,indexMode:0,batchIndex:0,isHighlightActive:!0,highlightedBatchIndex:In,highlightedObjectIndex:In,highlightColor:[0,1,1,1]},getUniforms:function(e,n){void 0===e&&(e={});var t=Object.assign({},n);switch(void 0!==e.isActive&&(t.isActive=Boolean(e.isActive)),e.indexMode){case"instance":t.indexMode=0;break;case"custom":t.indexMode=1}switch(e.highlightedObjectIndex){case void 0:break;case null:t.isHighlightActive=!1,t.highlightedObjectIndex=In;break;default:t.isHighlightActive=!0,t.highlightedObjectIndex=e.highlightedObjectIndex}return"number"==typeof e.highlightedBatchIndex&&(t.highlightedBatchIndex=e.highlightedBatchIndex),e.highlightColor&&(t.highlightColor=e.highlightColor),t}},Nn=Sn+"\n\nconst int INDEX_PICKING_MODE_INSTANCE = 0;\nconst int INDEX_PICKING_MODE_CUSTOM = 1;\n\nconst int INDEX_PICKING_INVALID_INDEX = "+"-1; // 2^32 - 1\n\nflat out int picking_objectIndex;\n\n/**\n * Vertex shaders should call this function to set the object index.\n * If using instance or vertex mode, argument will be ignored, 0 can be supplied.\n */\nvoid picking_setObjectIndex(int objectIndex) {\n  switch (picking.indexMode) {\n    case INDEX_PICKING_MODE_INSTANCE:\n      picking_objectIndex = gl_InstanceID;\n      break;\n    case INDEX_PICKING_MODE_CUSTOM:\n      picking_objectIndex = objectIndex;\n      break;\n  }\n}\n",Pn=Sn+"\n\nconst int INDEX_PICKING_INVALID_INDEX = "+"-1; // 2^32 - 1\n\nflat in int picking_objectIndex;\n\n/**\n * Check if this vertex is highlighted (part of the selected batch and object)\n */ \nbool picking_isFragmentHighlighted() {\n  return \n    bool(picking.isHighlightActive) &&\n    picking.highlightedBatchIndex == picking.batchIndex &&\n    picking.highlightedObjectIndex == picking_objectIndex\n    ;\n}\n\n/**\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  // If we are still picking, we don't highlight\n  if (bool(picking.isActive)) {\n    return color;\n  }\n\n  // If we are not highlighted, return color as is\n  if (!picking_isFragmentHighlighted()) {\n    return color;\n  }\n   \n  // Blend in highlight color based on its alpha value\n  float highLightAlpha = picking.highlightColor.a;\n  float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\n  float highLightRatio = highLightAlpha / blendedAlpha;\n\n  vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);\n  return vec4(blendedRGB, blendedAlpha);\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nivec4 picking_getPickingColor() {\n  // Assumes that colorAttachment0 is rg32int\n  // TODO? - we could render indices into a second color attachment and not mess with fragColor\n  return ivec4(picking_objectIndex, picking.batchIndex, 0u, 0u);  \n}\n\nvec4 picking_filterPickingColor(vec4 color) {\n  if (bool(picking.isActive)) {\n    if (picking_objectIndex == INDEX_PICKING_INVALID_INDEX) {\n      discard;\n    }\n  }\n  return color;\n}\n\n/*\n * Returns picking color if picking is enabled if not\n * highlight color if this item is selected, otherwise unmodified argument.\n */\nvec4 picking_filterColor(vec4 color) {\n  vec4 outColor = color;\n  outColor = picking_filterHighlightColor(outColor);\n  outColor = picking_filterPickingColor(outColor);\n  return outColor;\n}\n",Ln=Object.assign({},xn,{name:"picking",source:"struct pickingUniforms {\n  isActive: int32;\n  indexMode: int32;\n  batchIndex: int32;\n\n  isHighlightActive: int32;\n  highlightedBatchIndex: int32;\n  highlightedObjectIndex: int32;\n  highlightColor: vec4<f32>;\n} picking;\n\n\nconst INDEX_PICKING_MODE_INSTANCE = 0;\nconst INDEX_PICKING_MODE_CUSTOM = 1;\nconst INDEX_PICKING_INVALID_INDEX = -1; // 2^32 - 1\n\nstruct indexPickingFragmentInputs = {\n  objectIndex: int32;\n};\n\nlet indexPickingFragmentInputs: indexPickingFragmentInputs;\n\n/**\n * Vertex shaders should call this function to set the object index.\n * If using instance or vertex mode, argument will be ignored, 0 can be supplied.\n */\nfn picking_setObjectIndex(objectIndex: int32) {\n  switch (picking.indexMode) {\n    case INDEX_PICKING_MODE_INSTANCE, default: {\n      picking_objectIndex = instance_index;\n    };\n    case INDEX_PICKING_MODE_CUSTOM: {\n      picking_objectIndex = objectIndex;\n    };\n  }\n}\n\n",vs:Nn,fs:Pn}),On=function(){function e(n,t){this.pickInfo={batchIndex:null,objectIndex:null},this.framebuffer=null,this.device=n,this.props=Object.assign({},e.defaultProps,t)}var n=e.prototype;return n.destroy=function(){var e;null==(e=this.framebuffer)||e.destroy()},n.getFramebuffer=function(){return this.framebuffer||(this.framebuffer=this.device.createFramebuffer({colorAttachments:["rgba8unorm","rg32sint"],depthStencilAttachment:"depth24plus"})),this.framebuffer},n.clearPickState=function(){this.props.shaderInputs.setProps({picking:{highlightedObjectIndex:null}})},n.beginRenderPass=function(){var e,n=this.getFramebuffer();return n.resize(this.device.getDefaultCanvasContext().getDevicePixelSize()),null==(e=this.props.shaderInputs)||e.setProps({picking:{isActive:!0}}),this.device.beginRenderPass({framebuffer:n,clearColors:[new Float32Array([0,0,0,0]),new Int32Array([-1,-1,0,0])],clearDepth:1})},n.getPickInfo=function(e){var n,t=this.getFramebuffer(),i=this.getPickPosition(e),r=i[0],o=i[1],a=this.device.readPixelsToArrayWebGL(t,{sourceX:r,sourceY:o,sourceWidth:1,sourceHeight:1,sourceAttachment:1});if(!a)return null;var s={objectIndex:a[0]===In?null:a[0],batchIndex:a[1]===In?null:a[1]};return s.objectIndex===this.pickInfo.objectIndex&&s.batchIndex===this.pickInfo.batchIndex||(this.pickInfo=s,this.props.onObjectPicked(s)),null==(n=this.props.shaderInputs)||n.setProps({picking:{isActive:!1,highlightedBatchIndex:s.batchIndex,highlightedObjectIndex:s.objectIndex}}),this.pickInfo},n.getPickPosition=function(e){var n=this.device.getDefaultCanvasContext().cssToDevicePixels(e);return[n.x+Math.floor(n.width/2),n.y+Math.floor(n.height/2)]},e}();On.defaultProps={shaderInputs:void 0,onObjectPicked:function(){}};var yn=m(),Mn=256,Fn=function(e){function n(n,t){for(var i=[],r=0;r<Mn;r++)for(var o=3*r-382.5,a=0;a<Mn;a++){var s=3*a-382.5;i.push(o,s)}for(var l=new Float32Array(i),u=new Uint8Array(262144).map((function(e,n){return 255*(.75*yn()+.25)})),c=0;c<u.length;c+=4)u[c+3]=255;var f=new Int32Array(65536).fill(0).map((function(e,n){return n})),p=n.createBuffer(l),d=n.createBuffer(u),_=n.createBuffer(f);return e.call(this,n,Object.assign({},t,{source:"\n// APPLICATION\n\nstruct AppUniforms {\n  modelMatrix: mat4x4<f32>,\n  viewMatrix: mat4x4<f32>,\n  projectionMatrix: mat4x4<f32>,\n  time: f32,\n};\n\n@group(0) @binding(0) var<uniform> app : AppUniforms;\n\nstruct VertexInputs {\n  // CUBE GEOMETRY\n  @location(0) positions : vec4<f32>,\n  @location(1) normals : vec3<f32>,\n  // INSTANCED ATTRIBUTES\n  @location(2) instanceOffsets : vec2<f32>,\n  @location(3) instanceColors : vec4<f32>,\n  @location(4) instanceIndexes : vec2<f32>,\n}\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) normal : vec3<f32>,\n  @location(1) color : vec4<f32>,\n}\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs: FragmentInputs;\n\n  // Vertex position (z coordinate undulates with time), and model rotates around center\n  let delta = length(inputs.instanceOffsets);\n  let offset = vec4<f32>(inputs.instanceOffsets, sin((app.time + delta) * 0.1) * 16.0, 0);\n  outputs.Position = app.projectionMatrix * app.viewMatrix * (app.modelMatrix * inputs.positions + offset);\n\n  outputs.normal = dirlight_setNormal((app.modelMatrix * vec4<f32>(inputs.normals, 0.0)).xyz);\n  outputs.color = inputs.instanceColors;\n\n  // vec4 pickColor = vec4(0., instanceIndexes, 1.0);\n  // picking_setPickingColor(0);\n  \n  return outputs;\n}\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  var fragColor = inputs.color;\n  fragColor = dirlight_filterColor(fragColor, DirlightInputs(inputs.normal));\n  return fragColor;\n}\n",vs:"#version 300 es\nprecision highp float;\nprecision highp int;\n\nin vec3 positions;\nin vec3 normals;\n\nin vec2 instanceOffsets;\nin vec3 instanceColors;\nin int instanceIndexes;\n\nuniform appUniforms {\n  mat4 modelMatrix;\n  mat4 viewMatrix;\n  mat4 projectionMatrix;\n  float time;\n} app;\n\nout vec3 color;\n\nvoid main(void) {\n  color = instanceColors;\n\n  vec3 normal = vec3(app.modelMatrix * vec4(normals, 1.0));\n  dirlight_setNormal(normal);\n  picking_setObjectIndex(instanceIndexes);\n\n  // Vertex position (z coordinate undulates with time), and model rotates around center\n  float delta = length(instanceOffsets);\n  vec4 offset = vec4(instanceOffsets, sin((app.time + delta) * 0.1) * 16.0, 0);\n  gl_Position = app.projectionMatrix * app.viewMatrix * (app.modelMatrix * vec4(positions * 1., 1.0) + offset);\n}\n",fs:"#version 300 es\nprecision highp float;\nprecision highp int;\n\nin vec3 color;\nlayout(location=0) out vec4 fragColor;\nlayout(location=1) out ivec4 pickingColor;\n\nvoid main(void) {\n  pickingColor = picking_getPickingColor();\n\n  fragColor = vec4(color, 1.);\n  fragColor = dirlight_filterColor(fragColor);\n  fragColor = picking_filterColor(fragColor);\n}\n",modules:"webgpu"!==n.info.type?[sn,Ln]:[sn],instanceCount:65536,geometry:new qe({indices:!0}),bufferLayout:[{name:"instanceOffsets",format:"float32x2"},{name:"instanceColors",format:"unorm8x4"},{name:"instanceIndexes",format:"sint32"}],attributes:{instanceOffsets:p,instanceColors:d,instanceIndexes:_},parameters:{depthWriteEnabled:!0,depthCompare:"less-equal"}}))||this}return(0,a.A)(n,e),n}(ze),wn={name:"app",uniformTypes:{modelMatrix:"mat4x4<f32>",viewMatrix:"mat4x4<f32>",projectionMatrix:"mat4x4<f32>",time:"f32"}},Dn=function(e){function n(n){var t,i=n.device,r=n.animationLoop;return(t=e.call(this)||this).shaderInputs=new De({app:wn,dirlight:sn,picking:Ln}),t.timeline=new E,r.attachTimeline(t.timeline),t.timeline.play(),t.timelineChannels={timeChannel:t.timeline.addChannel({rate:.01}),eyeXChannel:t.timeline.addChannel({rate:3e-4}),eyeYChannel:t.timeline.addChannel({rate:4e-4}),eyeZChannel:t.timeline.addChannel({rate:2e-4})},t.cube=new Fn(i,{shaderInputs:t.shaderInputs}),t.picker=new On(i,{shaderInputs:t.shaderInputs}),t}(0,a.A)(n,e);var t=n.prototype;return t.onRender=function(e){var n=e.device,t=e.aspect,i=e.tick,r=e._mousePosition,o=this.timelineChannels,a=o.timeChannel,s=o.eyeXChannel,l=o.eyeYChannel,u=o.eyeZChannel;this.shaderInputs.setProps({app:{time:this.timeline.getTime(a),projectionMatrix:(new ln.k).perspective({fovy:(0,un.F2)(60),aspect:t,near:1,far:2048}),viewMatrix:(new ln.k).lookAt({center:[0,0,0],eye:[Math.cos(this.timeline.getTime(s))*Mn/2,Math.sin(this.timeline.getTime(l))*Mn/2,(Math.sin(this.timeline.getTime(u))+1)*Mn/4+32]}),modelMatrix:(new ln.k).rotateX(.01*i).rotateY(.013*i)}}),this.pickInstance(r);var c=n.beginRenderPass({clearColor:[0,0,0,1],clearDepth:1});this.cube.draw(c),c.end()},t.onFinalize=function(e){this.cube.destroy()},t.pickInstance=function(e){if("webgl"===this.picker.device.type)if(e){var n=this.picker.beginRenderPass();this.cube.draw(n),n.end(),this.picker.getPickInfo(e)}else this.picker.clearPickState()},n}(an);Dn.info="  <p>\n  A luma.gl <code>Cube</code>, rendering 65,536 instances in a\n  single GPU draw call using instanced vertex attributes.\n  </P>\n  ",Dn.props={createFramebuffer:!0,debug:!0};var Bn=[-1,-1,1,-1,-1,1,1,1],Un=function(e){function n(n,t){var i=Bn.map((function(e){return-1===e?0:e}));return t.source&&(t=Object.assign({},t,{source:"struct VertexInputs {\n  @location(0) clipSpacePosition: vec2<f32>,\n  @location(1) texCoord: vec2<f32>,\n  @location(2) coordinate: vec2<f32>  \n}\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) position : vec2<f32>,\n  @location(1) coordinate : vec2<f32>,\n  @location(2) uv : vec2<f32>\n};\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs: FragmentInputs;\n  outputs.Position = vec4(inputs.clipSpacePosition, 0., 1.);\n  outputs.position = inputs.clipSpacePosition;\n  outputs.coordinate = inputs.coordinate;\n  outputs.uv = inputs.texCoord;\n  return outputs;\n}\n\n"+t.source})),e.call(this,n,Object.assign({id:t.id||Re("clip-space")},t,{vs:"#version 300 es\nin vec2 clipSpacePositions;\nin vec2 texCoords;\nin vec2 coordinates;\n\nout vec2 position;\nout vec2 coordinate;\nout vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(clipSpacePositions, 0., 1.);\n  position = clipSpacePositions;\n  coordinate = coordinates;\n  uv = texCoords;\n}\n",vertexCount:4,geometry:new Ye({topology:"triangle-strip",vertexCount:4,attributes:{clipSpacePositions:{size:2,value:new Float32Array(Bn)},texCoords:{size:2,value:new Float32Array(i)},coordinates:{size:2,value:new Float32Array(i)}}})}))||this}return(0,a.A)(n,e),n}(ze),Gn=function(e){function n(n,t){var i;if(i=e.call(this,n,{id:t.id||"background-texture-model",source:"@group(0) @binding(0) var backgroundTexture: texture_2d<f32>;\n@group(0) @binding(1) var backgroundTextureSampler: sampler;\n\nfn billboardTexture_getTextureUV(coordinates: vec2<f32>) -> vec2<f32> {\n\tlet iTexSize: vec2<u32> = textureDimensions(backgroundTexture, 0);\n\tlet texSize: vec2<f32> = vec2<f32>(f32(iTexSize.x), f32(iTexSize.y));\n\tvar position: vec2<f32> = coordinates.xy / texSize;\n\treturn position;\n} \n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n\tlet position: vec2<f32> = billboardTexture_getTextureUV(inputs.coordinate);\n\treturn textureSample(backgroundTexture, backgroundTextureSampler, position);\n}\n",fs:"#version 300 es\nprecision highp float;\n\nuniform sampler2D backgroundTexture;\nout vec4 fragColor;\n\nvec2 billboardTexture_getTextureUV() {\n  ivec2 iTexSize = textureSize(backgroundTexture, 0);\n  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));\n  vec2 position = gl_FragCoord.xy / texSize;\n  return position;\n}\n\nvoid main(void) {\n  vec2 position = billboardTexture_getTextureUV();\n  fragColor = texture(backgroundTexture, position);\n}\n",parameters:Object.assign({depthWriteEnabled:!1},t.blend?{blend:!0,blendColorOperation:"add",blendAlphaOperation:"add",blendColorSrcFactor:"one",blendColorDstFactor:"one-minus-src",blendAlphaSrcFactor:"one",blendAlphaDstFactor:"one-minus-src-alpha"}:{})})||this,!t.backgroundTexture)throw new Error("BackgroundTextureModel requires a backgroundTexture prop");return i.setTexture(t.backgroundTexture),i}(0,a.A)(n,e);var t=n.prototype;return t.setTexture=function(e){this.setBindings({backgroundTexture:e})},t.predraw=function(){this.shaderInputs.setProps({}),e.prototype.predraw.call(this)},n}(Un),Hn=function(e){function n(n){void 0===n&&(n={});var t=n.id,i=void 0===t?Re("sphere-geometry"):t,r=function(e){for(var n=e.nlat,t=void 0===n?10:n,i=e.nlong,r=void 0===i?10:i,o=0,a=Math.PI-o,s=0,l=2*Math.PI-s,u=(t+1)*(r+1),c=function(n,t,i,r,o){return e.radius||1},f=new Float32Array(3*u),p=new Float32Array(3*u),d=new Float32Array(2*u),_=new(u>65535?Uint32Array:Uint16Array)(t*r*6),h=0;h<=t;h++)for(var m=0;m<=r;m++){var v=m/r,g=h/t,E=m+h*(r+1),A=2*E,R=3*E,b=l*v,T=a*g,C=Math.sin(b),I=Math.cos(b),S=Math.sin(T),x=I*S,N=Math.cos(T),P=C*S,L=c(x,N,P,v,g);f[R+0]=L*x,f[R+1]=L*N,f[R+2]=L*P,p[R+0]=x,p[R+1]=N,p[R+2]=P,d[A+0]=v,d[A+1]=1-g}for(var O=r+1,y=0;y<r;y++)for(var M=0;M<t;M++){var F=6*(y*t+M);_[F+0]=M*O+y,_[F+1]=M*O+y+1,_[F+2]=(M+1)*O+y,_[F+3]=(M+1)*O+y,_[F+4]=M*O+y+1,_[F+5]=(M+1)*O+y+1}return{indices:{size:1,value:_},attributes:{POSITION:{size:3,value:f},NORMAL:{size:3,value:p},TEXCOORD_0:{size:2,value:d}}}}(n),o=r.indices,a=r.attributes;return e.call(this,Object.assign({},n,{id:i,topology:"triangle-list",indices:o,attributes:Object.assign({},a,n.attributes)}))||this}return(0,a.A)(n,e),n}(Ye);var kn=t(7597),Vn={uniformTypes:{color:"vec3<f32>",lighting:"f32",modelViewMatrix:"mat4x4<f32>",projectionMatrix:"mat4x3<f32>"}},Xn="#version 300 es\n\nstruct VertexInputs {\n  positions: vec3<f32>;\n  normals: vec3<f32>;\n}\n\nstruct FragmentInputs {\n  @builtin(position) position: vec4<f32>;\n  normal: vec3<f32>;\n}\n\nuniform sphereUniforms {\n  // fragment shader\n  color: vec3<f32>;\n  lighting: bool;\n  // vertex shader\n  modelViewMatrix: mat4<f32>;\n  projectionMatrix: mat4<f32>;\n} sphere;\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  const outputs: VertexOutputs;\n  gl_Position = sphere.projectionMatrix * sphere.modelViewMatrix * vec4(inputs.positions, 1.0);\n  outputs.normal = vec3((sphere.modelViewMatrix * vec4(inputs.normals, 0.0)));\n  return outputs;\n}\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  let attenuation = 1.0;\n  if (sphere.lighting) {\n    light = normalize(vec3(1,1,2));\n    attenuation = dot(normal, light);\n  }\n  return vec4(sphere.color * attenuation, 1);\n}\n",jn="#version 300 es\n\nin vec3 positions;\nin vec3 normals;\n\nuniform sphereUniforms {\n  // fragment shader\n  vec3 color;\n  bool lighting;\n  // vertex shader\n  mat4 modelViewMatrix;\n  mat4 projectionMatrix;\n} sphere;\n\nout vec3 normal;\n\nvoid main(void) {\n  gl_Position = sphere.projectionMatrix * sphere.modelViewMatrix * vec4(positions, 1.0);\n  normal = vec3((sphere.modelViewMatrix * vec4(normals, 0.0)));\n}\n",Wn="#version 300 es\n\nprecision highp float;\n\nuniform sphereUniforms {\n  // fragment\n  vec3 color;\n  bool lighting;\n  // vertex\n  mat4 modelViewMatrix;\n  mat4 projectionMatrix;\n} sphere;\n\nin vec3 normal;\nout vec4 fragColor;\n\nvoid main(void) {\n  float attenuation = 1.0;\n  if (sphere.lighting) {\n    vec3 light = normalize(vec3(1,1,2));\n    attenuation = dot(normal, light);\n  }\n  fragColor = vec4(sphere.color * attenuation, 1);\n}\n",zn={uniformTypes:{resolution:"vec2<f32>"}},Kn="fn getQuadVertex(vertexIndex : u32) -> vec2f {\n  // SCREEN QUAD\n  let positions = array(\n    // 1st triangle\n    vec2f( 0.0,  0.0),  // center\n    vec2f( 1.0,  0.0),  // right, center\n    vec2f( 0.0,  1.0),  // center, top\n    // 2st triangle\n    vec2f( 0.0,  1.0),  // center, top\n    vec2f( 1.0,  0.0),  // right, center\n    vec2f( 1.0,  1.0),  // right, top\n  );\n  return positions[vertexIndex];\n}\n",Yn="\n"+Kn+"\n\nstruct FragmentInputs {\n  @builtin(position) position: vec4f,\n  @location(0) texcoord: vec2f,\n};\n\n@vertex fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> FragmentInputs {\n  var outputs: FragmentInputs;\n  let xy = getQuadVertex(vertexIndex);\n  outputs.position = vec4f(xy, 0.0, 1.0);\n  outputs.texcoord = xy;\n  return outputs;\n}\n\n@group(0) @binding(0) var texture : texture_2d<f32>;\n@group(0) @binding(1) var sampler : sampler;\n\n@fragment fn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4f {\n  return textureSample(texture, sampler, inputs.texcoord);\n}\n",qn="#version 300 es\n\nin vec2 aPosition;\n\nvoid main(void) {\n  gl_Position = vec4(aPosition, 0, 1);\n}\n",Zn={uniformTypes:{resolution:"vec2<f32>"}},Qn="\n"+Kn+"\n\nstruct FragmentInputs {\n  @builtin(position) position: vec4f,\n  @location(0) texcoord: vec2f,\n};\n\n@vertex fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> FragmentInputs {\n  var outputs: FragmentInputs;\n  let xy = getQuadVertex(vertexIndex);\n  outputs.position = vec4f(xy, 0.0, 1.0);\n  outputs.texcoord = xy;\n  return outputs;\n}\n\n@group(0) @binding(0) var sceneTexture : texture_2d<f32>;\n@group(0) @binding(1) var persistenceTexture : texture_2d<f32>;\n@group(0) @binding(2) var sampler : sampler;\n\n@fragment \nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4f {\n  let sceneColor = textureSample(sceneTexture, sampler, inputs.texcoord);\n  let persistenceColor = textureSample(persistenceTexture, sampler, inputs.texcoord);\n  return mix(sceneColor * 4.0, persistenceColor, 0.9);\n}\n",Jn=m(),$n=[],et=[],nt=[],tt=function(e){function n(n){var t,i=n.device,r=n.width,o=n.height;(t=e.call(this)||this).uniformStore=new h({sphere:Vn,screenQuad:zn,persistenceQuad:Zn}),t.backgroundTextureModel=new Gn(i,{backgroundTexture:new Xe(i,{data:(0,Ge.Dt)("background.png")}),blend:!0}),t.electron=new ze(i,{id:"electron",source:Xn,vs:jn,fs:Wn,geometry:new Hn({nlat:20,nlong:30}),bindings:{sphere:t.uniformStore.getManagedUniformBuffer(i,"sphere")},parameters:{depthWriteEnabled:!0,depthCompare:"less",cullMode:"back"}}),t.nucleon=new ze(i,{id:"nucleon",source:Xn,vs:jn,fs:Wn,geometry:new Hn({nlat:20,nlong:30}),parameters:{depthWriteEnabled:!0,depthCompare:"less-equal",cullMode:"back"},bindings:{sphere:t.uniformStore.getManagedUniformBuffer(i,"sphere")}}),t.mainFramebuffer=i.createFramebuffer({width:r,height:o,colorAttachments:["rgba8unorm"],depthStencilAttachment:"depth24plus"}),t.pingpongFramebuffers=[i.createFramebuffer({width:r,height:o,colorAttachments:["rgba8unorm"],depthStencilAttachment:"depth24plus"}),i.createFramebuffer({width:r,height:o,colorAttachments:["rgba8unorm"],depthStencilAttachment:"depth24plus"})];var a=new Ye({topology:"triangle-list",attributes:{aPosition:{value:new Float32Array([-1,-1,1,-1,1,1,-1,-1,1,1,-1,1]),size:2}},vertexCount:6});t.screenQuad=new ze(i,{id:"quad",source:Yn,vs:qn,fs:"#version 300 es\n\nprecision highp float;\n\nuniform sampler2D uTexture;\n\nuniform screenQuadUniforms {\n  vec2 resolution;\n} screenQuad;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  vec2 p = gl_FragCoord.xy/screenQuad.resolution.xy;\n  fragColor = texture(uTexture, p);\n}\n",geometry:a,bindings:{screenQuad:t.uniformStore.getManagedUniformBuffer(i,"screenQuad")},parameters:{depthWriteEnabled:!0,depthCompare:"less-equal",cullMode:"back"}}),t.persistenceQuad=new ze(i,{id:"persistence-quad",source:Qn,vs:qn,fs:"#version 300 es\n\nprecision highp float;\n\nuniform sampler2D uScene;\nuniform sampler2D uPersistence;\n\nuniform persistenceQuadUniforms {\n  vec2 resolution;\n} persistence;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  vec2 p = gl_FragCoord.xy / persistence.resolution.xy;\n  vec4 cS = texture(uScene, p);\n  vec4 cP = texture(uPersistence, p);\n  fragColor = mix(cS*4.0, cP, 0.9);\n}\n",geometry:a,bindings:{persistenceQuad:t.uniformStore.getManagedUniformBuffer(i,"persistenceQuad")},parameters:{depthWriteEnabled:!0,depthCompare:"less-equal",cullMode:"back"}});for(var s=0;s<64;s++){var l=new kn.P(Jn()-.5,Jn()-.5,Jn()-.5),u=Jn()+1;l.normalize().scale(u);l.scale(1.25),$n.push(l);var c=new kn.P(Jn()-.5,Jn()-.5,Jn()-.5),f=l.clone().cross(c).normalize(),p=4/u*.0125,d=(new ln.k).rotateAxis(p,f);et.push(d)}for(var _=0;_<64;_++){var m=new kn.P(Jn()-.5,Jn()-.5,Jn()-.5);m=m.normalize().scale(.5),nt.push(m)}return t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(e){this.electron.destroy(),this.nucleon.destroy(),this.mainFramebuffer.destroy(),this.pingpongFramebuffers[0].destroy(),this.pingpongFramebuffers[1].destroy(),this.screenQuad.destroy(),this.persistenceQuad.destroy()},t.onRender=function(e){var n=e.device,t=e.tick,i=e.width,r=e.height,o=e.aspect;this.mainFramebuffer.resize({width:i,height:r}),this.pingpongFramebuffers[0].resize({width:i,height:r}),this.pingpongFramebuffers[1].resize({width:i,height:r});var a=(new ln.k).perspective({fovy:(0,un.F2)(75),aspect:o}),s=(new ln.k).lookAt({eye:[0,0,4]}),l=n.beginRenderPass({framebuffer:this.mainFramebuffer,clearColor:[0,0,0,0],clearDepth:!0});this.uniformStore.setUniforms({sphere:{color:[0,.5,1],lighting:!1}});for(var u=0;u<64;u++){$n[u]=et[u].transformVector($n[u]);var c=(new ln.k).translate($n[u]).scale([.06125,.06125,.06125]);this.uniformStore.setUniforms({sphere:{modelViewMatrix:s.clone().multiplyRight(c),projectionMatrix:a}}),this.uniformStore.updateUniformBuffers(),this.electron.draw(l)}this.uniformStore.setUniforms({sphere:{color:[1,.25,.25],lighting:!0}});for(var f=0;f<64;f++){var p=(new ln.k).rotateXYZ([.013*t,0,0]).rotateXYZ([0,.021*t,0]).translate(nt[f]),d=[p[12],p[13],p[14]];p.identity().translate(d).scale([.25,.25,.25]),this.uniformStore.setUniforms({sphere:{modelViewMatrix:s.clone().multiplyRight(p),projectionMatrix:a}}),this.uniformStore.updateUniformBuffers(),this.nucleon.draw(l)}l.end();var _=t%2,h=this.pingpongFramebuffers[_],m=this.pingpongFramebuffers[1-_],v=n.beginRenderPass({framebuffer:h,clearColor:[0,0,0,0]});this.persistenceQuad.setBindings({uScene:this.mainFramebuffer.colorAttachments[0],uPersistence:m.colorAttachments[0]}),this.uniformStore.setUniforms({persistenceQuad:{resolution:[i,r]}}),this.uniformStore.updateUniformBuffers(),this.persistenceQuad.draw(v),v.end();var g=n.beginRenderPass({clearColor:[0,0,0,1]});this.screenQuad.setBindings({uTexture:h.colorAttachments[0]}),this.uniformStore.setUniforms({screenQuad:{resolution:[i,r]}}),this.uniformStore.updateUniformBuffers(),this.screenQuad.draw(g),this.backgroundTextureModel.draw(g),g.end()},n}(an);tt.info="\n<p>\n  Electron trails renderings persist across multiple frames.\n<p>\n  Uses multiple luma.gl <code>Framebuffer</code>s to hold previously rendered data between frames.\n</p>\n";var it=function(){function e(e){this.current=e.current,this.next=e.next}var n=e.prototype;return n.destroy=function(){var e,n;null==(e=this.current)||e.destroy(),null==(n=this.next)||n.destroy()},n.swap=function(){var e=this.current;this.current=this.next,this.next=e},e}(),rt=function(e){function n(n,t){var i,r,o=null==(i=(t=Object.assign({},t)).colorAttachments)?void 0:i.map((function(e){return"string"!=typeof e?e:n.createTexture({format:e,usage:C.g.SAMPLE|C.g.RENDER|C.g.COPY_SRC|C.g.COPY_DST,width:1,height:1})})),a=n.createFramebuffer(Object.assign({},t,{colorAttachments:o}));o=null==(r=t.colorAttachments)?void 0:r.map((function(e){return"string"!=typeof e?e:n.createTexture({format:e,usage:C.g.TEXTURE|C.g.COPY_SRC|C.g.COPY_DST|C.g.RENDER_ATTACHMENT,width:1,height:1})}));var s=n.createFramebuffer(Object.assign({},t,{colorAttachments:o}));return e.call(this,{current:a,next:s})||this}return(0,a.A)(n,e),n.prototype.resize=function(e){if(e.width===this.current.width&&e.height===this.current.height)return!1;var n=this.current,t=this.next;return this.current=n.clone(e),n.destroy(),this.next=t.clone(e),t.destroy(),!0},n}(it);var ot=function(){function e(e,n){this.device=e,n.shaderPasses.map((function(e){return W(e)}));var t=n.shaderPasses.reduce((function(e,n){var t;return Object.assign({},e,((t={})[n.name]=n,t))}),{});this.shaderInputs=n.shaderInputs||new De(t);var i=e.getCanvasContext().getDrawingBufferSize();this.swapFramebuffers=new rt(e,{colorAttachments:[e.preferredColorFormat],width:i[0],height:i[1]}),this.textureModel=new Gn(e,{backgroundTexture:this.swapFramebuffers.current.colorAttachments[0].texture}),this.clipSpace=new Un(e,{source:"  @group(0) @binding(0) var sourceTexture: texture_2d<f32>;\n  @group(0) @binding(1) var sourceTextureSampler: sampler;\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n\tlet texCoord: vec2<f32> = inputs.coordinate;\n\treturn textureSample(sourceTexture, sourceTextureSampler, texCoord);\n}\n",fs:"#version 300 es\n\nuniform sampler2D sourceTexture;\nin vec2 uv;\nin vec2 coordinate;\nout vec4 fragColor;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n  fragColor = texture(sourceTexture, coordinate);\n}\n"}),this.passRenderers=n.shaderPasses.map((function(n){return new at(e,n)}))}var n=e.prototype;return n.destroy=function(){for(var e,n=(0,o.A)(this.passRenderers);!(e=n()).done;){e.value.destroy()}this.swapFramebuffers.destroy(),this.clipSpace.destroy()},n.resize=function(e,n){this.swapFramebuffers.resize({width:e,height:n})},n.renderToScreen=function(e){var n=this.renderToTexture(e);if(!n)return!1;var t=this.device.getDefaultCanvasContext().getCurrentFramebuffer({depthStencilAttachment:!1}),i=this.device.beginRenderPass({id:"shader-pass-renderer-to-screen",framebuffer:t,clearColor:[0,0,0,1],clearDepth:1});return this.clipSpace.setBindings({sourceTexture:n}),this.clipSpace.draw(i),i.end(),!0},n.renderToTexture=function(e){var n=e.sourceTexture;if(!n.isReady)return null;this.textureModel.destroy(),this.textureModel=new Gn(this.device,{backgroundTexture:n});var t=this.device.beginRenderPass({id:"shader-pass-renderer-clear-texture",framebuffer:this.swapFramebuffers.current,clearColor:[0,0,0,1]});this.textureModel.draw(t),t.end();for(var i,r=!0,a=(0,o.A)(this.passRenderers);!(i=a()).done;)for(var s,l=i.value,u=(0,o.A)(l.subPassRenderers);!(s=u()).done;){var c=s.value;r||this.swapFramebuffers.swap(),r=!1;var f={sourceTexture:this.swapFramebuffers.current.colorAttachments[0].texture},p=this.device.beginRenderPass({id:"shader-pass-renderer-run-pass",framebuffer:this.swapFramebuffers.next,clearColor:[0,0,0,1],clearDepth:1});c.render({renderPass:p,bindings:f}),p.end()}return this.swapFramebuffers.swap(),this.swapFramebuffers.current.colorAttachments[0].texture},e}(),at=function(){function e(e,n,t){void 0===t&&(t={}),this.shaderPass=n;var i=n.passes||[];this.subPassRenderers=i.map((function(t){return new st(e,n,t)}))}return e.prototype.destroy=function(){for(var e,n=(0,o.A)(this.subPassRenderers);!(e=n()).done;){e.value.destroy()}},e}(),st=function(){function e(e,n,t){this.shaderPass=n,this.subPass=t;var i=function(e){var n=e.shaderPass,t=e.action,i=e.shadingLanguage;switch(t){case"filter":var r=n.name+"_filterColor_ext";return"wgsl"===i?"// Binding 0:1 is reserved for shader passes\n// @group(0) @binding(0) var<uniform> brightnessContrast : brightnessContrastUniforms;\n@group(0) @binding(1) var texture: texture_2d<f32>;\n@group(0) @binding(2) var sampler: sampler;\n\nstruct FragmentInputs {\n  @location(0) fragUV: vec2f,\n  @location(1) fragPosition: vec4f,\n  @location(2) fragCoordinate: vec4f\n};\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4f {\n  let texSize = textureDimensions(texture, 0);\n  var fragColor = textureSample(texture, sampler, fragUV);\n  fragColor = "+r+"(gl_FragColor, texSize, texCoord);\n  return fragColor;\n}\n":"#version 300 es\n\nuniform sampler2D sourceTexture;\n\nin vec2 position;\nin vec2 coordinate;\nin vec2 uv;\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n  ivec2 iTexSize = textureSize(sourceTexture, 0);\n  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));\n\n  fragColor = texture(sourceTexture, texCoord);\n  fragColor = "+r+"(fragColor, texSize, texCoord);\n}\n";case"sample":var o=n.name+"_sampleColor";return"wgsl"===i?function(e){return"// Binding 0:1 is reserved for shader passes\n@group(0) @binding(0) var<uniform> brightnessContrast : brightnessContrastUniforms;\n@group(0) @binding(1) var texture: texture_2d<f32>;\n@group(0) @binding(2) var sampler: sampler;\n\nstruct FragmentInputs = {\n  @location(0) fragUV: vec2f,\n  @location(1) fragPosition: vec4f,\n  @location(2) fragCoordinate: vec4f\n};\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4f {\n  let texSize = textureDimensions(texture, 0);\n  var fragColor = textureSample(texture, sampler, fragUV);\n  fragColor = "+e+"(gl_FragColor, texSize, texCoord);\n  return fragColor;\n}\n"}(o):function(e){return"#version 300 es\n\nuniform sampler2D sourceTexture;\n\nin vec2 position;\nin vec2 coordinate;\nin vec2 uv;\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n  ivec2 iTexSize = textureSize(sourceTexture, 0);\n  vec2 texSize = vec2(float(iTexSize.x), float(iTexSize.y));\n\n  fragColor = "+e+"(sourceTexture, texSize, texCoord);\n}\n"}(o);default:throw new Error(n.name+" no fragment shader generated for shader pass")}}({shaderPass:n,action:t.action||t.filter&&"filter"||t.sampler&&"sample"||"filter",shadingLanguage:e.info.shadingLanguage});this.model=new Un(e,{id:n.name+"-subpass",source:i,fs:i,modules:[n],parameters:{depthWriteEnabled:!1}})}var n=e.prototype;return n.destroy=function(){this.model.destroy()},n.render=function(e){var n,t,i=e.renderPass,r=e.bindings;this.model.shaderInputs.setProps(((n={})[this.shaderPass.name]=this.shaderPass.uniforms||{},n)),this.model.shaderInputs.setProps(((t={})[this.shaderPass.name]=this.subPass.uniforms||{},t)),this.model.setBindings(r||{}),this.model.draw(i)},e}(),lt="#version 300 es\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}";function ut(e,n){n=Array.isArray(n)?n:[n];var t=e.replace(/^\s+/,"").split(/\s+/),i=t[0],r=t[1],o=t[2];return n.includes(i)&&r&&o?{qualifier:i,type:r,name:o.split(";")[0]}:null}function ct(e){var n=e||{},t=n.input,i=n.inputChannels,r=n.output;if(!t)return lt;if(!i)throw new Error("inputChannels");return"#version 300 es\nin "+function(e){switch(e){case 1:return"float";case 2:return"vec2";case 3:return"vec3";case 4:return"vec4";default:throw new Error("invalid channels: "+e)}}(i)+" "+t+";\nout vec4 "+r+";\nvoid main() {\n  "+r+" = "+dt(t,i)+";\n}"}function ft(e){switch(e){case"float":return"x";case"vec2":return"xy";case"vec3":return"xyz";case"vec4":return"xyzw";default:throw new Error(e)}}function pt(e){switch(e){case"float":return 1;case"vec2":return 2;case"vec3":return 3;case"vec4":return 4;default:throw new Error(e)}}function dt(e,n){switch(n){case 1:return"vec4("+e+", 0.0, 0.0, 1.0)";case 2:return"vec4("+e+", 0.0, 1.0)";case 3:return"vec4("+e+", 1.0)";case 4:return e;default:throw new Error("invalid channels: "+n)}}function _t(e){return"string"==typeof e?e.charAt(0).toUpperCase()+e.slice(1):e}function ht(e,n){return function(e,n){var t=[];switch(n.uniforms){case"scoped-interface-blocks":case"unscoped-interface-blocks":t.push("uniform "+_t(e.name)+" {")}for(var i=0,r=Object.entries(e.uniformTypes||{});i<r.length;i++){var o=r[i],a=o[0],s=mt(o[1]);switch(n.uniforms){case"scoped-interface-blocks":t.push("  "+s+" "+a+";");break;case"unscoped-interface-blocks":t.push("  "+s+" "+e.name+"_"+a+";");break;case"uniforms":t.push("uniform "+s+" "+e.name+"_"+a+";")}}switch(n.uniforms){case"scoped-interface-blocks":t.push("} "+e.name+";");break;case"unscoped-interface-blocks":t.push("};")}return t.push(""),t.join("\n")}(e,n)}function mt(e){return{f32:"float",i32:"int",u32:"uint","vec2<f32>":"vec2","vec3<f32>":"vec3","vec4<f32>":"vec4","vec2<i32>":"ivec2","vec3<i32>":"ivec3","vec4<i32>":"ivec4","vec2<u32>":"uvec2","vec3<u32>":"uvec3","vec4<u32>":"uvec4","mat2x2<f32>":"mat2","mat2x3<f32>":"mat2x3","mat2x4<f32>":"mat2x4","mat3x2<f32>":"mat3x2","mat3x3<f32>":"mat3","mat3x4<f32>":"mat3x4","mat4x2<f32>":"mat4x2","mat4x3<f32>":"mat4x3","mat4x4<f32>":"mat4"}[e]}function vt(e,n){return function(e,n){var t=[];t.push("struct "+_t(e.name)+" {");for(var i=0,r=Object.entries((null==e?void 0:e.uniformTypes)||{});i<r.length;i++){var o=r[i],a=o[0],s=o[1];t.push("  "+a+" : "+s+";")}return t.push("};"),t.push("var<uniform> "+e.name+" : "+_t(e.name)+";"),t.join("\n")}(e)}function gt(e,n){switch(n.shaderLanguage){case"glsl":return ht(e,n);case"wgsl":return vt(e)}}var Et=null,At=new ArrayBuffer(4),Rt=new Float32Array(At),bt=new Uint32Array(At);function Tt(e){Et||(Et=It()),e=(0,un.qE)(e,-65504,65504),Rt[0]=e;var n=bt[0],t=n>>23&511;return Et.baseTable[t]+((8388607&n)>>Et.shiftTable[t])}function Ct(e){Et||(Et=It());var n=e>>10;return bt[0]=Et.mantissaTable[Et.offsetTable[n]+(1023&e)]+Et.exponentTable[n],Rt[0]}function It(){for(var e=new Uint32Array(512),n=new Uint32Array(512),t=0;t<256;++t){var i=t-127;i<-27?(e[t]=0,e[256|t]=32768,n[t]=24,n[256|t]=24):i<-14?(e[t]=1024>>-i-14,e[256|t]=1024>>-i-14|32768,n[t]=-i-1,n[256|t]=-i-1):i<=15?(e[t]=i+15<<10,e[256|t]=i+15<<10|32768,n[t]=13,n[256|t]=13):i<128?(e[t]=31744,e[256|t]=64512,n[t]=24,n[256|t]=24):(e[t]=31744,e[256|t]=64512,n[t]=13,n[256|t]=13)}for(var r=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64),s=1;s<1024;++s){for(var l=s<<13,u=0;0==(8388608&l);)l<<=1,u-=8388608;l&=-8388609,u+=947912704,r[s]=l|u}for(var c=1024;c<2048;++c)r[c]=939524096+(c-1024<<13);for(var f=1;f<31;++f)o[f]=f<<23;o[31]=1199570944,o[32]=2147483648;for(var p=33;p<63;++p)o[p]=2147483648+(p-32<<23);o[63]=3347054592;for(var d=1;d<64;++d)32!==d&&(a[d]=1024);return{baseTable:e,shiftTable:n,mantissaTable:r,exponentTable:o,offsetTable:a}}function St(e,n,t){void 0===n&&(n=[]),void 0===t&&(t=0);var i=Math.fround(e),r=e-i;return n[t]=i,n[t+1]=r,n}function xt(e){return e-Math.fround(e)}function Nt(e){for(var n=new Float32Array(32),t=0;t<4;++t)for(var i=0;i<4;++i){var r=4*t+i;St(e[4*i+t],n,2*r)}return n}var Pt={name:"random",source:"fn random(scale: vec3f, seed: float) -> f32 {\n  /* use the fragment position for a different seed per-pixel */\n  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n}\n",fs:"float random(vec3 scale, float seed) {\n  /* use the fragment position for a different seed per-pixel */\n  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n}\n"},Lt={name:"fp32",vs:"#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\n\n// All these functions are for substituting tan() function from Intel GPU only\nconst float TWO_PI = 6.2831854820251465;\nconst float PI_2 = 1.5707963705062866;\nconst float PI_16 = 0.1963495463132858;\n\nconst float SIN_TABLE_0 = 0.19509032368659973;\nconst float SIN_TABLE_1 = 0.3826834261417389;\nconst float SIN_TABLE_2 = 0.5555702447891235;\nconst float SIN_TABLE_3 = 0.7071067690849304;\n\nconst float COS_TABLE_0 = 0.9807852506637573;\nconst float COS_TABLE_1 = 0.9238795042037964;\nconst float COS_TABLE_2 = 0.8314695954322815;\nconst float COS_TABLE_3 = 0.7071067690849304;\n\nconst float INVERSE_FACTORIAL_3 = 1.666666716337204e-01; // 1/3!\nconst float INVERSE_FACTORIAL_5 = 8.333333767950535e-03; // 1/5!\nconst float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04; // 1/7!\nconst float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06; // 1/9!\n\nfloat sin_taylor_fp32(float a) {\n  float r, s, t, x;\n\n  if (a == 0.0) {\n    return 0.0;\n  }\n\n  x = -a * a;\n  s = a;\n  r = a;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_3;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_5;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_7;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_9;\n  s = s + t;\n\n  return s;\n}\n\nvoid sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {\n  if (a == 0.0) {\n    sin_t = 0.0;\n    cos_t = 1.0;\n  }\n  sin_t = sin_taylor_fp32(a);\n  cos_t = sqrt(1.0 - sin_t * sin_t);\n}\n\nfloat tan_taylor_fp32(float a) {\n    float sin_a;\n    float cos_a;\n\n    if (a == 0.0) {\n        return 0.0;\n    }\n\n    // 2pi range reduction\n    float z = floor(a / TWO_PI);\n    float r = a - TWO_PI * z;\n\n    float t;\n    float q = floor(r / PI_2 + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return 1.0 / 0.0;\n    }\n\n    t = r - PI_2 * q;\n\n    q = floor(t / PI_16 + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return 1.0 / 0.0;\n    } else {\n        t = t - PI_16 * q;\n    }\n\n    float u = 0.0;\n    float v = 0.0;\n\n    float sin_t, cos_t;\n    float s, c;\n    sincos_taylor_fp32(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0;\n            v = SIN_TABLE_0;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1;\n            v = SIN_TABLE_1;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2;\n            v = SIN_TABLE_2;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3;\n            v = SIN_TABLE_3;\n        }\n        if (k > 0) {\n            s = u * sin_t + v * cos_t;\n            c = u * cos_t - v * sin_t;\n        } else {\n            s = u * sin_t - v * cos_t;\n            c = u * cos_t + v * sin_t;\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return sin_a / cos_a;\n}\n#endif\n\nfloat tan_fp32(float a) {\n#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\n  return tan_taylor_fp32(a);\n#else\n  return tan(a);\n#endif\n}\n"},Ot={name:"fp64arithmetic",vs:"\nuniform fp64arithmeticUniforms {\n  uniform float ONE;\n} fp64;\n\n/*\nAbout LUMA_FP64_CODE_ELIMINATION_WORKAROUND\n\nThe purpose of this workaround is to prevent shader compilers from\noptimizing away necessary arithmetic operations by swapping their sequences\nor transform the equation to some 'equivalent' form.\n\nThe method is to multiply an artifical variable, ONE, which will be known to\nthe compiler to be 1 only at runtime. The whole expression is then represented\nas a polynomial with respective to ONE. In the coefficients of all terms, only one a\nand one b should appear\n\nerr = (a + b) * ONE^6 - a * ONE^5 - (a + b) * ONE^4 + a * ONE^3 - b - (a + b) * ONE^2 + a * ONE\n*/\n\n// Divide float number to high and low floats to extend fraction bits\nvec2 split(float a) {\n  const float SPLIT = 4097.0;\n  float t = a * SPLIT;\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float a_hi = t * fp64.ONE - (t - a);\n  float a_lo = a * fp64.ONE - a_hi;\n#else\n  float a_hi = t - (t - a);\n  float a_lo = a - a_hi;\n#endif\n  return vec2(a_hi, a_lo);\n}\n\n// Divide float number again when high float uses too many fraction bits\nvec2 split2(vec2 a) {\n  vec2 b = split(a.x);\n  b.y += a.y;\n  return b;\n}\n\n// Special sum operation when a > b\nvec2 quickTwoSum(float a, float b) {\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float sum = (a + b) * fp64.ONE;\n  float err = b - (sum - a) * fp64.ONE;\n#else\n  float sum = a + b;\n  float err = b - (sum - a);\n#endif\n  return vec2(sum, err);\n}\n\n// General sum operation\nvec2 twoSum(float a, float b) {\n  float s = (a + b);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float v = (s * fp64.ONE - a) * fp64.ONE;\n  float err = (a - (s - v) * fp64.ONE) * fp64.ONE * fp64.ONE * fp64.ONE + (b - v);\n#else\n  float v = s - a;\n  float err = (a - (s - v)) + (b - v);\n#endif\n  return vec2(s, err);\n}\n\nvec2 twoSub(float a, float b) {\n  float s = (a - b);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float v = (s * fp64.ONE - a) * fp64.ONE;\n  float err = (a - (s - v) * fp64.ONE) * fp64.ONE * fp64.ONE * fp64.ONE - (b + v);\n#else\n  float v = s - a;\n  float err = (a - (s - v)) - (b + v);\n#endif\n  return vec2(s, err);\n}\n\nvec2 twoSqr(float a) {\n  float prod = a * a;\n  vec2 a_fp64 = split(a);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float err = ((a_fp64.x * a_fp64.x - prod) * fp64.ONE + 2.0 * a_fp64.x *\n    a_fp64.y * fp64.ONE * fp64.ONE) + a_fp64.y * a_fp64.y * fp64.ONE * fp64.ONE * fp64.ONE;\n#else\n  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;\n#endif\n  return vec2(prod, err);\n}\n\nvec2 twoProd(float a, float b) {\n  float prod = a * b;\n  vec2 a_fp64 = split(a);\n  vec2 b_fp64 = split(b);\n  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +\n    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;\n  return vec2(prod, err);\n}\n\nvec2 sum_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSum(a.x, b.x);\n  t = twoSum(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 sub_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSub(a.x, b.x);\n  t = twoSub(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 mul_fp64(vec2 a, vec2 b) {\n  vec2 prod = twoProd(a.x, b.x);\n  // y component is for the error\n  prod.y += a.x * b.y;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  prod = split2(prod);\n#endif\n  prod = quickTwoSum(prod.x, prod.y);\n  prod.y += a.y * b.x;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  prod = split2(prod);\n#endif\n  prod = quickTwoSum(prod.x, prod.y);\n  return prod;\n}\n\nvec2 div_fp64(vec2 a, vec2 b) {\n  float xn = 1.0 / b.x;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  vec2 yn = mul_fp64(a, vec2(xn, 0));\n#else\n  vec2 yn = a * xn;\n#endif\n  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;\n  vec2 prod = twoProd(xn, diff);\n  return sum_fp64(yn, prod);\n}\n\nvec2 sqrt_fp64(vec2 a) {\n  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n\n  float x = 1.0 / sqrt(a.x);\n  float yn = a.x * x;\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  vec2 yn_sqr = twoSqr(yn) * fp64.ONE;\n#else\n  vec2 yn_sqr = twoSqr(yn);\n#endif\n  float diff = sub_fp64(a, yn_sqr).x;\n  vec2 prod = twoProd(x * 0.5, diff);\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  return sum_fp64(split(yn), prod);\n#else\n  return sum_fp64(vec2(yn, 0.0), prod);\n#endif\n}\n",defaultUniforms:{ONE:1},uniformTypes:{ONE:"f32"},fp64ify:St,fp64LowPart:xt,fp64ifyMatrix4:Nt},yt={name:"fp64",vs:"const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);\nconst vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);\nconst vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);\nconst vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);\nconst vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);\nconst vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);\nconst vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);\nconst vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);\nconst vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);\nconst vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);\n\nconst vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);\nconst vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);\nconst vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);\nconst vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);\n\nconst vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);\nconst vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);\nconst vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);\nconst vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);\n\nconst vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09); // 1/3!\nconst vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09); // 1/4!\nconst vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10); // 1/5!\nconst vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11); // 1/6!\nconst vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12); // 1/7!\nconst vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13); // 1/8!\nconst vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14); // 1/9!\nconst vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15); // 1/10!\n\nfloat nint(float d) {\n    if (d == floor(d)) return d;\n    return floor(d + 0.5);\n}\n\nvec2 nint_fp64(vec2 a) {\n    float hi = nint(a.x);\n    float lo;\n    vec2 tmp;\n    if (hi == a.x) {\n        lo = nint(a.y);\n        tmp = quickTwoSum(hi, lo);\n    } else {\n        lo = 0.0;\n        if (abs(hi - a.x) == 0.5 && a.y < 0.0) {\n            hi -= 1.0;\n        }\n        tmp = vec2(hi, lo);\n    }\n    return tmp;\n}\n\n/* k_power controls how much range reduction we would like to have\nRange reduction uses the following method:\nassume a = k_power * r + m * log(2), k and m being integers.\nSet k_power = 4 (we can choose other k to trade accuracy with performance.\nwe only need to calculate exp(r) and using exp(a) = 2^m * exp(r)^k_power;\n*/\n\nvec2 exp_fp64(vec2 a) {\n  // We need to make sure these two numbers match\n  // as bit-wise shift is not available in GLSL 1.0\n  const int k_power = 4;\n  const float k = 16.0;\n\n  const float inv_k = 1.0 / k;\n\n  if (a.x <= -88.0) return vec2(0.0, 0.0);\n  if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);\n  if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);\n  if (a.x == 1.0 && a.y == 0.0) return E_FP64;\n\n  float m = floor(a.x / LOG2_FP64.x + 0.5);\n  vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;\n  vec2 s, t, p;\n\n  p = mul_fp64(r, r);\n  s = sum_fp64(r, p * 0.5);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);\n\n  // s = sum_fp64(s, t);\n  // p = mul_fp64(p, r);\n  // t = mul_fp64(p, INVERSE_FACTORIAL_6_FP64);\n\n  // s = sum_fp64(s, t);\n  // p = mul_fp64(p, r);\n  // t = mul_fp64(p, INVERSE_FACTORIAL_7_FP64);\n\n  s = sum_fp64(s, t);\n\n\n  // At this point, s = exp(r) - 1; but after following 4 recursions, we will get exp(r) ^ 512 - 1.\n  for (int i = 0; i < k_power; i++) {\n    s = sum_fp64(s * 2.0, mul_fp64(s, s));\n  }\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = sum_fp64(s, vec2(fp64.ONE, 0.0));\n#else\n  s = sum_fp64(s, vec2(1.0, 0.0));\n#endif\n\n  return s * pow(2.0, m);\n//   return r;\n}\n\nvec2 log_fp64(vec2 a)\n{\n  if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n  vec2 x = vec2(log(a.x), 0.0);\n  vec2 s;\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = vec2(fp64.ONE, 0.0);\n#else\n  s = vec2(1.0, 0.0);\n#endif\n\n  x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);\n  return x;\n}\n\nvec2 sin_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(0.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  s = a;\n  r = a;\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);\n  s = sum_fp64(s, t);\n\n  /* keep the following commented code in case we need them\n  for extra accuracy from the Taylor expansion*/\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_7_FP64);\n  // s = sum_fp64(s, t);\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_9_FP64);\n  // s = sum_fp64(s, t);\n\n  return s;\n}\n\nvec2 cos_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(1.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  r = x;\n  s = sum_fp64(vec2(1.0, 0.0), r * 0.5);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);\n  s = sum_fp64(s, t);\n\n  /* keep the following commented code in case we need them\n  for extra accuracy from the Taylor expansion*/\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_8_FP64);\n  // s = sum_fp64(s, t);\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_10_FP64);\n  // s = sum_fp64(s, t);\n\n  return s;\n}\n\nvoid sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {\n  if (a.x == 0.0 && a.y == 0.0) {\n    sin_t = vec2(0.0, 0.0);\n    cos_t = vec2(1.0, 0.0);\n  }\n\n  sin_t = sin_taylor_fp64(a);\n  cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));\n}\n\nvec2 sin_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return sin_taylor_fp64(t);\n        } else if (j == 1) {\n            return cos_taylor_fp64(t);\n        } else if (j == -1) {\n            return -cos_taylor_fp64(t);\n        } else {\n            return -sin_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 cos_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(1.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return cos_taylor_fp64(t);\n        } else if (j == 1) {\n            return -sin_taylor_fp64(t);\n        } else if (j == -1) {\n            return sin_taylor_fp64(t);\n        } else {\n            return -cos_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 tan_fp64(vec2 a) {\n    vec2 sin_a;\n    vec2 cos_a;\n\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    // We just can't get PI/16 * 3.0 very accurately.\n    // so let's just store it\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n    vec2 sin_t, cos_t;\n    vec2 s, c;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#else\n        if (abs_k == 1) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs_k == 2) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs_k == 3) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs_k == 4) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#endif\n        if (k > 0) {\n            s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return div_fp64(sin_a, cos_a);\n}\n\nvec2 radians_fp64(vec2 degree) {\n  return mul_fp64(degree, PI_180_FP64);\n}\n\nvec2 mix_fp64(vec2 a, vec2 b, float x) {\n  vec2 range = sub_fp64(b, a);\n  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));\n}\n\n// Vector functions\n// vec2 functions\nvoid vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sum_fp64(a[0], b[0]);\n    out_val[1] = sum_fp64(a[1], b[1]);\n}\n\nvoid vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sub_fp64(a[0], b[0]);\n    out_val[1] = sub_fp64(a[1], b[1]);\n}\n\nvoid vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = mul_fp64(a[0], b[0]);\n    out_val[1] = mul_fp64(a[1], b[1]);\n}\n\nvoid vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = div_fp64(a[0], b[0]);\n    out_val[1] = div_fp64(a[1], b[1]);\n}\n\nvoid vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {\n  vec2 range[2];\n  vec2_sub_fp64(y, x, range);\n  vec2 portion[2];\n  portion[0] = range[0] * a;\n  portion[1] = range[1] * a;\n  vec2_sum_fp64(x, portion, out_val);\n}\n\nvec2 vec2_length_fp64(vec2 x[2]) {\n  return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));\n}\n\nvoid vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {\n  vec2 length = vec2_length_fp64(x);\n  vec2 length_vec2[2];\n  length_vec2[0] = length;\n  length_vec2[1] = length;\n\n  vec2_div_fp64(x, length_vec2, out_val);\n}\n\nvec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {\n  vec2 diff[2];\n  vec2_sub_fp64(x, y, diff);\n  return vec2_length_fp64(diff);\n}\n\nvec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {\n  vec2 v[2];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n\n  return sum_fp64(v[0], v[1]);\n}\n\n// vec3 functions\nvoid vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvec2 vec3_length_fp64(vec2 x[3]) {\n  return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),\n    mul_fp64(x[2], x[2])));\n}\n\nvec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {\n  vec2 diff[3];\n  vec3_sub_fp64(x, y, diff);\n  return vec3_length_fp64(diff);\n}\n\n// vec4 functions\nvoid vec4_fp64(vec4 a, out vec2 out_val[4]) {\n  out_val[0].x = a[0];\n  out_val[0].y = 0.0;\n\n  out_val[1].x = a[1];\n  out_val[1].y = 0.0;\n\n  out_val[2].x = a[2];\n  out_val[2].y = 0.0;\n\n  out_val[3].x = a[3];\n  out_val[3].y = 0.0;\n}\n\nvoid vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {\n  out_val[0] = mul_fp64(a[0], b);\n  out_val[1] = mul_fp64(a[1], b);\n  out_val[2] = mul_fp64(a[2], b);\n  out_val[3] = mul_fp64(a[3], b);\n}\n\nvoid vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {\n  for (int i = 0; i < 4; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {\n  vec2 v[4];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n  v[2] = mul_fp64(a[2], b[2]);\n  v[3] = mul_fp64(a[3], b[3]);\n\n  out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));\n}\n\nvoid mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {\n  vec2 tmp[4];\n\n  for (int i = 0; i < 4; i++)\n  {\n    for (int j = 0; j < 4; j++)\n    {\n      tmp[j] = b[j + i * 4];\n    }\n    vec4_dot_fp64(a, tmp, out_val[i]);\n  }\n}\n",dependencies:[Ot],fp64ify:St,fp64LowPart:xt,fp64ifyMatrix4:Nt},Mt={props:{},uniforms:{},name:"picking",uniformTypes:{isActive:"f32",isAttribute:"f32",isHighlightActive:"f32",useFloatColors:"f32",highlightedObjectColor:"vec3<f32>",highlightColor:"vec4<f32>"},defaultUniforms:{isActive:!1,isAttribute:!1,isHighlightActive:!1,useFloatColors:!0,highlightedObjectColor:[0,0,0],highlightColor:[0,1,1,1]},vs:"uniform pickingUniforms {\n  float isActive;\n  float isAttribute;\n  float isHighlightActive;\n  float useFloatColors;\n  vec3 highlightedObjectColor;\n  vec4 highlightColor;\n} picking;\n\nout vec4 picking_vRGBcolor_Avalid;\n\n// Normalize unsigned byte color to 0-1 range\nvec3 picking_normalizeColor(vec3 color) {\n  return picking.useFloatColors > 0.5 ? color : color / 255.0;\n}\n\n// Normalize unsigned byte color to 0-1 range\nvec4 picking_normalizeColor(vec4 color) {\n  return picking.useFloatColors > 0.5 ? color : color / 255.0;\n}\n\nbool picking_isColorZero(vec3 color) {\n  return dot(color, vec3(1.0)) < 0.00001;\n}\n\nbool picking_isColorValid(vec3 color) {\n  return dot(color, vec3(1.0)) > 0.00001;\n}\n\n// Check if this vertex is highlighted \nbool isVertexHighlighted(vec3 vertexColor) {\n  vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);\n  return\n    bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));\n}\n\n// Set the current picking color\nvoid picking_setPickingColor(vec3 pickingColor) {\n  pickingColor = picking_normalizeColor(pickingColor);\n\n  if (bool(picking.isActive)) {\n    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable\n    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\n\n    if (!bool(picking.isAttribute)) {\n      // Stores the picking color so that the fragment shader can render it during picking\n      picking_vRGBcolor_Avalid.rgb = pickingColor;\n    }\n  } else {\n    // Do the comparison with selected item color in vertex shader as it should mean fewer compares\n    picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));\n  }\n}\n\nvoid picking_setPickingAttribute(float value) {\n  if (bool(picking.isAttribute)) {\n    picking_vRGBcolor_Avalid.r = value;\n  }\n}\n\nvoid picking_setPickingAttribute(vec2 value) {\n  if (bool(picking.isAttribute)) {\n    picking_vRGBcolor_Avalid.rg = value;\n  }\n}\n\nvoid picking_setPickingAttribute(vec3 value) {\n  if (bool(picking.isAttribute)) {\n    picking_vRGBcolor_Avalid.rgb = value;\n  }\n}\n",fs:"uniform pickingUniforms {\n  float isActive;\n  float isAttribute;\n  float isHighlightActive;\n  float useFloatColors;\n  vec3 highlightedObjectColor;\n  vec4 highlightColor;\n} picking;\n\nin vec4 picking_vRGBcolor_Avalid;\n\n/*\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  // If we are still picking, we don't highlight\n  if (picking.isActive > 0.5) {\n    return color;\n  }\n\n  bool selected = bool(picking_vRGBcolor_Avalid.a);\n\n  if (selected) {\n    // Blend in highlight color based on its alpha value\n    float highLightAlpha = picking.highlightColor.a;\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\n    float highLightRatio = highLightAlpha / blendedAlpha;\n\n    vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);\n    return vec4(blendedRGB, blendedAlpha);\n  } else {\n    return color;\n  }\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nvec4 picking_filterPickingColor(vec4 color) {\n  if (bool(picking.isActive)) {\n    if (picking_vRGBcolor_Avalid.a == 0.0) {\n      discard;\n    }\n    return picking_vRGBcolor_Avalid;\n  }\n  return color;\n}\n\n/*\n * Returns picking color if picking is enabled if not\n * highlight color if this item is selected, otherwise unmodified argument.\n */\nvec4 picking_filterColor(vec4 color) {\n  vec4 highlightColor = picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highlightColor);\n}\n",getUniforms:function(e,n){void 0===e&&(e={});var t={};if(void 0===e.highlightedObjectColor);else if(null===e.highlightedObjectColor)t.isHighlightActive=!1;else{t.isHighlightActive=!0;var i=e.highlightedObjectColor.slice(0,3);t.highlightedObjectColor=i}if(e.highlightColor){var r=Array.from(e.highlightColor,(function(e){return e/255}));Number.isFinite(r[3])||(r[3]=1),t.highlightColor=r}void 0!==e.isActive&&(t.isActive=Boolean(e.isActive),t.isAttribute=Boolean(e.isAttribute));void 0!==e.useFloatColors&&(t.useFloatColors=Boolean(e.useFloatColors));return t}};var Ft="precision highp int;\n\n// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\nstruct AmbientLight {\n  vec3 color;\n};\n\nstruct PointLight {\n  vec3 color;\n  vec3 position;\n  vec3 attenuation; // 2nd order x:Constant-y:Linear-z:Exponential\n};\n\nstruct DirectionalLight {\n  vec3 color;\n  vec3 direction;\n};\n\nuniform lightingUniforms {\n  int enabled;\n  int lightType;\n\n  int directionalLightCount;\n  int pointLightCount;\n\n  vec3 ambientColor;\n\n  vec3 lightColor0;\n  vec3 lightPosition0;\n  vec3 lightDirection0;\n  vec3 lightAttenuation0;\n\n  vec3 lightColor1;\n  vec3 lightPosition1;\n  vec3 lightDirection1;\n  vec3 lightAttenuation1;\n\n  vec3 lightColor2;\n  vec3 lightPosition2;\n  vec3 lightDirection2;\n  vec3 lightAttenuation2;\n} lighting;\n\nPointLight lighting_getPointLight(int index) {\n  switch (index) {\n    case 0:\n      return PointLight(lighting.lightColor0, lighting.lightPosition0, lighting.lightAttenuation0);\n    case 1:\n      return PointLight(lighting.lightColor1, lighting.lightPosition1, lighting.lightAttenuation1);\n    case 2:\n    default:  \n      return PointLight(lighting.lightColor2, lighting.lightPosition2, lighting.lightAttenuation2);\n  }\n}\n\nDirectionalLight lighting_getDirectionalLight(int index) {\n  switch (index) {\n    case 0:\n      return DirectionalLight(lighting.lightColor0, lighting.lightDirection0);\n    case 1:\n      return DirectionalLight(lighting.lightColor1, lighting.lightDirection1);\n    case 2:\n    default:   \n      return DirectionalLight(lighting.lightColor2, lighting.lightDirection2);\n  }\n} \n\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n\n// #endif\n",wt=5,Dt=255,Bt=function(e){return e[e.POINT=0]="POINT",e[e.DIRECTIONAL=1]="DIRECTIONAL",e}({}),Ut={props:{},uniforms:{},name:"lighting",defines:{},uniformTypes:{enabled:"i32",lightType:"i32",directionalLightCount:"i32",pointLightCount:"i32",ambientLightColor:"vec3<f32>",lightColor0:"vec3<f32>",lightPosition0:"vec3<f32>",lightDirection0:"vec3<f32>",lightAttenuation0:"vec3<f32>",lightColor1:"vec3<f32>",lightPosition1:"vec3<f32>",lightDirection1:"vec3<f32>",lightAttenuation1:"vec3<f32>",lightColor2:"vec3<f32>",lightPosition2:"vec3<f32>",lightDirection2:"vec3<f32>",lightAttenuation2:"vec3<f32>"},defaultUniforms:{enabled:1,lightType:Bt.POINT,directionalLightCount:0,pointLightCount:0,ambientLightColor:[.1,.1,.1],lightColor0:[1,1,1],lightPosition0:[1,1,2],lightDirection0:[1,1,1],lightAttenuation0:[1,0,0],lightColor1:[1,1,1],lightPosition1:[1,1,2],lightDirection1:[1,1,1],lightAttenuation1:[1,0,0],lightColor2:[1,1,1],lightPosition2:[1,1,2],lightDirection2:[1,1,1],lightAttenuation2:[1,0,0]},source:"// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\nstruct AmbientLight {\n  color: vec3<f32>,\n};\n\nstruct PointLight {\n  color: vec3<f32>,\n  position: vec3<f32>,\n  attenuation: vec3<f32>, // 2nd order x:Constant-y:Linear-z:Exponential\n};\n\nstruct DirectionalLight {\n  color: vec3<f32>,\n  direction: vec3<f32>,\n};\n\nstruct lightingUniforms {\n  enabled: i32,\n  poightCount: i32,\n  directionalLightCount: i32,\n\n  ambientColor: vec3<f32>,\n\n  // TODO - support multiple lights by uncommenting arrays below\n  lightType: i32,\n  lightColor: vec3<f32>,\n  lightDirection: vec3<f32>,\n  lightPosition: vec3<f32>,\n  lightAttenuation: vec3<f32>,\n\n  // AmbientLight ambientLight;\n  // PointLight pointLight[MAX_LIGHTS];\n  // DirectionalLight directionalLight[MAX_LIGHTS];\n};\n\n// Binding 0:1 is reserved for lighting (Note: could go into separate bind group as it is stable across draw calls)\n@binding(1) @group(0) var<uniform> lighting : lightingUniforms;\n\nfn lighting_getPointLight(index: i32) -> PointLight {\n  return PointLight(lighting.lightColor, lighting.lightPosition, lighting.lightAttenuation);\n}\n\nfn lighting_getDirectionalLight(index: i32) -> DirectionalLight {\n  return DirectionalLight(lighting.lightColor, lighting.lightDirection);\n} \n\nfn getPointLightAttenuation(pointLight: PointLight, distance: f32) -> f32 {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n",vs:Ft,fs:Ft,getUniforms:function(e,n){void 0===n&&(n={});if(!(e=e?Object.assign({},e):e))return Object.assign({},Ut.defaultUniforms);e.lights&&(e=Object.assign({},e,function(e){for(var n,t,i,r={pointLights:[],directionalLights:[]},a=(0,o.A)(e||[]);!(i=a()).done;){var s=i.value;switch(s.type){case"ambient":r.ambientLight=s;break;case"directional":null==(n=r.directionalLights)||n.push(s);break;case"point":null==(t=r.pointLights)||t.push(s)}}return r}(e.lights),{lights:void 0}));var t=e||{},i=t.ambientLight,r=t.pointLights,a=t.directionalLights;if(!(i||r&&r.length>0||a&&a.length>0))return Object.assign({},Ut.defaultUniforms,{enabled:0});var s=Object.assign({},Ut.defaultUniforms,n,function(e){var n=e.ambientLight,t=e.pointLights,i=void 0===t?[]:t,r=e.directionalLights,a=void 0===r?[]:r,s={};s.ambientLightColor=Gt(n);for(var u,c=0,f=(0,o.A)(i);!(u=f()).done;){var p=u.value;s.lightType=Bt.POINT;var d=c;s["lightColor"+d]=Gt(p),s["lightPosition"+d]=p.position,s["lightAttenuation"+d]=p.attenuation||[1,0,0],c++}for(var _,h=(0,o.A)(a);!(_=h()).done;){var m=_.value;s.lightType=Bt.DIRECTIONAL;var v=c;s["lightColor"+v]=Gt(m),s["lightDirection"+v]=m.direction,c++}c>wt&&l.R.warn("MAX_LIGHTS exceeded")();return s.directionalLightCount=a.length,s.pointLightCount=i.length,s}({ambientLight:i,pointLights:r,directionalLights:a}));void 0!==e.enabled&&(s.enabled=e.enabled?1:0);return s}};function Gt(e){void 0===e&&(e={});var n=e,t=n.color,i=void 0===t?[0,0,0]:t,r=n.intensity,o=void 0===r?1:r;return i.map((function(e){return e*o/Dt}))}var Ht="uniform phongMaterialUniforms {\n  uniform float ambient;\n  uniform float diffuse;\n  uniform float shininess;\n  uniform vec3  specularColor;\n} material;\n",kt="#define MAX_LIGHTS 1\n\nuniform phongMaterialUniforms {\n  uniform float ambient;\n  uniform float diffuse;\n  uniform float shininess;\n  uniform vec3  specularColor;\n} material;\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\n  vec3 halfway_direction = normalize(light_direction + view_direction);\n  float lambertian = dot(light_direction, normal_worldspace);\n  float specular = 0.0;\n  if (lambertian > 0.0) {\n    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n    specular = pow(specular_angle, material.shininess);\n  }\n  lambertian = max(lambertian, 0.0);\n  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;\n}\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = surfaceColor;\n\n  if (lighting.enabled == 0) {\n    return lightColor;\n  }\n\n  vec3 view_direction = normalize(cameraPosition - position_worldspace);\n  lightColor = material.ambient * surfaceColor * lighting.ambientColor;\n\n  for (int i = 0; i < lighting.pointLightCount; i++) {\n    PointLight pointLight = lighting_getPointLight(i);\n    vec3 light_position_worldspace = pointLight.position;\n    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n    float light_attenuation = getPointLightAttenuation(pointLight, distance(light_position_worldspace, position_worldspace));\n    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color / light_attenuation);\n  }\n\n  int totalLights = min(MAX_LIGHTS, lighting.pointLightCount + lighting.directionalLightCount);\n  for (int i = lighting.pointLightCount; i < totalLights; i++) {\n    DirectionalLight directionalLight = lighting_getDirectionalLight(i);\n    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n  }\n  \n  return lightColor;\n}\n",Vt={props:{},name:"gouraudMaterial",vs:kt.replace("phongMaterial","gouraudMaterial"),fs:Ht.replace("phongMaterial","gouraudMaterial"),defines:{LIGHTING_VERTEX:!0},dependencies:[Ut],uniformTypes:{ambient:"f32",diffuse:"f32",shininess:"f32",specularColor:"vec3<f32>"},defaultUniforms:{ambient:.35,diffuse:.6,shininess:32,specularColor:[.15,.15,.15]},getUniforms:function(e){var n=Object.assign({},e);return n.specularColor&&(n.specularColor=n.specularColor.map((function(e){return e/255}))),Object.assign({},Vt.defaultUniforms,n)}},Xt={name:"phongMaterial",dependencies:[Ut],source:"struct phongMaterialUniforms {\n  ambient: f32,\n  diffuse: f32,\n  shininess: f32,\n  specularColor: vec3<f32>,\n};\n\n@binding(2) @group(0) var<uniform> material : phongMaterialUniforms;\n\nfn lighting_getLightColor(surfaceColor: vec3<f32>, light_direction: vec3<f32>, view_direction: vec3<f32>, normal_worldspace: vec3<f32>, color: vec3<f32>) -> vec3<f32> {\n  let halfway_direction: vec3<f32> = normalize(light_direction + view_direction);\n  var lambertian: f32 = dot(light_direction, normal_worldspace);\n  var specular: f32 = 0.0;\n  if (lambertian > 0.0) {\n    let specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n    specular = pow(specular_angle, material.shininess);\n  }\n  lambertian = max(lambertian, 0.0);\n  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;\n}\n\nfn lighting_getLightColor2(surfaceColor: vec3<f32>, cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32> {\n  var lightColor: vec3<f32> = surfaceColor;\n\n  if (lighting.enabled == 0) {\n    return lightColor;\n  }\n\n  let view_direction: vec3<f32> = normalize(cameraPosition - position_worldspace);\n  lightColor = material.ambient * surfaceColor * lighting.ambientColor;\n\n  if (lighting.lightType == 0) {\n    let pointLight: PointLight  = lighting_getPointLight(0);\n    let light_position_worldspace: vec3<f32> = pointLight.position;\n    let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);\n    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n  } else if (lighting.lightType == 1) {\n    var directionalLight: DirectionalLight = lighting_getDirectionalLight(0);\n    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n  }\n  \n  return lightColor;\n  /*\n  for (int i = 0; i < MAX_LIGHTS; i++) {\n    if (i >= lighting.pointLightCount) {\n      break;\n    }\n    PointLight pointLight = lighting.pointLight[i];\n    vec3 light_position_worldspace = pointLight.position;\n    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n  }\n\n  for (int i = 0; i < MAX_LIGHTS; i++) {\n    if (i >= lighting.directionalLightCount) {\n      break;\n    }\n    DirectionalLight directionalLight = lighting.directionalLight[i];\n    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n  }\n  */\n}\n\nfn lighting_getSpecularLightColor(cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32>{\n  var lightColor = vec3<f32>(0, 0, 0);\n  let surfaceColor = vec3<f32>(0, 0, 0);\n\n  if (lighting.enabled == 0) {\n    let view_direction = normalize(cameraPosition - position_worldspace);\n\n    switch (lighting.lightType) {\n      case 0, default: {\n        let pointLight: PointLight = lighting_getPointLight(0);\n        let light_position_worldspace: vec3<f32> = pointLight.position;\n        let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);\n        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n      }\n      case 1: {\n        let directionalLight: DirectionalLight = lighting_getDirectionalLight(0);\n        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n      }\n    }\n  }\n  return lightColor;\n}\n",vs:Ht,fs:kt,defines:{LIGHTING_FRAGMENT:!0},uniformTypes:{ambient:"f32",diffuse:"f32",shininess:"f32",specularColor:"vec3<f32>"},defaultUniforms:{ambient:.35,diffuse:.6,shininess:32,specularColor:[.15,.15,.15]},getUniforms:function(e){var n=Object.assign({},e);return n.specularColor&&(n.specularColor=n.specularColor.map((function(e){return e/255}))),Object.assign({},Xt.defaultUniforms,n)}},jt="uniform pbrProjectionUniforms {\n  mat4 modelViewProjectionMatrix;\n  mat4 modelMatrix;\n  mat4 normalMatrix;\n  vec3 camera;\n} pbrProjection;\n",Wt={props:{},uniforms:{},name:"pbrMaterial",dependencies:[Ut,{name:"pbrProjection",vs:jt,fs:jt,getUniforms:function(e){return e},uniformTypes:{modelViewProjectionMatrix:"mat4x4<f32>",modelMatrix:"mat4x4<f32>",normalMatrix:"mat4x4<f32>",camera:"vec3<i32>"}}],source:"struct PBRFragmentInputs = {\n  pbr_vPosition: vec3f;\n  pbr_vUV: vec2f;\n  pbr_vTBN: mat3f;\n  pbr_vNormal: vec3f;\n};\n\nvar fragmentInputs: PBRFragmentInputs;\n\nfn pbr_setPositionNormalTangentUV(position: vec4f, normal: vec4f, tangent: vec4f, vec2 uv)\n{\n  pos: vec4f = pbrProjection.modelMatrix * position;\n  pbr_vPosition = vec3(pos.xyz) / pos.w;\n\n#ifdef HAS_NORMALS\n#ifdef HAS_TANGENTS\n  let normalW: vec3f = normalize(vec3(pbrProjection.normalMatrix * vec4(normal.xyz, 0.0)));\n  let tangentW: vec3f = normalize(vec3(pbrProjection.modelMatrix * vec4(tangent.xyz, 0.0)));\n  let bitangentW: vec3f = cross(normalW, tangentW) * tangent.w;\n  fragmentInputs,pbr_vTBN = mat3(tangentW, bitangentW, normalW);\n#else // HAS_TANGENTS != 1\n  fragmentInputs.pbr_vNormal = normalize(vec3(pbrProjection.modelMatrix * vec4(normal.xyz, 0.0)));\n#endif\n#endif\n\n#ifdef HAS_UV\n  pbr_vUV = uv;\n#else\n  pbr_vUV = vec2(0.,0.);\n#endif\n}\n\nuniform pbrMaterialUniforms {\n  // Material is unlit\n  unlit: uint32;\n\n  // Base color map\n  baseColorMapEnabled: uint32;\n  baseColorFactor: vec4f;\n\n  normalMapEnabled : uint32 \n  normalScale: f32; // #ifdef HAS_NORMALMAP\n\n  emissiveMapEnabled: uint32;\n  vec3 emissiveFactor; // #ifdef HAS_EMISSIVEMAP\n\n  vec2 metallicRoughnessValues;\n  metallicRoughnessMapEnabled: uint32;\n\n  occlusionMapEnabled: uint32;\n  occlusionStrength: f32; // #ifdef HAS_OCCLUSIONMAP\n  \n  alphaCutoffEnabled: uint32;\n  alphaCutoff: f32; // #ifdef ALPHA_CUTOFF\n  \n  // IBL\n  IBLenabled: uint32;\n  vec2 scaleIBLAmbient; // #ifdef USE_IBL\n  \n  // debugging flags used for shader output of intermediate PBR variables\n  // #ifdef PBR_DEBUG\n  scaleDiffBaseMR: vec4f;\n  scaleFGDSpec: vec4f;\n  // #endif\n} pbrMaterial;\n\n// Samplers\n#ifdef HAS_BASECOLORMAP\nuniform sampler2D pbr_baseColorSampler;\n#endif\n#ifdef HAS_NORMALMAP\nuniform sampler2D pbr_normalSampler;\n#endif\n#ifdef HAS_EMISSIVEMAP\nuniform sampler2D pbr_emissiveSampler;\n#endif\n#ifdef HAS_METALROUGHNESSMAP\nuniform sampler2D pbr_metallicRoughnessSampler;\n#endif\n#ifdef HAS_OCCLUSIONMAP\nuniform sampler2D pbr_occlusionSampler;\n#endif\n#ifdef USE_IBL\nuniform samplerCube pbr_diffuseEnvSampler;\nuniform samplerCube pbr_specularEnvSampler;\nuniform sampler2D pbr_brdfLUT;\n#endif\n\n// Encapsulate the various inputs used by the various functions in the shading equation\n// We store values in this struct to simplify the integration of alternative implementations\n// of the shading terms, outlined in the Readme.MD Appendix.\nstruct PBRInfo {\n  NdotL: f32;                  // cos angle between normal and light direction\n  NdotV: f32;                  // cos angle between normal and view direction\n  NdotH: f32;                  // cos angle between normal and half vector\n  LdotH: f32;                  // cos angle between light direction and half vector\n  VdotH: f32;                  // cos angle between view direction and half vector\n  perceptualRoughness: f32;    // roughness value, as authored by the model creator (input to shader)\n  metalness: f32;              // metallic value at the surface\n  vec3 reflectance0;            // full reflectance color (normal incidence angle)\n  vec3 reflectance90;           // reflectance color at grazing angle\n  alphaRoughness: f32;         // roughness mapped to a more linear change in the roughness (proposed by [2])\n  vec3 diffuseColor;            // color contribution from diffuse lighting\n  vec3 specularColor;           // color contribution from specular lighting\n  vec3 n;                       // normal at surface point\n  vec3 v;                       // vector from surface point to camera\n};\n\nconst float M_PI = 3.141592653589793;\nconst float c_MinRoughness = 0.04;\n\nvec4 SRGBtoLINEAR(vec4 srgbIn)\n{\n#ifdef MANUAL_SRGB\n#ifdef SRGB_FAST_APPROXIMATION\n  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\n#else // SRGB_FAST_APPROXIMATION\n  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\n  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\n#endif //SRGB_FAST_APPROXIMATION\n  return vec4(linOut,srgbIn.w);;\n#else //MANUAL_SRGB\n  return srgbIn;\n#endif //MANUAL_SRGB\n}\n\n// Find the normal for this fragment, pulling either from a predefined normal map\n// or from the interpolated mesh normal and tangent attributes.\nvec3 getNormal()\n{\n  // Retrieve the tangent space matrix\n#ifndef HAS_TANGENTS\n  vec3 pos_dx = dFdx(pbr_vPosition);\n  vec3 pos_dy = dFdy(pbr_vPosition);\n  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));\n  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));\n  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\n#ifdef HAS_NORMALS\n  vec3 ng = normalize(pbr_vNormal);\n#else\n  vec3 ng = cross(pos_dx, pos_dy);\n#endif\n\n  t = normalize(t - ng * dot(ng, t));\n  vec3 b = normalize(cross(ng, t));\n  mat3 tbn = mat3(t, b, ng);\n#else // HAS_TANGENTS\n  mat3 tbn = pbr_vTBN;\n#endif\n\n#ifdef HAS_NORMALMAP\n  vec3 n = texture(pbr_normalSampler, pbr_vUV).rgb;\n  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(pbrMaterial.normalScale, pbrMaterial.normalScale, 1.0)));\n#else\n  // The tbn matrix is linearly interpolated, so we need to re-normalize\n  vec3 n = normalize(tbn[2].xyz);\n#endif\n\n  return n;\n}\n\n// Calculation of the lighting contribution from an optional Image Based Light source.\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\n// See our README.md on Environment Maps [3] for additional discussion.\n#ifdef USE_IBL\nvec3 getIBLContribution(PBRInfo pbrInfo, vec3 n, vec3 reflection)\n{\n  float mipCount = 9.0; // resolution of 512x512\n  float lod = (pbrInfo.perceptualRoughness * mipCount);\n  // retrieve a scale and bias to F0. See [1], Figure 3\n  vec3 brdf = SRGBtoLINEAR(texture(pbr_brdfLUT,\n    vec2(pbrInfo.NdotV, 1.0 - pbrInfo.perceptualRoughness))).rgb;\n  vec3 diffuseLight = SRGBtoLINEAR(texture(pbr_diffuseEnvSampler, n)).rgb;\n\n#ifdef USE_TEX_LOD\n  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection, lod)).rgb;\n#else\n  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection)).rgb;\n#endif\n\n  vec3 diffuse = diffuseLight * pbrInfo.diffuseColor;\n  vec3 specular = specularLight * (pbrInfo.specularColor * brdf.x + brdf.y);\n\n  // For presentation, this allows us to disable IBL terms\n  diffuse *= pbrMaterial.scaleIBLAmbient.x;\n  specular *= pbrMaterial.scaleIBLAmbient.y;\n\n  return diffuse + specular;\n}\n#endif\n\n// Basic Lambertian diffuse\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\n// See also [1], Equation 1\nvec3 diffuse(PBRInfo pbrInfo)\n{\n  return pbrInfo.diffuseColor / M_PI;\n}\n\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\n// Implementation of fresnel from [4], Equation 15\nvec3 specularReflection(PBRInfo pbrInfo)\n{\n  return pbrInfo.reflectance0 +\n    (pbrInfo.reflectance90 - pbrInfo.reflectance0) *\n    pow(clamp(1.0 - pbrInfo.VdotH, 0.0, 1.0), 5.0);\n}\n\n// This calculates the specular geometric attenuation (aka G()),\n// where rougher material will reflect less light back to the viewer.\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\n// alphaRoughness as input as originally proposed in [2].\nfn geometricOcclusion(PBRInfo pbrInfo) -> f32 {\n  let NdotL: f32 = pbrInfo.NdotL;\n  let NdotV: f32 = pbrInfo.NdotV;\n  let r: f32 = pbrInfo.alphaRoughness;\n\n  let attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\n  let attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\n  return attenuationL * attenuationV;\n}\n\n// The following equation(s) model the distribution of microfacet normals across\n// the area being drawn (aka D())\n// Implementation from \"Average Irregularity Representation of a Roughened Surface\n// for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes\n// from EPIC Games [1], Equation 3.\nfn microfacetDistribution(PBRInfo pbrInfo) -> float {\n  float roughnessSq = pbrInfo.alphaRoughness * pbrInfo.alphaRoughness;\n  float f = (pbrInfo.NdotH * roughnessSq - pbrInfo.NdotH) * pbrInfo.NdotH + 1.0;\n  return roughnessSq / (M_PI * f * f);\n}\n\nfn PBRInfo_setAmbientLight(inout pbrInfo: PBRInfo) {\n  pbrInfo.NdotL = 1.0;\n  pbrInfo.NdotH = 0.0;\n  pbrInfo.LdotH = 0.0;\n  pbrInfo.VdotH = 1.0;\n}\n\nfb PBRInfo_setDirectionalLight(inout PBRInfo pbrInfo, vec3 lightDirection) {\n  vec3 n = pbrInfo.n;\n  vec3 v = pbrInfo.v;\n  vec3 l = normalize(lightDirection);             // Vector from surface point to light\n  vec3 h = normalize(l+v);                        // Half vector between both l and v\n\n  pbrInfo.NdotL = clamp(dot(n, l), 0.001, 1.0);\n  pbrInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\n  pbrInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\n  pbrInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\n}\n\nfn PBRInfo_setPointLight(inout pbrInfo: PBRInfo, pointLight: PointLight) {\n  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);\n  PBRInfo_setDirectionalLight(pbrInfo, light_direction);\n}\n\nfn calculateFinalColor(pbrInfo: PBRInfo , lightColor: vec3f) -> vec3f {\n  // Calculate the shading terms for the microfacet specular shading model\n  let F: vec3f = specularReflection(pbrInfo);\n  let G: vec3f = geometricOcclusion(pbrInfo);\n  let D: vec3f = microfacetDistribution(pbrInfo);\n\n  // Calculation of analytical lighting contribution\n  let diffuseContrib: vec3f = (1.0 - F) * diffuse(pbrInfo);\n  let specContrib: vec3f = F * G * D / (4.0 * pbrInfo.NdotL * pbrInfo.NdotV);\n  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\n  return pbrInfo.NdotL * lightColor * (diffuseContrib + specContrib);\n}\n\nfn pbr_filterColor(colorUnused: vec4f) -> vec4f\n{\n  // The albedo may be defined from a base texture or a flat color\n#ifdef HAS_BASECOLORMAP\n  vec4 baseColor = SRGBtoLINEAR(texture(pbr_baseColorSampler, pbr_vUV)) * pbrMaterial.baseColorFactor;\n#else\n  vec4 baseColor = pbrMaterial.baseColorFactor;\n#endif\n\n#ifdef ALPHA_CUTOFF\n  if (baseColor.a < pbrMaterial.alphaCutoff) {\n    discard;\n  }\n#endif\n\n  vec3 color = vec3(0, 0, 0);\n\n  if(pbrMaterial.unlit){\n    color.rgb = baseColor.rgb;\n  }\n  else{\n    // Metallic and Roughness material properties are packed together\n    // In glTF, these factors can be specified by fixed scalar values\n    // or from a metallic-roughness map\n    float perceptualRoughness = pbrMaterial.metallicRoughnessValues.y;\n    float metallic = pbrMaterial.metallicRoughnessValues.x;\n#ifdef HAS_METALROUGHNESSMAP\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\n    vec4 mrSample = texture(pbr_metallicRoughnessSampler, pbr_vUV);\n    perceptualRoughness = mrSample.g * perceptualRoughness;\n    metallic = mrSample.b * metallic;\n#endif\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\n    metallic = clamp(metallic, 0.0, 1.0);\n    // Roughness is authored as perceptual roughness; as is convention,\n    // convert to material roughness by squaring the perceptual roughness [2].\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\n\n    vec3 f0 = vec3(0.04);\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\n    diffuseColor *= 1.0 - metallic;\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\n\n    // Compute reflectance.\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n\n    // For typical incident reflectance range (between 4% to 100%) set the grazing\n    // reflectance to 100% for typical fresnel effect.\n    // For very low reflectance range on highly diffuse objects (below 4%),\n    // incrementally reduce grazing reflecance to 0%.\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\n    vec3 specularEnvironmentR0 = specularColor.rgb;\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\n\n    vec3 n = getNormal();                          // normal at surface point\n    vec3 v = normalize(pbrProjection.camera - pbr_vPosition);  // Vector from surface point to camera\n\n    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);\n    vec3 reflection = -normalize(reflect(v, n));\n\n    PBRInfo pbrInfo = PBRInfo(\n      0.0, // NdotL\n      NdotV,\n      0.0, // NdotH\n      0.0, // LdotH\n      0.0, // VdotH\n      perceptualRoughness,\n      metallic,\n      specularEnvironmentR0,\n      specularEnvironmentR90,\n      alphaRoughness,\n      diffuseColor,\n      specularColor,\n      n,\n      v\n    );\n\n#ifdef USE_LIGHTS\n    // Apply ambient light\n    PBRInfo_setAmbientLight(pbrInfo);\n    color += calculateFinalColor(pbrInfo, lighting.ambientColor);\n\n    // Apply directional light\n    for(int i = 0; i < lighting.directionalLightCount; i++) {\n      if (i < lighting.directionalLightCount) {\n        PBRInfo_setDirectionalLight(pbrInfo, lighting_getDirectionalLight(i).direction);\n        color += calculateFinalColor(pbrInfo, lighting_getDirectionalLight(i).color);\n      }\n    }\n\n    // Apply point light\n    for(int i = 0; i < lighting.pointLightCount; i++) {\n      if (i < lighting.pointLightCount) {\n        PBRInfo_setPointLight(pbrInfo, lighting_getPointLight(i));\n        float attenuation = getPointLightAttenuation(lighting_getPointLight(i), distance(lighting_getPointLight(i).position, pbr_vPosition));\n        color += calculateFinalColor(pbrInfo, lighting_getPointLight(i).color / attenuation);\n      }\n    }\n#endif\n\n    // Calculate lighting contribution from image based lighting source (IBL)\n#ifdef USE_IBL\n    if (pbrMaterial.IBLenabled) {\n      color += getIBLContribution(pbrInfo, n, reflection);\n    }\n#endif\n\n // Apply optional PBR terms for additional (optional) shading\n#ifdef HAS_OCCLUSIONMAP\n    if (pbrMaterial.occlusionMapEnabled) {\n      float ao = texture(pbr_occlusionSampler, pbr_vUV).r;\n      color = mix(color, color * ao, pbrMaterial.occlusionStrength);\n    }\n#endif\n\n#ifdef HAS_EMISSIVEMAP\n    if (pbrMaterial.emissiveMapEnabled) {\n      vec3 emissive = SRGBtoLINEAR(texture(pbr_emissiveSampler, pbr_vUV)).rgb * pbrMaterial.emissiveFactor;\n      color += emissive;\n    }\n#endif\n\n    // This section uses mix to override final color for reference app visualization\n    // of various parameters in the lighting equation.\n#ifdef PBR_DEBUG\n    // TODO: Figure out how to debug multiple lights\n\n    // color = mix(color, F, pbr_scaleFGDSpec.x);\n    // color = mix(color, vec3(G), pbr_scaleFGDSpec.y);\n    // color = mix(color, vec3(D), pbr_scaleFGDSpec.z);\n    // color = mix(color, specContrib, pbr_scaleFGDSpec.w);\n\n    // color = mix(color, diffuseContrib, pbr_scaleDiffBaseMR.x);\n    color = mix(color, baseColor.rgb, pbrMaterial.scaleDiffBaseMR.y);\n    color = mix(color, vec3(metallic), pbrMaterial.scaleDiffBaseMR.z);\n    color = mix(color, vec3(perceptualRoughness), pbrMaterial.scaleDiffBaseMR.w);\n#endif\n\n  }\n\n  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);\n}\n",vs:"out vec3 pbr_vPosition;\nout vec2 pbr_vUV;\n\n#ifdef HAS_NORMALS\n# ifdef HAS_TANGENTS\nout mat3 pbr_vTBN;\n# else\nout vec3 pbr_vNormal;\n# endif\n#endif\n\nvoid pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)\n{\n  vec4 pos = pbrProjection.modelMatrix * position;\n  pbr_vPosition = vec3(pos.xyz) / pos.w;\n\n#ifdef HAS_NORMALS\n#ifdef HAS_TANGENTS\n  vec3 normalW = normalize(vec3(pbrProjection.normalMatrix * vec4(normal.xyz, 0.0)));\n  vec3 tangentW = normalize(vec3(pbrProjection.modelMatrix * vec4(tangent.xyz, 0.0)));\n  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;\n  pbr_vTBN = mat3(tangentW, bitangentW, normalW);\n#else // HAS_TANGENTS != 1\n  pbr_vNormal = normalize(vec3(pbrProjection.modelMatrix * vec4(normal.xyz, 0.0)));\n#endif\n#endif\n\n#ifdef HAS_UV\n  pbr_vUV = uv;\n#else\n  pbr_vUV = vec2(0.,0.);\n#endif\n}\n",fs:"precision highp float;\n\nuniform pbrMaterialUniforms {\n  // Material is unlit\n  bool unlit;\n\n  // Base color map\n  bool baseColorMapEnabled;\n  vec4 baseColorFactor;\n\n  bool normalMapEnabled;  \n  float normalScale; // #ifdef HAS_NORMALMAP\n\n  bool emissiveMapEnabled;\n  vec3 emissiveFactor; // #ifdef HAS_EMISSIVEMAP\n\n  vec2 metallicRoughnessValues;\n  bool metallicRoughnessMapEnabled;\n\n  bool occlusionMapEnabled;\n  float occlusionStrength; // #ifdef HAS_OCCLUSIONMAP\n  \n  bool alphaCutoffEnabled;\n  float alphaCutoff; // #ifdef ALPHA_CUTOFF\n  \n  // IBL\n  bool IBLenabled;\n  vec2 scaleIBLAmbient; // #ifdef USE_IBL\n  \n  // debugging flags used for shader output of intermediate PBR variables\n  // #ifdef PBR_DEBUG\n  vec4 scaleDiffBaseMR;\n  vec4 scaleFGDSpec;\n  // #endif\n} pbrMaterial;\n\n// Samplers\n#ifdef HAS_BASECOLORMAP\nuniform sampler2D pbr_baseColorSampler;\n#endif\n#ifdef HAS_NORMALMAP\nuniform sampler2D pbr_normalSampler;\n#endif\n#ifdef HAS_EMISSIVEMAP\nuniform sampler2D pbr_emissiveSampler;\n#endif\n#ifdef HAS_METALROUGHNESSMAP\nuniform sampler2D pbr_metallicRoughnessSampler;\n#endif\n#ifdef HAS_OCCLUSIONMAP\nuniform sampler2D pbr_occlusionSampler;\n#endif\n#ifdef USE_IBL\nuniform samplerCube pbr_diffuseEnvSampler;\nuniform samplerCube pbr_specularEnvSampler;\nuniform sampler2D pbr_brdfLUT;\n#endif\n\n// Inputs from vertex shader\n\nin vec3 pbr_vPosition;\nin vec2 pbr_vUV;\n\n#ifdef HAS_NORMALS\n#ifdef HAS_TANGENTS\nin mat3 pbr_vTBN;\n#else\nin vec3 pbr_vNormal;\n#endif\n#endif\n\n// Encapsulate the various inputs used by the various functions in the shading equation\n// We store values in this struct to simplify the integration of alternative implementations\n// of the shading terms, outlined in the Readme.MD Appendix.\nstruct PBRInfo {\n  float NdotL;                  // cos angle between normal and light direction\n  float NdotV;                  // cos angle between normal and view direction\n  float NdotH;                  // cos angle between normal and half vector\n  float LdotH;                  // cos angle between light direction and half vector\n  float VdotH;                  // cos angle between view direction and half vector\n  float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\n  float metalness;              // metallic value at the surface\n  vec3 reflectance0;            // full reflectance color (normal incidence angle)\n  vec3 reflectance90;           // reflectance color at grazing angle\n  float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\n  vec3 diffuseColor;            // color contribution from diffuse lighting\n  vec3 specularColor;           // color contribution from specular lighting\n  vec3 n;                       // normal at surface point\n  vec3 v;                       // vector from surface point to camera\n};\n\nconst float M_PI = 3.141592653589793;\nconst float c_MinRoughness = 0.04;\n\nvec4 SRGBtoLINEAR(vec4 srgbIn)\n{\n#ifdef MANUAL_SRGB\n#ifdef SRGB_FAST_APPROXIMATION\n  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\n#else // SRGB_FAST_APPROXIMATION\n  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\n  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\n#endif //SRGB_FAST_APPROXIMATION\n  return vec4(linOut,srgbIn.w);;\n#else //MANUAL_SRGB\n  return srgbIn;\n#endif //MANUAL_SRGB\n}\n\n// Find the normal for this fragment, pulling either from a predefined normal map\n// or from the interpolated mesh normal and tangent attributes.\nvec3 getNormal()\n{\n  // Retrieve the tangent space matrix\n#ifndef HAS_TANGENTS\n  vec3 pos_dx = dFdx(pbr_vPosition);\n  vec3 pos_dy = dFdy(pbr_vPosition);\n  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));\n  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));\n  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\n#ifdef HAS_NORMALS\n  vec3 ng = normalize(pbr_vNormal);\n#else\n  vec3 ng = cross(pos_dx, pos_dy);\n#endif\n\n  t = normalize(t - ng * dot(ng, t));\n  vec3 b = normalize(cross(ng, t));\n  mat3 tbn = mat3(t, b, ng);\n#else // HAS_TANGENTS\n  mat3 tbn = pbr_vTBN;\n#endif\n\n#ifdef HAS_NORMALMAP\n  vec3 n = texture(pbr_normalSampler, pbr_vUV).rgb;\n  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(pbrMaterial.normalScale, pbrMaterial.normalScale, 1.0)));\n#else\n  // The tbn matrix is linearly interpolated, so we need to re-normalize\n  vec3 n = normalize(tbn[2].xyz);\n#endif\n\n  return n;\n}\n\n// Calculation of the lighting contribution from an optional Image Based Light source.\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\n// See our README.md on Environment Maps [3] for additional discussion.\n#ifdef USE_IBL\nvec3 getIBLContribution(PBRInfo pbrInfo, vec3 n, vec3 reflection)\n{\n  float mipCount = 9.0; // resolution of 512x512\n  float lod = (pbrInfo.perceptualRoughness * mipCount);\n  // retrieve a scale and bias to F0. See [1], Figure 3\n  vec3 brdf = SRGBtoLINEAR(texture(pbr_brdfLUT,\n    vec2(pbrInfo.NdotV, 1.0 - pbrInfo.perceptualRoughness))).rgb;\n  vec3 diffuseLight = SRGBtoLINEAR(texture(pbr_diffuseEnvSampler, n)).rgb;\n\n#ifdef USE_TEX_LOD\n  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection, lod)).rgb;\n#else\n  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection)).rgb;\n#endif\n\n  vec3 diffuse = diffuseLight * pbrInfo.diffuseColor;\n  vec3 specular = specularLight * (pbrInfo.specularColor * brdf.x + brdf.y);\n\n  // For presentation, this allows us to disable IBL terms\n  diffuse *= pbrMaterial.scaleIBLAmbient.x;\n  specular *= pbrMaterial.scaleIBLAmbient.y;\n\n  return diffuse + specular;\n}\n#endif\n\n// Basic Lambertian diffuse\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\n// See also [1], Equation 1\nvec3 diffuse(PBRInfo pbrInfo)\n{\n  return pbrInfo.diffuseColor / M_PI;\n}\n\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\n// Implementation of fresnel from [4], Equation 15\nvec3 specularReflection(PBRInfo pbrInfo)\n{\n  return pbrInfo.reflectance0 +\n    (pbrInfo.reflectance90 - pbrInfo.reflectance0) *\n    pow(clamp(1.0 - pbrInfo.VdotH, 0.0, 1.0), 5.0);\n}\n\n// This calculates the specular geometric attenuation (aka G()),\n// where rougher material will reflect less light back to the viewer.\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\n// alphaRoughness as input as originally proposed in [2].\nfloat geometricOcclusion(PBRInfo pbrInfo)\n{\n  float NdotL = pbrInfo.NdotL;\n  float NdotV = pbrInfo.NdotV;\n  float r = pbrInfo.alphaRoughness;\n\n  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\n  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\n  return attenuationL * attenuationV;\n}\n\n// The following equation(s) model the distribution of microfacet normals across\n// the area being drawn (aka D())\n// Implementation from \"Average Irregularity Representation of a Roughened Surface\n// for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes\n// from EPIC Games [1], Equation 3.\nfloat microfacetDistribution(PBRInfo pbrInfo)\n{\n  float roughnessSq = pbrInfo.alphaRoughness * pbrInfo.alphaRoughness;\n  float f = (pbrInfo.NdotH * roughnessSq - pbrInfo.NdotH) * pbrInfo.NdotH + 1.0;\n  return roughnessSq / (M_PI * f * f);\n}\n\nvoid PBRInfo_setAmbientLight(inout PBRInfo pbrInfo) {\n  pbrInfo.NdotL = 1.0;\n  pbrInfo.NdotH = 0.0;\n  pbrInfo.LdotH = 0.0;\n  pbrInfo.VdotH = 1.0;\n}\n\nvoid PBRInfo_setDirectionalLight(inout PBRInfo pbrInfo, vec3 lightDirection) {\n  vec3 n = pbrInfo.n;\n  vec3 v = pbrInfo.v;\n  vec3 l = normalize(lightDirection);             // Vector from surface point to light\n  vec3 h = normalize(l+v);                        // Half vector between both l and v\n\n  pbrInfo.NdotL = clamp(dot(n, l), 0.001, 1.0);\n  pbrInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\n  pbrInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\n  pbrInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\n}\n\nvoid PBRInfo_setPointLight(inout PBRInfo pbrInfo, PointLight pointLight) {\n  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);\n  PBRInfo_setDirectionalLight(pbrInfo, light_direction);\n}\n\nvec3 calculateFinalColor(PBRInfo pbrInfo, vec3 lightColor) {\n  // Calculate the shading terms for the microfacet specular shading model\n  vec3 F = specularReflection(pbrInfo);\n  float G = geometricOcclusion(pbrInfo);\n  float D = microfacetDistribution(pbrInfo);\n\n  // Calculation of analytical lighting contribution\n  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInfo);\n  vec3 specContrib = F * G * D / (4.0 * pbrInfo.NdotL * pbrInfo.NdotV);\n  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\n  return pbrInfo.NdotL * lightColor * (diffuseContrib + specContrib);\n}\n\nvec4 pbr_filterColor(vec4 colorUnused)\n{\n  // The albedo may be defined from a base texture or a flat color\n#ifdef HAS_BASECOLORMAP\n  vec4 baseColor = SRGBtoLINEAR(texture(pbr_baseColorSampler, pbr_vUV)) * pbrMaterial.baseColorFactor;\n#else\n  vec4 baseColor = pbrMaterial.baseColorFactor;\n#endif\n\n#ifdef ALPHA_CUTOFF\n  if (baseColor.a < pbrMaterial.alphaCutoff) {\n    discard;\n  }\n#endif\n\n  vec3 color = vec3(0, 0, 0);\n\n  if(pbrMaterial.unlit){\n    color.rgb = baseColor.rgb;\n  }\n  else{\n    // Metallic and Roughness material properties are packed together\n    // In glTF, these factors can be specified by fixed scalar values\n    // or from a metallic-roughness map\n    float perceptualRoughness = pbrMaterial.metallicRoughnessValues.y;\n    float metallic = pbrMaterial.metallicRoughnessValues.x;\n#ifdef HAS_METALROUGHNESSMAP\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\n    vec4 mrSample = texture(pbr_metallicRoughnessSampler, pbr_vUV);\n    perceptualRoughness = mrSample.g * perceptualRoughness;\n    metallic = mrSample.b * metallic;\n#endif\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\n    metallic = clamp(metallic, 0.0, 1.0);\n    // Roughness is authored as perceptual roughness; as is convention,\n    // convert to material roughness by squaring the perceptual roughness [2].\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\n\n    vec3 f0 = vec3(0.04);\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\n    diffuseColor *= 1.0 - metallic;\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\n\n    // Compute reflectance.\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n\n    // For typical incident reflectance range (between 4% to 100%) set the grazing\n    // reflectance to 100% for typical fresnel effect.\n    // For very low reflectance range on highly diffuse objects (below 4%),\n    // incrementally reduce grazing reflecance to 0%.\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\n    vec3 specularEnvironmentR0 = specularColor.rgb;\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\n\n    vec3 n = getNormal();                          // normal at surface point\n    vec3 v = normalize(pbrProjection.camera - pbr_vPosition);  // Vector from surface point to camera\n\n    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);\n    vec3 reflection = -normalize(reflect(v, n));\n\n    PBRInfo pbrInfo = PBRInfo(\n      0.0, // NdotL\n      NdotV,\n      0.0, // NdotH\n      0.0, // LdotH\n      0.0, // VdotH\n      perceptualRoughness,\n      metallic,\n      specularEnvironmentR0,\n      specularEnvironmentR90,\n      alphaRoughness,\n      diffuseColor,\n      specularColor,\n      n,\n      v\n    );\n\n\n#ifdef USE_LIGHTS\n    // Apply ambient light\n    PBRInfo_setAmbientLight(pbrInfo);\n    color += calculateFinalColor(pbrInfo, lighting.ambientColor);\n\n    // Apply directional light\n    for(int i = 0; i < lighting.directionalLightCount; i++) {\n      if (i < lighting.directionalLightCount) {\n        PBRInfo_setDirectionalLight(pbrInfo, lighting_getDirectionalLight(i).direction);\n        color += calculateFinalColor(pbrInfo, lighting_getDirectionalLight(i).color);\n      }\n    }\n\n    // Apply point light\n    for(int i = 0; i < lighting.pointLightCount; i++) {\n      if (i < lighting.pointLightCount) {\n        PBRInfo_setPointLight(pbrInfo, lighting_getPointLight(i));\n        float attenuation = getPointLightAttenuation(lighting_getPointLight(i), distance(lighting_getPointLight(i).position, pbr_vPosition));\n        color += calculateFinalColor(pbrInfo, lighting_getPointLight(i).color / attenuation);\n      }\n    }\n#endif\n\n    // Calculate lighting contribution from image based lighting source (IBL)\n#ifdef USE_IBL\n    if (pbrMaterial.IBLenabled) {\n      color += getIBLContribution(pbrInfo, n, reflection);\n    }\n#endif\n\n // Apply optional PBR terms for additional (optional) shading\n#ifdef HAS_OCCLUSIONMAP\n    if (pbrMaterial.occlusionMapEnabled) {\n      float ao = texture(pbr_occlusionSampler, pbr_vUV).r;\n      color = mix(color, color * ao, pbrMaterial.occlusionStrength);\n    }\n#endif\n\n#ifdef HAS_EMISSIVEMAP\n    if (pbrMaterial.emissiveMapEnabled) {\n      vec3 emissive = SRGBtoLINEAR(texture(pbr_emissiveSampler, pbr_vUV)).rgb * pbrMaterial.emissiveFactor;\n      color += emissive;\n    }\n#endif\n\n    // This section uses mix to override final color for reference app visualization\n    // of various parameters in the lighting equation.\n#ifdef PBR_DEBUG\n    // TODO: Figure out how to debug multiple lights\n\n    // color = mix(color, F, pbr_scaleFGDSpec.x);\n    // color = mix(color, vec3(G), pbr_scaleFGDSpec.y);\n    // color = mix(color, vec3(D), pbr_scaleFGDSpec.z);\n    // color = mix(color, specContrib, pbr_scaleFGDSpec.w);\n\n    // color = mix(color, diffuseContrib, pbr_scaleDiffBaseMR.x);\n    color = mix(color, baseColor.rgb, pbrMaterial.scaleDiffBaseMR.y);\n    color = mix(color, vec3(metallic), pbrMaterial.scaleDiffBaseMR.z);\n    color = mix(color, vec3(perceptualRoughness), pbrMaterial.scaleDiffBaseMR.w);\n#endif\n\n  }\n\n  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);\n}\n",defines:{LIGHTING_FRAGMENT:!0,HAS_NORMALMAP:!1,HAS_EMISSIVEMAP:!1,HAS_OCCLUSIONMAP:!1,HAS_BASECOLORMAP:!1,HAS_METALROUGHNESSMAP:!1,ALPHA_CUTOFF:!1,USE_IBL:!1,PBR_DEBUG:!1},getUniforms:function(e){return e},uniformTypes:{unlit:"i32",baseColorMapEnabled:"i32",baseColorFactor:"vec4<f32>",normalMapEnabled:"i32",normalScale:"f32",emissiveMapEnabled:"i32",emissiveFactor:"vec3<f32>",metallicRoughnessValues:"vec2<f32>",metallicRoughnessMapEnabled:"i32",occlusionMapEnabled:"i32",occlusionStrength:"f32",alphaCutoffEnabled:"i32",alphaCutoff:"f32",IBLenabled:"i32",scaleIBLAmbient:"vec2<f32>",scaleDiffBaseMR:"vec4<f32>",scaleFGDSpec:"vec4<f32>"}},zt=function(e){function n(n){var t,r,a=n.device;(t=e.call(this)||this).scenes=[],t.center=[0,0,0],t.vantage=[0,0,0],t.time=0,t.device=a,t.imageTexture=new Xe(a,{data:(0,Ge.Dt)("./image.jpg"),flipY:!0}),t.shaderPassMap=(r={},Object.entries(i).forEach((function(e){var n=e[0],t=e[1];t.passes&&!n.startsWith("_")&&(r[n]=t)})),r),t.setShaderPasses([]);var s=["No effect"].concat(Object.keys(t.shaderPassMap));return t.selector=function(e,n,t){var i=document.createElement("select");i.id="selector",e.appendChild(i),i.style.cssText="position: absolute; top: 0; right: 0; margin: 20px; z-index: 1000;";for(var r,a=(0,o.A)(n);!(r=a()).done;){var s=r.value,l=document.createElement("option");l.value=s,l.text=s,l.id=s,i.appendChild(l)}return null==i||i.addEventListener("change",(function(e){return t(e.target.value)})),i}(document.body,s,(function(e){var n=t.shaderPassMap[e]?[t.shaderPassMap[e]]:[];t.setShaderPasses(n)})),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){var e;null==(e=this.shaderPassRenderer)||e.destroy()},t.onRender=function(e){e.device;this.shaderPassRenderer.renderToScreen({sourceTexture:this.imageTexture})},t.setShaderPasses=function(e){var n;null==(n=this.shaderPassRenderer)||n.destroy(),this.shaderPassRenderer=new ot(this.device,{shaderPasses:e})},n}(an);zt.info='<div class="contents">Copyright 2011 <a href="http://madebyevan.com">Evan Wallace</a>\n  <br><br>This application is powered by <a href="http://evanw.github.com/glfx.js/">glfx.js</a>, \n  an open-source image effect library that uses WebGL.&nbsp; The source code for this application is \n  also <a href="http://github.com/evanw/webgl-filter/">available on GitHub</a>.\n</div>\n';var Kt=function(e){function n(n){var t,i=n.device;t=e.call(this)||this;var r=new Float32Array([0,0,-.5,-.5,1,0,0,.5,-.5,0,1,0,0,.5,0,0,1]);return t.interleavedBuffer=i.createBuffer(r),t.model=new ze(i,{id:"triangle",source:"struct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragColor : vec3<f32>\n};\n\n@vertex\nfn vertexMain(@location(0) position : vec2<f32>, @location(1) color : vec3<f32>) -> VertexOutput {\n  var output : VertexOutput;\n  output.Position = vec4<f32>(position.x, position.y, 0.0, 1.0);\n  output.fragColor = color;\n  return output;\n}\n\n@fragment\nfn fragmentMain(@location(0) fragColor: vec3<f32>) -> @location(0) vec4<f32> {\n  return vec4<f32>(fragColor, 1.0);\n}\n",vs:"#version 300 es\n\nin vec2 position;\nin vec3 color;\n\nout vec3 vColor;\n\nvoid main() {\n  vColor = color;\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n",fs:"#version 300 es\n\nin vec3 vColor;\nout vec4 fragColor;\nvoid main() {\n  fragColor = vec4(vColor, 1.0);\n}\n",bufferLayout:[{name:"vertexData",byteStride:20,attributes:[{attribute:"position",format:"float32x2",byteOffset:8},{attribute:"color",format:"float32x3",byteOffset:16}]}],attributes:{vertexData:t.interleavedBuffer},vertexCount:3}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.model.destroy(),this.interleavedBuffer.destroy()},t.onRender=function(e){var n=e.device.beginRenderPass({clearColor:[0,0,0,1]});this.model.draw(n),n.end()},n}(an);Kt.info="\nHave to start somewhere...\n";var Yt=function(e){function n(n){var t,i=n.device;return(t=e.call(this)||this).model=new ze(i,{source:"@vertex\nfn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> @builtin(position) vec4<f32> {\n  var positions = array<vec2<f32>, 3>(vec2(0.0, 0.5), vec2(-0.5, -0.5), vec2(0.5, -0.5));\n  return vec4<f32>(positions[vertexIndex], 0.0, 1.0);\n}\n\n@fragment\nfn fragmentMain() -> @location(0) vec4<f32> {\n  return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n}\n",vs:"#version 300 es\nconst vec2 pos[3] = vec2[3](vec2(0.0f, 0.5f), vec2(-0.5f, -0.5f), vec2(0.5f, -0.5f));\nvoid main() {\n  gl_Position = vec4(pos[gl_VertexID], 0.0, 1.0);\n}\n",fs:"#version 300 es\nprecision highp float;\nlayout(location = 0) out vec4 outColor;\nvoid main() {\n    outColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n",topology:"triangle-list",vertexCount:3,shaderLayout:{attributes:[],bindings:[]},parameters:{depthFormat:"depth24plus"}}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.model.destroy()},t.onRender=function(e){var n=e.device.beginRenderPass({clearColor:[1,1,1,1]});this.model.draw(n),n.end()},n}(an);Yt.info="<p>Have to start somewhere...</p>\n";var qt={uniformTypes:{mvpMatrix:"mat4x4<f32>"}},Zt=[0,0,-4],Qt=function(e){function n(n){var t,i=n.device;(t=e.call(this)||this).mvpMatrix=new ln.k,t.viewMatrix=(new ln.k).lookAt({eye:Zt}),t.uniformStore=new h({app:qt});var r=new Xe(i,{usage:C.g.TEXTURE|C.g.RENDER_ATTACHMENT|C.g.COPY_DST,data:(0,Ge.Dt)("vis-logo.png"),flipY:!0,mipmaps:!0,sampler:i.createSampler({minFilter:"linear",magFilter:"linear",mipmapFilter:"linear"})});return t.model=new ze(i,{id:"rotating-cube",source:"struct Uniforms {\n  modelViewProjectionMatrix : mat4x4<f32>,\n};\n\n@group(0) @binding(0) var<uniform> app : Uniforms;\n@group(0) @binding(1) var uTexture : texture_2d<f32>;\n@group(0) @binding(2) var uTextureSampler : sampler;\n\nstruct VertexInputs {\n  // CUBE GEOMETRY\n  @location(0) positions : vec4<f32>,\n  @location(1) texCoords : vec2<f32>\n};\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n  @location(1) fragPosition: vec4<f32>,\n}\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs : FragmentInputs;\n  outputs.Position = app.modelViewProjectionMatrix * inputs.positions;\n  outputs.fragUV = inputs.texCoords;\n  outputs.fragPosition = 0.5 * (inputs.positions + vec4(1.0, 1.0, 1.0, 1.0));\n  return outputs;\n}\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  // return inputs.fragPosition;\n  return textureSample(uTexture, uTextureSampler, inputs.fragUV);\n}\n",vs:"#version 300 es\n#define SHADER_NAME cube-vs\n\nuniform appUniforms {\n  mat4 modelViewProjectionMatrix;\n} app;\n\nlayout(location=0) in vec3 positions;\nlayout(location=1) in vec2 texCoords;\n\nout vec2 fragUV;\nout vec4 fragPosition;\n\nvoid main() {\n  gl_Position = app.modelViewProjectionMatrix * vec4(positions, 1.0);\n  fragUV = texCoords;\n  fragPosition = 0.5 * (vec4(positions, 1.) + vec4(1., 1., 1., 1.));\n}\n",fs:"#version 300 es\n#define SHADER_NAME cube-fs\nprecision highp float;\n\nuniform sampler2D uTexture;\n\nuniform appUniforms {\n  mat4 modelViewProjectionMatrix;\n} app;\n\nin vec2 fragUV;\nin vec4 fragPosition;\n\nlayout (location=0) out vec4 fragColor;\n\nvoid main() {\n  fragColor = fragPosition;\n  fragColor = texture(uTexture, vec2(fragUV.x, 1.0 - fragUV.y));\n}\n",geometry:new qe({indices:!1}),bindings:{app:t.uniformStore.getManagedUniformBuffer(i,"app"),uTexture:r},parameters:{depthWriteEnabled:!0,depthCompare:"less-equal"}}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.model.destroy(),this.uniformStore.destroy()},t.onRender=function(e){var n=e.device,t=e.aspect,i=e.tick;this.mvpMatrix.perspective({fovy:Math.PI/3,aspect:t}).multiplyRight(this.viewMatrix).rotateX(.01*i).rotateY(.013*i),this.uniformStore.setUniforms({app:{mvpMatrix:this.mvpMatrix}});var r=n.beginRenderPass({clearColor:[0,0,0,1],clearDepth:1});this.model.draw(r),r.end()},n}(an);Qt.info="<p>\nDrawing a textured cube\n</p>\n\n<p>\nRendered using the luma.gl <code>Model</code>, <code>CubeGeometry</code> and <code>AnimationLoop</code> classes.\n</p>\n";var Jt=function(e){function n(n){var t,i=n.device;return(t=e.call(this)||this).uniformBuffer1=i.createBuffer({id:"uniforms-1",usage:s.h.UNIFORM|s.h.COPY_DST,byteLength:64}),t.uniformBuffer2=i.createBuffer({id:"uniforms-2",usage:s.h.UNIFORM|s.h.COPY_DST,byteLength:64}),t.cubeModel=new ze(i,{id:"cube",source:"struct Uniforms {\n  modelViewProjectionMatrix : mat4x4<f32>,\n};\n@binding(0) @group(0) var<uniform> app : Uniforms;\n\nstruct VertexInputs {\n  @location(0) positions : vec4<f32>,\n  @location(1) texCoords : vec2<f32>\n};\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n  @location(1) fragPosition: vec4<f32>,\n}\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs : FragmentInputs;\n  outputs.Position = app.modelViewProjectionMatrix * inputs.positions;\n  outputs.fragUV = inputs.texCoords;\n  outputs.fragPosition = 0.5 * (inputs.positions + vec4(1.0, 1.0, 1.0, 1.0));\n  return outputs;\n}\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  return inputs.fragPosition;\n}\n",vs:"#version 300 es\n#define SHADER_NAME cube-vs\n\nuniform appUniforms {\n  mat4 modelViewProjectionMatrix;\n} app;\n\nlayout(location=0) in vec3 positions;\nlayout(location=1) in vec2 texCoords;\n\nout vec2 fragUV;\nout vec4 fragPosition;\n\nvoid main() {\n  gl_Position = app.modelViewProjectionMatrix * vec4(positions, 1.0);\n  fragUV = texCoords;\n  fragPosition = vec4(positions, 1.);\n}\n",fs:"#version 300 es\n#define SHADER_NAME cube-fs\nprecision highp float;\n\nuniform appUniforms {\n  mat4 modelViewProjectionMatrix;\n} app;\n\nin vec2 fragUV;\nin vec4 fragPosition;\n\nlayout (location=0) out vec4 fragColor;\n\nvoid main() {\n  fragColor = fragPosition;\n}\n",geometry:new qe({indices:!1}),parameters:{depthWriteEnabled:!0,depthCompare:"less",depthFormat:"depth24plus",cullMode:"back"},bindings:{app:t.uniformBuffer1}}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.cubeModel.destroy(),this.uniformBuffer1.destroy(),this.uniformBuffer2.destroy()},t.onRender=function(e){var n,t=e.device,i=new ln.k,r=new ln.k,o=new ln.k,a=null==(n=t.canvasContext)?void 0:n.getAspect(),s=Date.now()/1e3;i.perspective({fovy:2*Math.PI/5,aspect:a,near:1,far:100}),r.identity().translate([-2,0,-7]).rotateAxis(1,[Math.sin(s),Math.cos(s),0]),o.copy(r).multiplyLeft(i),this.uniformBuffer1.write(new Float32Array(o)),r.identity().translate([2,0,-7]).rotateAxis(1,[Math.cos(s),Math.sin(s),0]),o.copy(r).multiplyLeft(i),this.uniformBuffer2.write(new Float32Array(o));var l=t.beginRenderPass({clearColor:[0,0,0,1]});this.cubeModel.setBindings({app:this.uniformBuffer1}),this.cubeModel.draw(l),this.cubeModel.setBindings({app:this.uniformBuffer2}),this.cubeModel.draw(l),l.end()},n}(an),$t=function(e){function n(n){var t,i=n.device;return(t=e.call(this)||this).uniformBuffer=i.createBuffer({id:"uniforms",usage:s.h.UNIFORM|s.h.COPY_DST,byteLength:1024}),t.cubeModel=new ze(i,{id:"cube",source:"struct Uniforms {\n  modelViewProjectionMatrix : array<mat4x4<f32>, 16>,\n};\n\n@binding(0) @group(0) var<uniform> app : Uniforms;\n\nstruct VertexInputs {\n  @builtin(instance_index) instanceIdx : u32,\n  // CUBE GEOMETRY\n  @location(0) positions : vec4<f32>,\n  @location(1) texCoords : vec2<f32>\n}\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n  @location(1) fragPosition: vec4<f32>,\n}\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs : FragmentInputs;\n  outputs.Position = app.modelViewProjectionMatrix[inputs.instanceIdx] * inputs.positions;\n  outputs.fragUV = inputs.texCoords;\n  outputs.fragPosition = 0.5 * (inputs.positions + vec4<f32>(1.0, 1.0, 1.0, 1.0));\n  return outputs;\n}\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  return inputs.fragPosition;\n}\n",vs:"#version 300 es\n#define SHADER_NAME cube-vs\n\nuniform appUniforms {\n  mat4 modelViewProjectionMatrix[16];\n} app;\n\n// CUBE GEOMETRY\nlayout(location=0) in vec3 positions;\nlayout(location=1) in vec2 texCoords;\n\nout vec2 fragUV;\nout vec4 fragPosition;\n\nvoid main() {\n  gl_Position = app.modelViewProjectionMatrix[gl_InstanceID] * vec4(positions, 1.0);\n  fragUV = texCoords;\n  fragPosition = vec4(positions, 1.);\n}\n",fs:"#version 300 es\n#define SHADER_NAME cube-fs\nprecision highp float;\nin vec2 fragUV;\nin vec4 fragPosition;\n\nlayout (location=0) out vec4 fragColor;\n\nvoid main() {\n  fragColor = fragPosition;\n}\n",geometry:new qe({indices:!1}),instanceCount:16,parameters:{depthWriteEnabled:!0,depthCompare:"less",depthFormat:"depth24plus",cullMode:"back"},bindings:{app:t.uniformBuffer}}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(e){this.uniformBuffer.destroy(),this.cubeModel.destroy()},t.onRender=function(e){var n,t=e.device,i=new ln.k,r=null==(n=t.canvasContext)?void 0:n.getAspect(),o=Date.now()/1e3;i.perspective({fovy:2*Math.PI/5,aspect:r,near:1,far:100});var a=function(e,n){for(var t=(new ln.k).translate([0,0,-12]),i=new ln.k,r=0,o=0,a=0;a<4;a++)for(var s=0;s<4;s++)i.copy(ei[r]).rotateAxis(1,[Math.sin((a+.5)*n),Math.cos((s+.5)*n),0]).multiplyLeft(t).multiplyLeft(e),ii.set(i,o),r++,o+=16;return ii}(i,o);this.uniformBuffer.write(a);var s=t.beginRenderPass();this.cubeModel.draw(s),s.end()},n}(an);$t.info="Instanced cubes drawn using luma.gl's high-level API.\n  ";for(var ei=[],ni=0;ni<4;ni++)for(var ti=0;ti<4;ti++)ei.push((new ln.k).translate([4*(ni-2+.5),4*(ti-2+.5),0]));var ii=new Float32Array(256);var ri={name:"color",source:"\n  ",vs:"out vec3 color_vColor;\n\nvoid color_setColor(vec3 color) {\n  color_vColor = color;\n}\n  ",fs:"in vec3 color_vColor;\n\nvec3 color_getColor() {\n  return color_vColor;\n}\n  "},oi=function(e){function n(n){var t,i=n.device;return(t=e.call(this)||this).positionBuffer=i.createBuffer(new Float32Array([-.2,-.2,.2,-.2,0,.2])),t.colorBuffer=i.createBuffer(new Float32Array([1,0,0,0,1,0,0,0,1,1,1,0])),t.offsetBuffer=i.createBuffer(new Float32Array([.5,.5,-.5,.5,.5,-.5,-.5,-.5])),t.model=new ze(i,{source:"type VertexInputs {\n  @location(0) position: vec2<f32>;\n  @location(1) instanceColor: vec3<f32>;\n  @location(2) instanceOffset: vec2<f32>;\n};  \n\ntype FragmentInputs {\n  Position: vec4<f32>;\n  color: vec4<f32>;\n}\n\n@vertexMain\nfn vertexMain(inputs: VertexInputs) -> [[builtin(position)]] vec4<f32> {\n  color_setColor(inputs.instanceColor);\n  return vec4<f32>(inputs.position + inputs.instanceOffset, 0.0, 1.0);\n}\n\n@fragmentMain\nfn fragmentMain(inputs: FragmentInputs) -> [[location(0)]] vec4<f32 {\n  return vec4<f32>(color_getColor(), 1.0);\n}\n",vs:"#version 300 es\nin vec2 position;\nin vec3 instanceColor;\nin vec2 instanceOffset;\n\nvoid main() {\n  color_setColor(instanceColor);\n  gl_Position = vec4(position + instanceOffset, 0.0, 1.0);\n}\n",fs:"#version 300 es\nout vec4 fragColor;\nvoid main() {\n  fragColor = vec4(color_getColor(), 1.0);\n}\n",modules:[ri],bufferLayout:[{name:"position",format:"float32x2"},{name:"instanceColor",format:"float32x3",stepMode:"instance"},{name:"instanceOffset",format:"float32x2",stepMode:"instance"}],attributes:{position:t.positionBuffer,instanceColor:t.colorBuffer,instanceOffset:t.offsetBuffer},vertexCount:3,instanceCount:4}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.model.destroy(),this.positionBuffer.destroy(),this.colorBuffer.destroy(),this.offsetBuffer.destroy()},t.onRender=function(e){var n=e.device.beginRenderPass({clearColor:[0,0,0,1]});this.model.draw(n),n.end()},n}(an),ai=t(9877),si=function(){function e(e){void 0===e&&(e={}),this.matrix=new ln.k,this.display=!0,this.position=new kn.P,this.rotation=new kn.P,this.scale=new kn.P(1,1,1),this.userData={},this.props={};var n=e.id;this.id=n||Re(this.constructor.name),this._setScenegraphNodeProps(e)}var n=e.prototype;return n.getBounds=function(){return null},n.destroy=function(){},n.delete=function(){this.destroy()},n.setProps=function(e){return this._setScenegraphNodeProps(e),this},n.toString=function(){return"{type: ScenegraphNode, id: "+this.id+")}"},n.setPosition=function(e){return this.position=e,this},n.setRotation=function(e){return this.rotation=e,this},n.setScale=function(e){return this.scale=e,this},n.setMatrix=function(e,n){void 0===n&&(n=!0),n?this.matrix.copy(e):this.matrix=e},n.setMatrixComponents=function(e){var n=e.position,t=e.rotation,i=e.scale,r=e.update,o=void 0===r||r;return n&&this.setPosition(n),t&&this.setRotation(t),i&&this.setScale(i),o&&this.updateMatrix(),this},n.updateMatrix=function(){var e=this.position,n=this.rotation,t=this.scale;return this.matrix.identity(),this.matrix.translate(e),this.matrix.rotateXYZ(n),this.matrix.scale(t),this},n.update=function(e){void 0===e&&(e={});var n=e,t=n.position,i=n.rotation,r=n.scale;return t&&this.setPosition(t),i&&this.setRotation(i),r&&this.setScale(r),this.updateMatrix(),this},n.getCoordinateUniforms=function(e,n){n=n||this.matrix;var t=new ln.k(e).multiplyRight(n),i=t.invert(),r=i.transpose();return{viewMatrix:e,modelMatrix:n,objectMatrix:n,worldMatrix:t,worldInverseMatrix:i,worldInverseTransposeMatrix:r}},n._setScenegraphNodeProps=function(e){"position"in e&&this.setPosition(e.position),"rotation"in e&&this.setRotation(e.rotation),"scale"in e&&this.setScale(e.scale),"matrix"in e&&this.setMatrix(e.matrix),Object.assign(this.props,e)},e}(),li=function(e){function n(n){var t;void 0===n&&(n={});var i=(n=Array.isArray(n)?{children:n}:n).children,r=void 0===i?[]:i;return l.R.assert(r.every((function(e){return e instanceof si})),"every child must an instance of ScenegraphNode"),(t=e.call(this,n)||this).children=r,t}(0,a.A)(n,e);var t=n.prototype;return t.getBounds=function(){var e=[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]];return this.traverse((function(n,t){var i=t.worldMatrix,r=n.getBounds();if(r){var o=r[0],a=r[1],s=new kn.P(o).add(a).divide([2,2,2]);i.transformAsPoint(s,s);var l=new kn.P(a).subtract(o).divide([2,2,2]);i.transformAsVector(l,l);for(var u=0;u<8;u++)for(var c=new kn.P(1&u?-1:1,2&u?-1:1,4&u?-1:1).multiply(l).add(s),f=0;f<3;f++)e[0][f]=Math.min(e[0][f],c[f]),e[1][f]=Math.max(e[1][f],c[f])}})),Number.isFinite(e[0][0])?e:null},t.destroy=function(){this.children.forEach((function(e){return e.destroy()})),this.removeAll(),e.prototype.destroy.call(this)},t.add=function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];for(var i=0,r=n;i<r.length;i++){var o=r[i];Array.isArray(o)?this.add.apply(this,o):this.children.push(o)}return this},t.remove=function(e){var n=this.children,t=n.indexOf(e);return t>-1&&n.splice(t,1),this},t.removeAll=function(){return this.children=[],this},t.traverse=function(e,t){for(var i,r=(void 0===t?{}:t).worldMatrix,a=void 0===r?new ln.k:r,s=new ln.k(a).multiplyRight(this.matrix),l=(0,o.A)(this.children);!(i=l()).done;){var u=i.value;u instanceof n?u.traverse(e,{worldMatrix:s}):e(u,{worldMatrix:s})}},n}(si),ui=t(1633),ci={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},fi={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},pi=function(){function e(e){this.name="unnamed",this.startTime=0,this.playing=!0,this.speed=1,this.channels=[],Object.assign(this,e)}return e.prototype.animate=function(e){if(this.playing){var n=(e/1e3-this.startTime)*this.speed;this.channels.forEach((function(e){var t=e.sampler,i=e.target,r=e.path;!function(e,n,t,i){var r=n.input,o=n.interpolation,a=n.output,s=r[r.length-1],u=e%s,c=r.findIndex((function(e){return e>=u})),f=Math.max(0,c-1);if(!Array.isArray(t[i]))switch(i){case"translation":t[i]=[0,0,0];break;case"rotation":t[i]=[0,0,0,1];break;case"scale":t[i]=[1,1,1];break;default:l.R.warn("Bad animation path "+i)()}var p=r[f],d=r[c];switch(o){case"STEP":!function(e,n,t){for(var i=0;i<t.length;i++)e[n][i]=t[i]}(t,i,a[f]);break;case"LINEAR":if(d>p){var _=(u-p)/(d-p);!function(e,n,t,i,r){if("rotation"===n){mi.slerp({start:t,target:i,ratio:r});for(var o=0;o<mi.length;o++)e[n][o]=mi[o]}else for(var a=0;a<t.length;a++)e[n][a]=r*i[a]+(1-r)*t[a]}(t,i,a[f],a[c],_)}break;case"CUBICSPLINE":if(d>p){var h=(u-p)/(d-p),m=d-p;!function(e,n,t){for(var i=t.p0,r=t.outTangent0,o=t.inTangent1,a=t.p1,s=t.tDiff,l=t.ratio,u=0;u<e[n].length;u++){var c=r[u]*s,f=o[u]*s;e[n][u]=(2*Math.pow(l,3)-3*Math.pow(l,2)+1)*i[u]+(Math.pow(l,3)-2*Math.pow(l,2)+l)*c+(-2*Math.pow(l,3)+3*Math.pow(l,2))*a[u]+(Math.pow(l,3)-Math.pow(l,2))*f}}(t,i,{p0:a[3*f+1],outTangent0:a[3*f+2],inTangent1:a[3*c+0],p1:a[3*c+1],tDiff:m,ratio:h})}break;default:l.R.warn("Interpolation "+o+" not supported")()}}(n,t,i,r),function(e,n){n.matrix.identity(),e.translation&&n.matrix.translate(e.translation);if(e.rotation){var t=hi.fromQuaternion(e.rotation);n.matrix.multiplyRight(t)}e.scale&&n.matrix.scale(e.scale)}(i,i._node)}))}},e}(),di=function(){function e(e){this.animations=e.animations.map((function(n,t){var i=n.name||"Animation-"+t,r=n.samplers.map((function(n){var t=n.input,i=n.interpolation,r=void 0===i?"LINEAR":i,o=n.output;return{input:_i(e.accessors[t]),interpolation:r,output:_i(e.accessors[o])}})),o=n.channels.map((function(n){var t=n.sampler,i=n.target;return{sampler:r[t],target:e.nodes[i.node],path:i.path}}));return new pi({name:i,channels:o})}))}var n=e.prototype;return n.animate=function(e){this.setTime(e)},n.setTime=function(e){this.animations.forEach((function(n){return n.animate(e)}))},n.getAnimations=function(){return this.animations},e}();function _i(e){if(!e._animation){var n=fi[e.componentType],t=ci[e.type],i=t*e.count,r=e.bufferView.data,o=new n(r.buffer,r.byteOffset+(e.byteOffset||0),i);if(1===t)e._animation=Array.from(o);else{for(var a=[],s=0;s<o.length;s+=t)a.push(Array.from(o.slice(s,s+t)));e._animation=a}}return e._animation}var hi=new ln.k;var mi=new ui.P;var vi=t(8587),gi=function(e){function n(n){var t;return(t=e.call(this,n)||this).bounds=null,t.model=n.model,t.managedResources=n.managedResources||[],t.bounds=n.bounds||null,t.setProps(n),t}(0,a.A)(n,e);var t=n.prototype;return t.destroy=function(){this.model&&(this.model.destroy(),this.model=null),this.managedResources.forEach((function(e){return e.destroy()})),this.managedResources=[]},t.getBounds=function(){return this.bounds},t.draw=function(e){return this.model.draw(e)},n}(si),Ei=function(e){return e[e.FUNC_ADD=32774]="FUNC_ADD",e[e.ONE=1]="ONE",e[e.SRC_ALPHA=770]="SRC_ALPHA",e[e.ONE_MINUS_SRC_ALPHA=771]="ONE_MINUS_SRC_ALPHA",e[e.TEXTURE_MIN_FILTER=10241]="TEXTURE_MIN_FILTER",e[e.LINEAR=9729]="LINEAR",e[e.LINEAR_MIPMAP_NEAREST=9985]="LINEAR_MIPMAP_NEAREST",e[e.UNPACK_FLIP_Y_WEBGL=37440]="UNPACK_FLIP_Y_WEBGL",e}(Ei||{});function Ai(e,n,t,i){var r={defines:{MANUAL_SRGB:!0,SRGB_FAST_APPROXIMATION:!0},bindings:{},uniforms:{camera:[0,0,0],metallicRoughnessValues:[1,1]},parameters:{},glParameters:{},generatedTextures:[]};r.defines.USE_TEX_LOD=!0;var o=i.imageBasedLightingEnvironment;return o&&(r.bindings.pbr_diffuseEnvSampler=o.diffuseEnvSampler.texture,r.bindings.pbr_specularEnvSampler=o.specularEnvSampler.texture,r.bindings.pbr_BrdfLUT=o.brdfLutTexture.texture,r.uniforms.scaleIBLAmbient=[1,1]),null!=i&&i.pbrDebug&&(r.defines.PBR_DEBUG=!0,r.uniforms.scaleDiffBaseMR=[0,0,0,0],r.uniforms.scaleFGDSpec=[0,0,0,0]),t.NORMAL&&(r.defines.HAS_NORMALS=!0),t.TANGENT&&null!=i&&i.useTangents&&(r.defines.HAS_TANGENTS=!0),t.TEXCOORD_0&&(r.defines.HAS_UV=!0),null!=i&&i.imageBasedLightingEnvironment&&(r.defines.USE_IBL=!0),null!=i&&i.lights&&(r.defines.USE_LIGHTS=!0),n&&function(e,n,t){t.uniforms.unlit=Boolean(n.unlit),n.pbrMetallicRoughness&&function(e,n,t){n.baseColorTexture&&Ri(e,n.baseColorTexture,"pbr_baseColorSampler","HAS_BASECOLORMAP",t);t.uniforms.baseColorFactor=n.baseColorFactor||[1,1,1,1],n.metallicRoughnessTexture&&Ri(e,n.metallicRoughnessTexture,"pbr_metallicRoughnessSampler","HAS_METALROUGHNESSMAP",t);var i=n.metallicFactor,r=void 0===i?1:i,o=n.roughnessFactor,a=void 0===o?1:o;t.uniforms.metallicRoughnessValues=[r,a]}(e,n.pbrMetallicRoughness,t);if(n.normalTexture){Ri(e,n.normalTexture,"pbr_normalSampler","HAS_NORMALMAP",t);var i=n.normalTexture.scale,r=void 0===i?1:i;t.uniforms.normalScale=r}if(n.occlusionTexture){Ri(e,n.occlusionTexture,"pbr_occlusionSampler","HAS_OCCLUSIONMAP",t);var o=n.occlusionTexture.strength,a=void 0===o?1:o;t.uniforms.occlusionStrength=a}n.emissiveTexture&&(Ri(e,n.emissiveTexture,"pbr_emissiveSampler","HAS_EMISSIVEMAP",t),t.uniforms.emissiveFactor=n.emissiveFactor||[0,0,0]);switch(n.alphaMode){case"MASK":var s=n.alphaCutoff,u=void 0===s?.5:s;t.defines.ALPHA_CUTOFF=!0,t.uniforms.alphaCutoff=u;break;case"BLEND":l.R.warn("glTF BLEND alphaMode might not work well because it requires mesh sorting")(),t.parameters.blendColorOperation="add",t.parameters.blendColorSrcFactor="src-alpha",t.parameters.blendColorDstFactor="one-minus-src-alpha",t.parameters.blendAlphaOperation="add",t.parameters.blendAlphaSrcFactor="one",t.parameters.blendAlphaDstFactor="one-minus-src-alpha",t.glParameters.blend=!0,t.glParameters.blendEquation=Ei.FUNC_ADD,t.glParameters.blendFunc=[Ei.SRC_ALPHA,Ei.ONE_MINUS_SRC_ALPHA,Ei.ONE,Ei.ONE_MINUS_SRC_ALPHA]}}(e,n,r),r}function Ri(e,n,t,i,r){var o,a,s,l,u=(null==n||null==(o=n.texture)||null==(o=o.sampler)?void 0:o.parameters)||{},c=n.texture.source.image,f={};c.compressed?(s=c,(l={})[Ei.TEXTURE_MIN_FILTER]=c.data.length>1?Ei.LINEAR_MIPMAP_NEAREST:Ei.LINEAR,f=l):s={data:c};var p=e.createTexture(Object.assign({id:n.uniformName||n.id,parameters:Object.assign({},u,f),pixelStore:(a={},a[Ei.UNPACK_FLIP_Y_WEBGL]=!1,a)},s));r.bindings[t]=p,i&&(r.defines[i]=!0),r.generatedTextures.push(p)}var bi=["camera"];var Ti=function(e){return e[e.POINTS=0]="POINTS",e[e.LINES=1]="LINES",e[e.LINE_LOOP=2]="LINE_LOOP",e[e.LINE_STRIP=3]="LINE_STRIP",e[e.TRIANGLES=4]="TRIANGLES",e[e.TRIANGLE_STRIP=5]="TRIANGLE_STRIP",e[e.TRIANGLE_FAN=6]="TRIANGLE_FAN",e}({});var Ci={modelOptions:{},pbrDebug:!1,imageBasedLightingEnvironment:void 0,lights:!0,useTangents:!1},Ii=function(){function e(e,n){void 0===n&&(n={}),this.device=e,this.options=Object.assign({},Ci,n)}var n=e.prototype;return n.instantiate=function(e){var n=this;return this.gltf=Si(e),(this.gltf.scenes||[]).map((function(e){return n.createScene(e)}))},n.createAnimator=function(){return Array.isArray(this.gltf.animations)?new di(this.gltf):null},n.createScene=function(e){var n=this,t=(e.nodes||[]).map((function(e){return n.createNode(e)}));return new li({id:e.name||e.id,children:t})},n.createNode=function(e){var n=this;if(!e._node){var t=(e.children||[]).map((function(e){return n.createNode(e)}));e.mesh&&t.push(this.createMesh(e.mesh));var i=new li({id:e.name||e.id,children:t});if(e.matrix)i.setMatrix(e.matrix);else{if(i.matrix.identity(),e.translation&&i.matrix.translate(e.translation),e.rotation){var r=(new ln.k).fromQuaternion(e.rotation);i.matrix.multiplyRight(r)}e.scale&&i.matrix.scale(e.scale)}e._node=i}var o=this.gltf.nodes.find((function(n){return n.id===e.id}));return o._node=e._node,e._node},n.createMesh=function(e){var n=this;if(!e._mesh){var t=(e.primitives||[]).map((function(t,i){return n.createPrimitive(t,i,e)})),i=new li({id:e.name||e.id,children:t});e._mesh=i}return e._mesh},n.createPrimitive=function(e,n,t){var i=e.name||(t.name||t.id)+"-primitive-"+n,r=function(e){switch(e){case Ti.POINTS:return"point-list";case Ti.LINES:return"line-list";case Ti.LINE_STRIP:return"line-strip";case Ti.TRIANGLES:return"triangle-list";case Ti.TRIANGLE_STRIP:return"triangle-strip";default:throw new Error(String(e))}}(e.mode||4),o=e.indices?e.indices.count:this.getVertexCount(e.attributes),a=function(e,n){var t=n.id,i=n.geometry,r=n.material,o=n.vertexCount,a=n.materialOptions,s=n.modelOptions,u=void 0===s?{}:s,c=Ai(e,r,i.attributes,a);l.R.info(4,"createGLTFModel defines: ",c.defines)();var f=Object.assign({id:t,source:"\nlayout(0) positions: vec4; // in vec4 POSITION;\n\n  #ifdef HAS_NORMALS\n    in vec4 normals; // in vec4 NORMAL;\n  #endif\n\n  #ifdef HAS_TANGENTS\n    in vec4 TANGENT;\n  #endif\n\n  #ifdef HAS_UV\n    // in vec2 TEXCOORD_0;\n    in vec2 texCoords;\n  #endif\n\n@vertex\n  void main(void) {\n    vec4 _NORMAL = vec4(0.);\n    vec4 _TANGENT = vec4(0.);\n    vec2 _TEXCOORD_0 = vec2(0.);\n\n    #ifdef HAS_NORMALS\n      _NORMAL = normals;\n    #endif\n\n    #ifdef HAS_TANGENTS\n      _TANGENT = TANGENT;\n    #endif\n\n    #ifdef HAS_UV\n      _TEXCOORD_0 = texCoords;\n    #endif\n\n    pbr_setPositionNormalTangentUV(positions, _NORMAL, _TANGENT, _TEXCOORD_0);\n    gl_Position = u_MVPMatrix * positions;\n  }\n\n@fragment\n  out vec4 fragmentColor;\n\n  void main(void) {\n    vec3 pos = pbr_vPosition;\n    fragmentColor = pbr_filterColor(vec4(1.0));\n  }\n",vs:"#version 300 es\n\n  // in vec4 POSITION;\n  in vec4 positions;\n\n  #ifdef HAS_NORMALS\n    // in vec4 NORMAL;\n    in vec4 normals;\n  #endif\n\n  #ifdef HAS_TANGENTS\n    in vec4 TANGENT;\n  #endif\n\n  #ifdef HAS_UV\n    // in vec2 TEXCOORD_0;\n    in vec2 texCoords;\n  #endif\n\n  void main(void) {\n    vec4 _NORMAL = vec4(0.);\n    vec4 _TANGENT = vec4(0.);\n    vec2 _TEXCOORD_0 = vec2(0.);\n\n    #ifdef HAS_NORMALS\n      _NORMAL = normals;\n    #endif\n\n    #ifdef HAS_TANGENTS\n      _TANGENT = TANGENT;\n    #endif\n\n    #ifdef HAS_UV\n      _TEXCOORD_0 = texCoords;\n    #endif\n\n    pbr_setPositionNormalTangentUV(positions, _NORMAL, _TANGENT, _TEXCOORD_0);\n    gl_Position = pbrProjection.modelViewProjectionMatrix * positions;\n  }\n",fs:"#version 300 es\n  out vec4 fragmentColor;\n\n  void main(void) {\n    vec3 pos = pbr_vPosition;\n    fragmentColor = pbr_filterColor(vec4(1.0));\n  }\n",geometry:i,topology:i.topology,vertexCount:o,modules:[Wt]},u,{defines:Object.assign({},c.defines,u.defines),parameters:Object.assign({},{depthWriteEnabled:!0,depthCompare:"less",depthFormat:"depth24plus",cullMode:"back"},c.parameters,u.parameters)}),p=new ze(e,f),d=Object.assign({},c.uniforms,u.uniforms,c.bindings,u.bindings),_=d.camera,h=(0,vi.A)(d,bi);return p.shaderInputs.setProps({pbrMaterial:h,pbrProjection:{camera:_}}),new gi({managedResources:[],model:p})}(this.device,{id:i,geometry:this.createGeometry(i,e,r),material:e.material,materialOptions:this.options,modelOptions:this.options.modelOptions,vertexCount:o});return a.bounds=[e.attributes.POSITION.min,e.attributes.POSITION.max],a},n.getVertexCount=function(e){throw new Error("getVertexCount not implemented")},n.createGeometry=function(e,n,t){for(var i={},r=0,o=Object.entries(n.attributes);r<o.length;r++){var a=o[r],s=a[0],l=a[1],u=l.components,c=l.size,f=l.value;i[s]={size:null!=c?c:u,value:f}}return new Ye({id:e,topology:t,indices:n.indices.value,attributes:i})},n.createBuffer=function(e,n){e.bufferView||(e.bufferView={});var t=e.bufferView;return t.lumaBuffers||(t.lumaBuffers={}),t.lumaBuffers[n]||(t.lumaBuffers[n]=this.device.createBuffer({id:"from-"+t.id,data:t.data||e.value})),t.lumaBuffers[n]},n.createSampler=function(e){return e},n.needsPOT=function(){return!1},e}();function Si(e){if(ArrayBuffer.isView(e)||e instanceof ArrayBuffer||e instanceof ImageBitmap)return e;if(Array.isArray(e))return e.map(Si);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=Si(e[t]);return n}return e}function xi(e,n,t){var i=new Ii(e,t);return{scenes:i.instantiate(n),animator:i.createAnimator()}}var Ni=t(6547),Pi=t(9737),Li=function(e){function n(n){var t,i=n.device;(t=e.call(this)||this).scenes=[],t.center=[0,0,0],t.vantage=[0,0,0],t.time=0,t.device=i,t.loadGLTF("Avocado");var r=document.getElementById("model-select");return null==r||r.addEventListener("change",(function(e){t.loadGLTF(e.target.value)})),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.scenes[0].traverse((function(e){return e.model.destroy()}))},t.onRender=function(e){var n,t=this,i=e.aspect,r=e.device,o=e.time;if(null!=(n=this.scenes)&&n.length){var a=r.beginRenderPass({clearColor:[0,0,0,1],clearDepth:!0}),s=2*this.vantage[0],l=s/1e3,u=(new ln.k).perspective({fovy:Math.PI/3,aspect:i,near:l,far:s}),c=[this.vantage[0]*Math.sin(.001*o),this.vantage[1],this.vantage[2]*Math.cos(.001*o)];this.scenes[0].traverse((function(e,n){var i=n.worldMatrix,r=e.model,o=i.transformAsPoint(c),s=i.transformAsPoint(t.center),l=(new ln.k).lookAt({eye:o,center:s}),f=new ln.k(u).multiplyRight(l).multiplyRight(i);r.shaderInputs.setProps({lighting:Oi,pbrProjection:{camera:o,modelViewProjectionMatrix:f,modelMatrix:i,normalMatrix:new ln.k(i).invert().transpose()}}),r.draw(a)})),a.end()}},t.loadGLTF=function(){var e=(0,Ue.A)((0,Be.A)().mark((function e(n){var t,i,r,o,a,s,l,u;return(0,Be.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=this.device.getDefaultCanvasContext().canvas).style.opacity="0.1",e.next=4,(0,ai.H)("https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Assets/main/Models/"+n+"/glTF/"+n+".gltf",Ni.B);case 4:i=e.sent,r=(0,Pi.R)(i),o={pbrDebug:!1,imageBasedLightingEnvironment:null,lights:!0},a=xi(this.device,r,o),s=a.scenes,this.scenes=s,l=[1/0,1/0,1/0],u=[0,0,0],this.scenes[0].traverse((function(e){var n=e.bounds;l=l.map((function(e,t){return Math.min(e,n[0][t],n[1][t])})),u=u.map((function(e,t){return Math.max(e,n[0][t],n[1][t])}))})),this.vantage=[2*(u[0]+u[2]),u[1],2*(u[0]+u[2])],this.center=[.5*(l[0]+u[0]),.5*(l[1]+u[1]),.5*(l[2]+u[2])],t.style.opacity="1";case 15:case"end":return e.stop()}}),e,this)})));return function(n){return e.apply(this,arguments)}}(),n}(an),Oi={ambientLight:{color:[255,133,133],intensity:1,type:"ambient"},directionalLights:[{color:[222,244,255],direction:[1,-.5,.5],intensity:10,type:"directional"}],pointLights:[{color:[255,222,222],position:[3,10,0],intensity:5,type:"point"}]},yi={name:"app",uniformTypes:{modelMatrix:"mat4x4<f32>",mvpMatrix:"mat4x4<f32>",eyePosition:"vec3<f32>"}},Mi=[0,0,5],Fi=function(e){function n(n){var t,i=n.device;(t=e.call(this)||this).shaderInputs=new De({app:yi,lighting:Ut,phongMaterial:Xt}),t.modelMatrix=new ln.k,t.viewMatrix=(new ln.k).lookAt({eye:Mi}),t.mvpMatrix=new ln.k,t.shaderInputs.setProps({lighting:{lights:[{type:"ambient",color:[255,255,255]},{type:"point",color:[255,120,10],position:[2,4,3]},{type:"point",color:[0,255,10],position:[-2,1,3]}]},phongMaterial:{specularColor:[255,255,255],shininess:100}});var r=new Xe(i,{data:(0,Ge.Dt)("vis-logo.png")});return t.model=new ze(i,{source:"\nstruct Uniforms {\n  modelMatrix : mat4x4<f32>,\n  mvpMatrix : mat4x4<f32>,\n  eyePosition : vec3<f32>,\n};\n\n@binding(0) @group(0) var<uniform> app : Uniforms;\n@group(0) @binding(1) var uTexture : texture_2d<f32>;\n@group(0) @binding(2) var uTextureSampler : sampler;\n\nstruct VertexInputs {\n  // CUBE GEOMETRY\n  @location(0) positions : vec3<f32>,\n  @location(1) normals : vec3<f32>,\n  @location(2) texCoords : vec2<f32>\n};\n\nstruct FragmentInputs {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n  @location(1) fragPosition: vec3<f32>,\n  @location(2) fragNormal: vec3<f32>\n}\n\n@vertex\nfn vertexMain(inputs: VertexInputs) -> FragmentInputs {\n  var outputs : FragmentInputs;\n  outputs.Position = app.mvpMatrix * app.modelMatrix * vec4<f32>(inputs.positions, 1);\n  outputs.fragUV = inputs.texCoords;\n  outputs.fragPosition = (app.modelMatrix * vec4<f32>(inputs.positions, 1.0)).xyz;\n  // NOTE: WGSL lacks conversion syntax: https://github.com/gpuweb/gpuweb/issues/2399\n  let mat3 = mat3x3(app.modelMatrix[0].xyz, app.modelMatrix[1].xyz, app.modelMatrix[2].xyz);\n  outputs.fragNormal = mat3 * inputs.normals;\n  return outputs;\n  //   vPosition = (app.modelMatrix * vec4(positions, 1.0)).xyz;\n  //   vNormal = mat3(app.modelMatrix) * normals;\n  //   vUV = texCoords;\n  //   gl_Position = app.mvpMatrix * vec4(positions, 1.0);\n}\n\n@fragment\nfn fragmentMain(inputs: FragmentInputs) -> @location(0) vec4<f32> {\n  // return inputs.fragPosition;\n  return textureSample(uTexture, uTextureSampler, inputs.fragUV);\n//   vec3 surfaceColor = texture(uTexture, vec2(vUV.x, 1.0 - vUV.y)).rgb;\n//   surfaceColor = lighting_getLightColor(surfaceColor, uApp.eyePosition, vPosition, normalize(vNormal));\n//   fragColor = vec4(surfaceColor, 1.0);\n}\n",vs:"#version 300 es\n\nin vec3 positions;\nin vec3 normals;\nin vec2 texCoords;\n\nout vec3 vPosition;\nout vec3 vNormal;\nout vec2 vUV;\nout vec3 vColor;\n\nuniform appUniforms {\n  mat4 modelMatrix;\n  mat4 mvpMatrix;\n  vec3 eyePosition;\n} app;\n\nvoid main(void) {\n  vPosition = (app.modelMatrix * vec4(positions, 1.0)).xyz;\n  vNormal = mat3(app.modelMatrix) * normals;\n  vUV = texCoords;\n\n  #ifdef LIGHTING_VERTEX\n  vColor = lighting_getLightColor(vec3(1.0), app.eyePosition, vPosition, normalize(vNormal));\n  #endif\n  gl_Position = app.mvpMatrix * vec4(positions, 1.0);\n}\n",fs:"#version 300 es\nprecision highp float;\n\nin vec3 vPosition;\nin vec3 vNormal;\nin vec2 vUV;\nin vec3 vColor;\n\nuniform sampler2D uTexture;\n\nuniform appUniforms {\n  mat4 modelMatrix;\n  mat4 mvpMatrix;\n  vec3 eyePosition;\n} app;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  #ifdef LIGHTING_FRAGMENT\n  vec3 surfaceColor = texture(uTexture, vec2(vUV.x, 1.0 - vUV.y)).rgb;\n  surfaceColor = lighting_getLightColor(surfaceColor, app.eyePosition, vPosition, normalize(vNormal));\n  fragColor = vec4(surfaceColor, 1.0);\n  #endif\n\n  #ifdef LIGHTING_VERTEX\n  fragColor = vec4(vColor, 1.0);\n  #endif\n}\n",shaderInputs:t.shaderInputs,geometry:new qe,instanceCount:1,bindings:{uTexture:r},parameters:{depthWriteEnabled:!0,depthCompare:"less-equal"}}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.model.destroy()},t.onRender=function(e){var n=e.device,t=e.aspect,i=e.tick;this.modelMatrix.identity().rotateX(.01*i).rotateY(.013*i),this.mvpMatrix.perspective({fovy:Math.PI/3,aspect:t}).multiplyRight(this.viewMatrix).multiplyRight(this.modelMatrix),this.shaderInputs.setProps({app:{mvpMatrix:this.mvpMatrix,modelMatrix:this.modelMatrix}});var r=n.beginRenderPass({clearColor:[0,0,0,1],clearDepth:!0});this.model.draw(r),r.end()},n}(an);Fi.info="<p>\nDrawing a phong-shaded cube\n</p>\n";var wi="#version 300 es\n\nin vec2 position;\n\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n  OFFSET_POSITION(gl_Position);\n}\n",Di="#version 300 es\n\nuniform appUniforms {  \n  vec3 color;\n} app;\n\nout vec4 fragColor;\n\nvoid main() {\n  fragColor = vec4(app.color, 1.0);\n}\n",Bi={name:"offsetLeft",inject:{"vs:OFFSET_POSITION":"position.x -= 0.5;"}},Ui={name:"offsetRight",inject:{"vs:OFFSET_POSITION":"position.x += 0.5;"}},Gi=function(e){function n(n){var t,i=n.device;(t=e.call(this)||this).uniformStore=new h({app:{uniformTypes:{color:"vec3<f32>"}}});var r=ge.getDefaultShaderAssembler();r.addShaderHook("vs:OFFSET_POSITION(inout vec4 position)"),t.positionBuffer=i.createBuffer(new Float32Array([-.3,-.5,.3,-.5,0,.5])),t.uniformBuffer1=t.uniformStore.createUniformBuffer(i,"app",{app:{color:[1,0,0]}});var o=t.uniformStore.getUniformBufferData("app");return t.uniformBuffer1.write(o),t.uniformBuffer2=t.uniformStore.createUniformBuffer(i,"app",{app:{color:[0,0,1]}}),t.model1=new ze(i,{vs:wi,fs:Di,shaderAssembler:r,modules:[Bi],bufferLayout:[{name:"position",format:"float32x2"}],attributes:{position:t.positionBuffer},vertexCount:3,bindings:{app:t.uniformBuffer1}}),t.model2=new ze(i,{vs:wi,fs:Di,shaderAssembler:r,modules:[Ui],bufferLayout:[{name:"position",format:"float32x2"}],vertexCount:3,attributes:{position:t.positionBuffer},bindings:{app:t.uniformBuffer2}}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.model1.destroy(),this.model2.destroy(),this.positionBuffer.destroy(),this.uniformStore.destroy(),this.uniformBuffer1.destroy(),this.uniformBuffer2.destroy()},t.onRender=function(e){var n=e.device.beginRenderPass({clearColor:[0,0,0,1]});this.model1.draw(n),this.model2.draw(n),n.end()},n}(an);Gi.info="\nModifying shader behavior with shader hooks\n";var Hi={name:"color",fs:"\nvec3 color_hsv2rgb(vec3 hsv) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(hsv.xxx + K.xyz) * 6.0 - K.www);\n  vec3 rgb = hsv.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), hsv.y);\n  return rgb;\n}\n  ",uniformTypes:{hsv:"vec3<f32>"}},ki=function(e){function n(n){var t,i=n.device;return(t=e.call(this)||this).shaderInputs1=new De({color:Hi}),t.shaderInputs2=new De({color:Hi}),t.positionBuffer=i.createBuffer(new Float32Array([-.3,-.5,.3,-.5,0,.5])),t.shaderInputs1.setProps({color:{hsv:[.7,1,1]}}),t.shaderInputs2.setProps({color:{hsv:[1,1,1]}}),t.model1=new ze(i,{vs:"#version 300 es\nin vec2 position;\nvoid main() {\n  gl_Position = vec4(position - vec2(0.5, 0.0), 0.0, 1.0);\n}\n",fs:"#version 300 es\nprecision highp float;\n\nuniform colorUniforms {\n  vec3 hsv;\n} color;\n\nout vec4 fragColor;\n\nvoid main() {\n  fragColor = vec4(color_hsv2rgb(color.hsv), 1.0);\n}\n",shaderInputs:t.shaderInputs1,bufferLayout:[{name:"position",format:"float32x2"}],attributes:{position:t.positionBuffer},vertexCount:3}),t.model2=new ze(i,{vs:"#version 300 es\nin vec2 position;\nvoid main() {\n  gl_Position = vec4(position + vec2(0.5, 0.0), 0.0, 1.0);\n}\n",fs:"#version 300 es\n\nprecision highp float;\n\nuniform colorUniforms {\n  vec3 hsv;\n} color;\n\nout vec4 fragColor;\n\nvoid main() {\n  fragColor = vec4(color_hsv2rgb(color.hsv) - 0.3, 1.0);\n}\n",shaderInputs:t.shaderInputs2,bufferLayout:[{name:"position",format:"float32x2"}],attributes:{position:t.positionBuffer},vertexCount:3}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.model1.destroy(),this.model2.destroy(),this.positionBuffer.destroy()},t.onRender=function(e){var n=e.device.beginRenderPass({clearColor:[0,0,0,1]});this.model1.draw(n),this.model2.draw(n),n.end()},n}(an);ki.info="\nRe-using shader code with shader modules\n";var Vi=t(9417),Xi=function(){function e(n,t){if(void 0===t&&(t=e.defaultProps),!e.isSupported(n))throw new Error("BufferTransform not yet implemented on WebGPU");this.device=n,this.model=new ze(this.device,Object.assign({id:t.id||"buffer-transform-model",fs:t.fs||ct(),topology:t.topology||"point-list",varyings:t.outputs||t.varyings},t)),this.transformFeedback=this.device.createTransformFeedback({layout:this.model.pipeline.shaderLayout,buffers:t.feedbackBuffers}),this.model.setTransformFeedback(this.transformFeedback),Object.seal(this)}e.isSupported=function(e){var n;return"webgl"===(null==e||null==(n=e.info)?void 0:n.type)};var n=e.prototype;return n.destroy=function(){this.model&&this.model.destroy()},n.delete=function(){this.destroy()},n.run=function(e){null!=e&&e.inputBuffers&&this.model.setAttributes(e.inputBuffers),null!=e&&e.outputBuffers&&this.transformFeedback.setBuffers(e.outputBuffers);var n=this.device.beginRenderPass(e);this.model.draw(n),n.end()},n.getBuffer=function(e){return this.transformFeedback.getBuffer(e)},n.readAsync=function(e){var n=this.getBuffer(e);if(!n)throw new Error("BufferTransform#getBuffer");if(n instanceof s.h)return n.readAsync();var t=n.buffer,i=n.byteOffset,r=void 0===i?0:i,o=n.byteLength,a=void 0===o?t.byteLength:o;return t.readAsync(r,a)},e}();Xi.defaultProps=Object.assign({},ze.defaultProps,{outputs:void 0,feedbackBuffers:void 0});var ji=function(e){function n(n){var t,i=n.device,r=n.animationLoop;return t=e.call(this)||this,"webgl"!==i.type?(r.setError(new Error("This demo is only implemented for WebGL2")),(0,Vi.A)(t)):(t.positionBuffers=new it({current:i.createBuffer(new Float32Array([-.5,-.5,.5,-.5,0,.5])),next:i.createBuffer(new Float32Array(6))}),t.colorBuffer=i.createBuffer(new Float32Array([1,0,0,0,1,0,0,0,1])),t.transform=new Xi(i,{vs:"#version 300 es\n#define SIN2 0.03489949\n#define COS2 0.99939082\n\nmat2 rotation = mat2(\n  COS2, SIN2,\n  -SIN2, COS2\n);\n\nin vec2 oldPositions;\nout vec2 newPositions;\n\nvoid main() {\n  newPositions = rotation * oldPositions;\n}\n",bufferLayout:[{name:"oldPositions",format:"float32x2"}],outputs:["newPositions"],vertexCount:3}),t.model=new ze(i,{vs:"#version 300 es\n\nin vec2 position;\nin vec3 color;\nout vec3 vColor;\n\nvoid main() {\n    vColor = color;\n    gl_Position = vec4(position, 0.0, 1.0);\n}\n",fs:"#version 300 es\nprecision highp float;\n\nin vec3 vColor;\nout vec4 fragColor;\n\nvoid main() {\n    fragColor = vec4(vColor, 1.0);\n}\n",attributes:{color:t.colorBuffer},bufferLayout:[{name:"position",format:"float32x2"},{name:"color",format:"float32x3"}],vertexCount:3}),t)}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.transform.destroy(),this.model.destroy(),this.positionBuffers.destroy(),this.colorBuffer.destroy()},t.onRender=function(e){var n=e.device;this.transform.run({inputBuffers:{oldPositions:this.positionBuffers.current},outputBuffers:{newPositions:this.positionBuffers.next}}),this.positionBuffers.swap();var t=n.beginRenderPass({clearColor:[0,0,0,1]});this.model.setAttributes({position:this.positionBuffers.current}),this.model.draw(t),t.end()},n}(an);ji.info="\nAnimation via transform feedback.\n";var Wi=m(),zi=1e3,Ki=function(e){function n(n){var t,i=n.device,r=(n.width,n.height,n.animationLoop);if(t=e.call(this)||this,"webgl"!==i.type)return r.setError(new Error("This demo is only implemented for WebGL2")),(0,Vi.A)(t);for(var o=new Float32Array([.015,0,-.01,.01,-.01,-.01]),a=new Float32Array(2e3),s=new Float32Array(zi),l=new Float32Array(3e3),u=new Float32Array(2e3),c=0;c<zi;++c){a[2*c]=2*Wi()-1,a[2*c+1]=2*Wi()-1,s[c]=2*Wi()*Math.PI,Wi()>.5?(l[3*c+1]=1,l[3*c+2]=1):(l[3*c]=1,l[3*c+2]=1),u[2*c]=Math.floor(c/255),u[2*c+1]=c-255*u[2*c]}return t.positionBuffer=i.createBuffer({data:o}),t.instanceColorBuffer=i.createBuffer({data:l}),t.instancePositionBuffers=new it({current:i.createBuffer({data:a}),next:i.createBuffer({data:a})}),t.instanceRotationBuffers=new it({current:i.createBuffer({data:s}),next:i.createBuffer({data:s})}),t.instancePickingColorBuffer=i.createBuffer({data:u}),t.renderModel=new ze(i,{id:"RenderModel",vs:"#version 300 es\n#define OFFSET_LOCATION 0\n#define ROTATION_LOCATION 1\n#define POSITION_LOCATION 2\n#define COLOR_LOCATION 3\nprecision highp float;\nprecision highp int;\nlayout(location = POSITION_LOCATION) in vec2 positions;\nlayout(location = ROTATION_LOCATION) in float instanceRotations;\nlayout(location = OFFSET_LOCATION) in vec2 instancePositions;\nlayout(location = COLOR_LOCATION) in vec3 instanceColors;\nin vec2 instancePickingColors;\nout vec3 vColor;\nvoid main()\n{\n    vColor = instanceColors;\n\n    float cos_r = cos(instanceRotations);\n    float sin_r = sin(instanceRotations);\n    mat2 rot = mat2(\n        cos_r, sin_r,\n        -sin_r, cos_r\n    );\n    gl_Position = vec4(rot * positions + instancePositions, 0.0, 1.0);\n    picking_setPickingColor(vec3(0., instancePickingColors));\n}\n",fs:"#version 300 es\n#define ALPHA 0.9\nprecision highp float;\nprecision highp int;\nin vec3 vColor;\nout vec4 fragColor;\nvoid main()\n{\n    fragColor = vec4(vColor * ALPHA, ALPHA);\n    fragColor = picking_filterColor(fragColor);\n}\n",modules:[Mt],topology:"triangle-list",vertexCount:3,isInstanced:!0,instanceCount:zi,attributes:{positions:t.positionBuffer,instanceColors:t.instanceColorBuffer,instancePickingColors:t.instancePickingColorBuffer},bufferLayout:[{name:"positions",format:"float32x2"},{name:"instancePositions",format:"float32x2"},{name:"instanceRotations",format:"float32"},{name:"instanceColors",format:"float32x3"},{name:"instancePickingColors",format:"float32x2"}]}),t.transform=new Xi(i,{vs:"#version 300 es\n#define OFFSET_LOCATION 0\n#define ROTATION_LOCATION 1\n\n#define M_2PI 6.28318530718\n\n#define MAP_HALF_LENGTH 1.01\n#define WANDER_CIRCLE_R 0.01\n#define WANDER_CIRCLE_OFFSET 0.04\n#define MOVE_DELTA 0.001\nprecision highp float;\nprecision highp int;\n\nuniform appUniforms{\n  float time;\n} app;\n\nlayout(location = OFFSET_LOCATION) in vec2 oldPositions;\nlayout(location = ROTATION_LOCATION) in float oldRotations;\n\nout vec2 newOffsets;\nout float newRotations;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid main()\n{\n    float theta = M_2PI * rand(vec2(app.time, oldRotations + oldPositions.x + oldPositions.y));\n    float cos_r = cos(oldRotations);\n    float sin_r = sin(oldRotations);\n    mat2 rot = mat2(\n        cos_r, sin_r,\n        -sin_r, cos_r\n    );\n\n    vec2 p = WANDER_CIRCLE_R * vec2(cos(theta), sin(theta)) + vec2(WANDER_CIRCLE_OFFSET, 0.0);\n    \n    vec2 move = normalize(rot * p);\n    newRotations = atan(move.y, move.x);\n    newOffsets = oldPositions + MOVE_DELTA * move;\n\n    // wrapping at edges\n    newOffsets = vec2 (\n        newOffsets.x > MAP_HALF_LENGTH ? - MAP_HALF_LENGTH :\n          ( newOffsets.x < - MAP_HALF_LENGTH ? MAP_HALF_LENGTH : newOffsets.x ) ,\n        newOffsets.y > MAP_HALF_LENGTH ? - MAP_HALF_LENGTH :\n          ( newOffsets.y < - MAP_HALF_LENGTH ? MAP_HALF_LENGTH : newOffsets.y )\n        );\n\n    gl_Position = vec4(newOffsets, 0.0, 1.0);\n}\n",vertexCount:zi,bufferLayout:[{name:"oldPositions",format:"float32x2"},{name:"oldRotations",format:"float32"}],outputs:["newOffsets","newRotations"]}),t}(0,a.A)(n,e);var t=n.prototype;return t.onFinalize=function(){this.renderModel.destroy(),this.transform.destroy()},t.onRender=function(e){var n=e.device,t=(e.width,e.height,e.time);this.transform.model.shaderInputs.setProps({app:{time:t}}),this.transform.run({inputBuffers:{oldPositions:this.instancePositionBuffers.current,oldRotations:this.instanceRotationBuffers.current},outputBuffers:{newOffsets:this.instancePositionBuffers.next,newRotations:this.instanceRotationBuffers.next}}),this.instancePositionBuffers.swap(),this.instanceRotationBuffers.swap(),this.renderModel.setAttributes({instancePositions:this.instancePositionBuffers.current,instanceRotations:this.instanceRotationBuffers.current});var i=n.beginRenderPass({clearColor:[0,0,0,1],clearDepth:1});this.renderModel.draw(i)},n}(an);Ki.info='\n<p>\n  Instanced triangles animated on the GPU using a luma.gl <code>BufferTransform</code> object.\n\n  This is a port of an example from\n  <a href="https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/transform_feedback_instanced.html">\n    WebGL2Samples\n  </a>\n';var Yi=t(4848),qi={},Zi=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"instancing",directory:"showcase",template:Dn,config:qi},e))},Qi=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"persistence",directory:"showcase",template:tt,config:qi},e))},Ji=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"postprocessing",directory:"showcase",template:zt,config:qi},e))},$i=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"animation",directory:"api",template:pn,config:qi},e))},er=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"cubemap",directory:"api",template:mn,config:qi},e))},nr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"texture-3d",directory:"api-3d",template:Cn,config:qi},e))},tr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"hello-triangle",directory:"tutorials",template:Yt,config:qi},e))},ir=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"hello-triangle-geometry",directory:"tutorials",template:Kt,config:qi},e))},rr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"hello-cube",directory:"tutorials",template:Qt,config:qi},e))},or=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"instanced-cubes",directory:"tutorials",template:$t,config:qi},e))},ar=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"two-cubes",directory:"tutorials",template:Jt,config:qi},e))},sr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"lighting",directory:"tutorials",template:Fi,config:qi},e))},lr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"hello-gltf",directory:"tutorials",template:Li,config:qi},e))},ur=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"hello-instancing",directory:"tutorials",template:oi,config:qi},e))},cr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"shader-hooks",directory:"tutorials",template:Gi,config:qi},e))},fr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"shader-modules",directory:"tutorials",template:ki,config:qi},e))},pr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"transform-feedback",directory:"tutorials",template:ji,config:qi},e))},dr=function(e){return(0,Yi.jsx)(r.fo,Object.assign({id:"transform",directory:"tutorials",template:Ki,config:qi},e))}},2267:(e,n,t)=>{t.r(n),t.d(n,{default:()=>d});var i=t(7387),r=t(6540),o=t(1880),a=t(8670),s=t(4255),l=t(6065),u=t(4848);"undefined"!=typeof window&&(window.website=!0);var c=l.Ay.li.withConfig({displayName:"pages__Bullet",componentId:"sc-1t5tfin-0"})(["background:url(img/icon-high-precision.svg) no-repeat left top;list-style:none;max-width:540px;margin-top:8px;padding:0 0 12px 56px;font:16px;"]),f=l.Ay.div.withConfig({displayName:"pages__ContentContainer",componentId:"sc-1t5tfin-1"})(["padding:64px;@media screen and (max-width:768px){padding:48px;}"]),p=function(){return(0,u.jsx)(s.LL,{panel:!1})},d=function(e){function n(){return e.apply(this,arguments)||this}return(0,i.A)(n,e),n.prototype.render=function(){return(0,u.jsx)(o.A,{title:"Home",description:"luma.gl",children:(0,u.jsxs)("main",{children:[(0,u.jsx)(a.ww,{HeroExample:p,getStartedLink:"./docs/developer-guide/installing",theme:"dark"}),(0,u.jsxs)(f,{children:[(0,u.jsx)("h2",{children:"High-performance toolkit for GPU-based data visualization."}),(0,u.jsxs)("ul",{children:[(0,u.jsx)(c,{children:"Focused on high-performance data processing, e.g. instanced rendering and GPU compute."}),(0,u.jsx)(c,{children:"The core 3D rendering technology behind tools such as deck.gl, kepler.gl, and avs.auto."}),(0,u.jsx)(c,{children:"A clean TypeScript and WebGPU friendly GPU API that works across WebGPU and WebGL 2."})]})]})]})})},n}(r.Component)},5175:(e,n,t)=>{t.d(n,{xN:()=>ee,Xj:()=>se,dJ:()=>ue,yL:()=>le,R2:()=>oe,I$:()=>ae,fo:()=>ve,dw:()=>ce});var i=t(6540),r=t(8587),o=t(7387),a=t(5556),s=t.n(a),l=t(4848),u=["height","width","viewBox","style","children","predefinedClassName","className","colors","totalColor"],c=function(e){function n(){return e.apply(this,arguments)||this}return(0,o.A)(n,e),n.prototype.render=function(){var e=this.props,n=e.height,t=e.width,i=e.viewBox,o=e.style,a=void 0===o?{}:o,s=e.children,c=e.predefinedClassName,f=e.className,p=e.colors,d=e.totalColor,_=(0,r.A)(e,u),h=n,m=t||h;a.fill="currentColor";var v=Array.isArray(p)&&d&&function(e,n){return new Array(e).fill(1).reduce((function(e,t,i){return e+".cr"+(i+1)+" {fill:"+n[i%n.length]+";}"}),"")}(d,p);return(0,l.jsxs)("svg",Object.assign({viewBox:i,width:m,height:h,style:a,className:c+" "+f},_,{children:[v?(0,l.jsx)("style",{type:"text/css",children:v}):null,s]}))},n}(i.Component);c.displayName="Base Icon",c.propTypes={height:s().string,width:s().string,viewBox:s().string,children:s().node,predefinedClassName:s().string,className:s().string},c.defaultProps={height:null,width:null,viewBox:"0 0 64 64",predefinedClassName:"",className:""};var f=function(e){return(0,l.jsx)(c,Object.assign({},e,{children:(0,l.jsx)("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M5.02167 13.7625C4.69623 13.4459 4.69623 12.9325 5.02167 12.6159L9.76574 8.00002L5.02167 3.38416C4.69623 3.06752 4.69623 2.55415 5.02167 2.2375C5.3471 1.92086 5.87474 1.92086 6.20018 2.2375L11.5335 7.42669C11.6898 7.57875 11.7776 7.78498 11.7776 8.00002C11.7776 8.21506 11.6898 8.4213 11.5335 8.57335L6.20018 13.7625C5.87474 14.0792 5.3471 14.0792 5.02167 13.7625Z"})}))};f.propTypes={height:s().string},f.defaultProps={height:"16px",viewBox:"0 0 17 16",predefinedClassName:"unfolded-icons-arrowbigright"};var p=t(675),d=t(467),_=t(4745),h=t(3845),m=t(2947),v=t(5997),g=t(8862),E="No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.",A=function(){function e(){if(this.stats=v.d,this.log=g.R,this.VERSION="undefined"!=typeof __VERSION__?__VERSION__:"running from source",this.preregisteredAdapters=new Map,globalThis.luma){if(globalThis.luma.VERSION!==this.VERSION)throw g.R.error("Found luma.gl "+globalThis.luma.VERSION+" while initialzing "+this.VERSION)(),g.R.error("'yarn why @luma.gl/core' can help identify the source of the conflict")(),new Error("luma.gl - multiple versions detected: see console log");g.R.error("This version of luma.gl has already been initialized")()}g.R.log(1,this.VERSION+" - set luma.log.level=1 (or higher) to trace rendering")(),globalThis.luma=this}var n=e.prototype;return n.createDevice=function(){var n=(0,d.A)((0,p.A)().mark((function n(t){var i,r;return(0,p.A)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(void 0===t&&(t={}),i=Object.assign({},e.defaultProps,t),r=this.selectAdapter(i.type,i.adapters)){n.next=5;break}throw new Error(E);case 5:if(!i.waitForPageLoad){n.next=8;break}return n.next=8,r.pageLoaded;case 8:return n.next=10,r.create(i);case 10:return n.abrupt("return",n.sent);case 11:case"end":return n.stop()}}),n,this)})));return function(e){return n.apply(this,arguments)}}(),n.attachDevice=function(){var e=(0,d.A)((0,p.A)().mark((function e(n,t){var i,r;return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=this._getTypeFromHandle(n,t.adapters),r=i&&this.selectAdapter(i,t.adapters)){e.next=4;break}throw new Error(E);case 4:return e.next=6,null==r||null==r.attach?void 0:r.attach(n,t);case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e,this)})));return function(n,t){return e.apply(this,arguments)}}(),n.registerAdapters=function(e){for(var n,t=(0,h.A)(e);!(n=t()).done;){var i=n.value;this.preregisteredAdapters.set(i.type,i)}},n.getSupportedAdapters=function(e){void 0===e&&(e=[]);var n=this._getAdapterMap(e);return Array.from(n).map((function(e){return e[1]})).filter((function(e){return null==e.isSupported?void 0:e.isSupported()})).map((function(e){return e.type}))},n.getBestAvailableAdapterType=function(e){void 0===e&&(e=[]);for(var n=this._getAdapterMap(e),t=0,i=["webgpu","webgl","null"];t<i.length;t++){var r,o=i[t];if(null!=(r=n.get(o))&&null!=r.isSupported&&r.isSupported())return o}return null},n.selectAdapter=function(e,n){void 0===n&&(n=[]);var t=e;"best-available"===e&&(t=this.getBestAvailableAdapterType(n));var i=this._getAdapterMap(n);return t&&i.get(t)||null},n.enforceWebGL2=function(e,n){void 0===e&&(e=!0),void 0===n&&(n=[]);var t=this._getAdapterMap(n).get("webgl");t||g.R.warn("enforceWebGL2: webgl adapter not found")(),null==t||null==t.enforceWebGL2||t.enforceWebGL2(e)},n.setDefaultDeviceProps=function(n){Object.assign(e.defaultProps,n)},n._getAdapterMap=function(e){void 0===e&&(e=[]);for(var n,t=new Map(this.preregisteredAdapters),i=(0,h.A)(e);!(n=i()).done;){var r=n.value;t.set(r.type,r)}return t},n._getTypeFromHandle=function(e,n){return void 0===n&&(n=[]),e instanceof WebGL2RenderingContext?"webgl":"undefined"!=typeof GPUDevice&&e instanceof GPUDevice||null!=e&&e.queue?"webgpu":null===e?"null":(e instanceof WebGLRenderingContext?g.R.warn("WebGL1 is not supported",e)():g.R.warn("Unknown handle type",e)(),null)},e}();A.defaultProps=Object.assign({},m.pF.defaultProps,{type:"best-available",adapters:void 0,waitForPageLoad:!0});var R=new A,b=t(8696),T=t(6769),C=function(){function e(){}return(0,b.A)(e,[{key:"pageLoaded",get:function(){return function(){x||(x=S()||"undefined"==typeof window?Promise.resolve():new Promise((function(e){return window.addEventListener("load",(function(){return e()}))})));return x}()}}]),e}(),I=(0,T.B)()&&"undefined"!=typeof document,S=function(){return I&&"complete"===document.readyState},x=null;var N=t(5981),P={WEBGL_depth_texture:{UNSIGNED_INT_24_8_WEBGL:N.GL.UNSIGNED_INT_24_8},OES_element_index_uint:{},OES_texture_float:{},OES_texture_half_float:{HALF_FLOAT_OES:N.GL.HALF_FLOAT},EXT_color_buffer_float:{},OES_standard_derivatives:{FRAGMENT_SHADER_DERIVATIVE_HINT_OES:N.GL.FRAGMENT_SHADER_DERIVATIVE_HINT},EXT_frag_depth:{},EXT_blend_minmax:{MIN_EXT:N.GL.MIN,MAX_EXT:N.GL.MAX},EXT_shader_texture_lod:{}},L=function(e){return{drawBuffersWEBGL:function(n){return e.drawBuffers(n)},COLOR_ATTACHMENT0_WEBGL:N.GL.COLOR_ATTACHMENT0,COLOR_ATTACHMENT1_WEBGL:N.GL.COLOR_ATTACHMENT1,COLOR_ATTACHMENT2_WEBGL:N.GL.COLOR_ATTACHMENT2,COLOR_ATTACHMENT3_WEBGL:N.GL.COLOR_ATTACHMENT3}},O=function(e){return{VERTEX_ARRAY_BINDING_OES:N.GL.VERTEX_ARRAY_BINDING,createVertexArrayOES:function(){return e.createVertexArray()},deleteVertexArrayOES:function(n){return e.deleteVertexArray(n)},isVertexArrayOES:function(n){return e.isVertexArray(n)},bindVertexArrayOES:function(n){return e.bindVertexArray(n)}}},y=function(e){return{VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE:35070,drawArraysInstancedANGLE:function(){return e.drawArraysInstanced.apply(e,arguments)},drawElementsInstancedANGLE:function(){return e.drawElementsInstanced.apply(e,arguments)},vertexAttribDivisorANGLE:function(){return e.vertexAttribDivisor.apply(e,arguments)}}};function M(e){void 0===e&&(e=!0);var n=HTMLCanvasElement.prototype;if(!e&&n.originalGetContext)return n.getContext=n.originalGetContext,void(n.originalGetContext=void 0);n.originalGetContext=n.getContext,n.getContext=function(e,n){if("webgl"===e||"experimental-webgl"===e){var t=this.originalGetContext("webgl2",n);return t instanceof HTMLElement&&function(e){e.getExtension("EXT_color_buffer_float");var n=Object.assign({},P,{WEBGL_disjoint_timer_query:e.getExtension("EXT_disjoint_timer_query_webgl2"),WEBGL_draw_buffers:L(e),OES_vertex_array_object:O(e),ANGLE_instanced_arrays:y(e)}),t=e.getExtension;e.getExtension=function(i){var r=t.call(e,i);return r||(i in n?n[i]:null)};var i=e.getSupportedExtensions;e.getSupportedExtensions=function(){var t=i.apply(e)||[];return null==t?void 0:t.concat(Object.keys(n))}}(t),t}return this.originalGetContext(e,n)}}var F=t(1716),w=t(4976);function D(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||Boolean(e&&Number.isFinite(e._version))}var B,U=new(function(e){function n(){var n;return(n=e.call(this)||this).type="webgl",m.pF.defaultProps=Object.assign({},m.pF.defaultProps,F.ic),n}(0,o.A)(n,e);var i=n.prototype;return i.enforceWebGL2=function(e){M(e)},i.isSupported=function(){return"undefined"!=typeof WebGL2RenderingContext},i.isDeviceHandle=function(e){return"undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||("undefined"!=typeof WebGLRenderingContext&&e instanceof WebGLRenderingContext&&g.R.warn("WebGL1 is not supported",e)(),!1)},i.attach=function(){var e=(0,d.A)((0,p.A)().mark((function e(n){var i,r;return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.e(407).then(t.bind(t,407));case 2:if(i=e.sent,r=i.WebGLDevice,!(n instanceof r)){e.next=6;break}return e.abrupt("return",n);case 6:if(!((null==n?void 0:n.device)instanceof r)){e.next=8;break}return e.abrupt("return",n.device);case 8:if(D(n)){e.next=10;break}throw new Error("Invalid WebGL2RenderingContext");case 10:return e.abrupt("return",new r({_handle:n,createCanvasContext:{canvas:n.canvas,autoResize:!1}}));case 11:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),i.create=function(){var e=(0,d.A)((0,p.A)().mark((function e(n){var i,r,o,a,s,l,u,c,f;return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return void 0===n&&(n={}),e.next=3,t.e(407).then(t.bind(t,407));case 3:return i=e.sent,r=i.WebGLDevice,g.R.groupCollapsed(1,"WebGLDevice created")(),o=[],(n.debugWebGL||n.debug)&&o.push((0,w.$)()),n.debugSpectorJS&&o.push((0,F._G)(n)),e.next=11,Promise.allSettled(o);case 11:for(a=e.sent,s=(0,h.A)(a);!(l=s()).done;)"rejected"===(u=l.value).status&&g.R.error("Failed to initialize debug libraries "+u.reason)();return c=new r(n),f="Created "+c.type+(c.debug?" debug":"")+" context: "+c.info.vendor+", "+c.info.renderer+" for canvas: "+c.canvasContext.id,g.R.probe(1,f)(),g.R.table(1,c.info)(),g.R.groupEnd(1)(),e.abrupt("return",c);case 19:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),n}(C)),G=function(e){function n(){for(var n,t=arguments.length,i=new Array(t),r=0;r<t;r++)i[r]=arguments[r];return(n=e.call.apply(e,[this].concat(i))||this).type="webgpu",n}(0,o.A)(n,e);var i=n.prototype;return i.isSupported=function(){return Boolean("undefined"!=typeof navigator&&navigator.gpu)},i.isDeviceHandle=function(e){return"undefined"!=typeof GPUDevice&&e instanceof GPUDevice||!(null==e||!e.queue)},i.create=function(){var e=(0,d.A)((0,p.A)().mark((function e(n){var i,r,o,a,s,l,u,c,f,d,_,m,v,E;return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(navigator.gpu){e.next=2;break}throw new Error("WebGPU not available. Recent Chrome browsers should work.");case 2:return g.R.groupCollapsed(1,"WebGPUDevice created")(),e.next=5,navigator.gpu.requestAdapter({powerPreference:"high-performance"});case 5:if(i=e.sent){e.next=8;break}throw new Error("Failed to request WebGPU adapter");case 8:if(e.t0=i.info,e.t0){e.next=13;break}return e.next=12,null==i.requestAdapterInfo?void 0:i.requestAdapterInfo();case 12:e.t0=e.sent;case 13:if(r=e.t0,g.R.probe(2,"Adapter available",r)(),o=[],a={},n._requestMaxLimits)for(o.push.apply(o,Array.from(i.features)),s=Object.keys(i.limits).filter((function(e){return!["minSubgroupSize","maxSubgroupSize"].includes(e)})),l=(0,h.A)(s);!(u=l()).done;)c=u.value,f=c,"number"==typeof(d=i.limits[f])&&(a[f]=d);return e.next=20,i.requestDevice({requiredFeatures:o,requiredLimits:a});case 20:return _=e.sent,g.R.probe(1,"GPUDevice available")(),e.next=24,t.e(5178).then(t.bind(t,5178));case 24:return m=e.sent,v=m.WebGPUDevice,E=new v(n,_,i,r),g.R.probe(1,"Device created. For more info, set chrome://flags/#enable-webgpu-developer-features")(),g.R.table(1,E.info)(),g.R.groupEnd(1)(),e.abrupt("return",E);case 31:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),i.attach=function(){var e=(0,d.A)((0,p.A)().mark((function e(n){return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:throw new Error("WebGPUAdapter.attach() not implemented");case 1:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),n}(C),H=new G,k={};function V(e){return X.apply(this,arguments)}function X(){return(X=(0,d.A)((0,p.A)().mark((function e(n){return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return k[n]=k[n]||R.createDevice({adapters:[U,H],type:n,height:0,createCanvasContext:{container:(B||((B=document.createElement("div")).style.display="none",document.body.appendChild(B)),B)}}),e.next=3,k[n];case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var j=(0,_.vt)((function(e){return{deviceType:void 0,deviceError:void 0,device:void 0,setDeviceType:(n=(0,d.A)((0,p.A)().mark((function n(t){var i,r;return(0,p.A)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,V(t);case 3:r=n.sent,n.next=9;break;case 6:n.prev=6,n.t0=n.catch(0),i=n.t0.message;case 9:return n.abrupt("return",e((function(e){return{deviceType:t,deviceError:i,device:r}})));case 10:case"end":return n.stop()}}),n,null,[[0,6]])}))),function(e){return n.apply(this,arguments)})};var n}));j.getState().setDeviceType("webgl");var W=t(6065),z=W.Ay.div.withConfig({displayName:"tabs__Header",componentId:"sc-1sp8y0p-0"})(["display:flex;flex-direction:row;& > * + *{margin-left:2px;}"]),K=W.Ay.div.withConfig({displayName:"tabs__HeaderItem",componentId:"sc-1sp8y0p-1"})((function(e){return"\n  cursor: pointer;\n  padding: 10px 20px;\n  font-weight: bold;\n  &:hover {\n    background-color: #eeefef;\n  }\n  "+(e.isSelected?"\n    color: #276EF1;\n    border-bottom: 4px solid #276EF1;\n  ":"")+"\n"})),Y=W.Ay.div.withConfig({displayName:"tabs__Body",componentId:"sc-1sp8y0p-2"})(["background-color:rgb(250,248,245);"]),q=function(e){var n,t,r=e.children,o=i.Children.toArray(r),a=(0,i.useState)((null==(n=o[0])?void 0:n.props.tag)||(null==(t=o[0])?void 0:t.props.title)),s=a[0],u=a[1],c=void 0!==e.selectedItem?e.selectedItem:s,f=void 0!==e.setSelectedItem?e.setSelectedItem:u;return o.some((function(e){return(e.props.tag||e.props.title)===c}))||(c=s),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(z,{children:o.map((function(e){return(0,l.jsx)(K,{isSelected:(e.props.tag||e.props.title)===c,onClick:function(){return f(e.props.tag||e.props.title)},children:e.props.title},e.props.title)}))}),(0,l.jsx)(Y,{children:o.find((function(e){return(e.props.tag||e.props.title)===c}))})]})},Z=function(e){var n=e.children;return(0,l.jsx)(l.Fragment,{children:n})},Q=t(1993),J={devices:["webgl2","webgpu"]},$=function(e){e=Object.assign({},J,e);var n=j((function(e){return e.deviceType})),t=j((function(e){return e.deviceError})),i=j((function(e){return e.setDeviceType}));return(0,l.jsxs)(q,{selectedItem:n,setSelectedItem:i,children:[e.devices.includes("webgl2")&&(0,l.jsx)(Z,{title:"WebGL2",tag:"webgl",children:t},"WebGL2"),e.devices.includes("webgpu")&&(0,l.jsx)(Z,{title:"WebGPU",tag:"webgpu",children:t},"WebGPU")]})},ee=function(e){return(0,l.jsx)(Q.A,{children:function(){return(0,l.jsx)($,Object.assign({},e))}})};function ne(e,n){return e?e.limits[n]?String(e.limits[n]):"0 \u274c":"N/A"}function te(e,n){return e?e.features.has(n)?"\u2705":"\u274c":"N/A"}function ie(e,n){var t=e&&e.isTextureFormatSupported(n);return e?t?"\u2705":"\u274c":"N/A"}function re(e,n){var t=e&&e.isTextureFormatSupported(n)&&e.isTextureFormatFilterable(n);return e?t?"\u2705":"\u274c":"N/A"}var oe=function(e){var n=e.f,t=j((function(e){return e.device})),i=t?t.info[n]:"N/A";return(0,l.jsx)("code",{style:{color:"darkgreen"},children:i})},ae=function(e){var n=e.f,t=j((function(e){return e.device}));return(0,l.jsx)("code",{style:{color:"darkgreen"},children:ne(t,n)})},se=function(e){var n=e.f,t=j((function(e){return e.device}));return(0,l.jsx)("span",{children:te(t,n)})},le=function(e){var n=e.f,t=j((function(e){return e.device}));return(0,l.jsx)("span",{children:ie(t,n)},n)},ue=function(e){var n=e.f,t=j((function(e){return e.device}));return(0,l.jsx)("span",{children:re(t,n)})},ce=function(e){var n=e.f,t=j((function(e){return e.device})),i=n,r=t&&t.isTextureFormatSupported(i)&&t.isTextureFormatRenderable(i);return t?r?"\u2705":"\u274c":"N/A"};var fe,pe=t(6237),de=0,_e=function(){function e(n){if(this.device=null,this.canvas=null,this.animationProps=null,this.timeline=null,this.needsRedraw="initialized",this._initialized=!1,this._running=!1,this._animationFrameId=null,this._nextFramePromise=null,this._resolveNextFrame=null,this._cpuStartTime=0,this._error=null,this.props=Object.assign({},e.defaultAnimationLoopProps,n),!(n=this.props).device)throw new Error("No device provided");this.stats=n.stats||new pe.A({id:"animation-loop-stats"}),this.cpuTime=this.stats.get("CPU Time"),this.gpuTime=this.stats.get("GPU Time"),this.frameRate=this.stats.get("Frame Rate"),this.setProps({autoResizeViewport:n.autoResizeViewport}),this.start=this.start.bind(this),this.stop=this.stop.bind(this),this._onMousemove=this._onMousemove.bind(this),this._onMouseleave=this._onMouseleave.bind(this)}var n=e.prototype;return n.destroy=function(){this.stop(),this._setDisplay(null)},n.delete=function(){this.destroy()},n.setError=function(e){var n;if(this.props.onError(e),this._error=Error(),(null==(n=this.device)?void 0:n.getDefaultCanvasContext().canvas)instanceof HTMLCanvasElement){var t=document.createElement("h1");t.innerHTML=e.message,t.style.position="absolute",t.style.top="20%",t.style.left="10px",t.style.color="black",t.style.backgroundColor="red",document.body.appendChild(t)}},n.setNeedsRedraw=function(e){return this.needsRedraw=this.needsRedraw||e,this},n.setProps=function(e){return"autoResizeViewport"in e&&(this.props.autoResizeViewport=e.autoResizeViewport||!1),this},n.start=function(){var e=(0,d.A)((0,p.A)().mark((function e(){var n;return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._running){e.next=2;break}return e.abrupt("return",this);case 2:if(this._running=!0,e.prev=3,this._initialized){e.next=11;break}return this._initialized=!0,e.next=8,this._initDevice();case 8:return this._initialize(),e.next=11,this.props.onInitialize(this._getAnimationProps());case 11:if(this._running){e.next=13;break}return e.abrupt("return",null);case 13:return this._cancelAnimationFrame(),this._requestAnimationFrame(),e.abrupt("return",this);case 17:throw e.prev=17,e.t0=e.catch(3),n=e.t0 instanceof Error?e.t0:new Error("Unknown error"),this.props.onError(n),n;case 22:case"end":return e.stop()}}),e,this,[[3,17]])})));return function(){return e.apply(this,arguments)}}(),n.stop=function(){return this._running&&(this.animationProps&&!this._error&&this.props.onFinalize(this.animationProps),this._cancelAnimationFrame(),this._nextFramePromise=null,this._resolveNextFrame=null,this._running=!1),this},n.redraw=function(){var e;return null!=(e=this.device)&&e.isLost||this._error||(this._beginFrameTimers(),this._setupFrame(),this._updateAnimationProps(),this._renderFrame(this._getAnimationProps()),this._clearNeedsRedraw(),this._resolveNextFrame&&(this._resolveNextFrame(this),this._nextFramePromise=null,this._resolveNextFrame=null),this._endFrameTimers()),this},n.attachTimeline=function(e){return this.timeline=e,this.timeline},n.detachTimeline=function(){this.timeline=null},n.waitForRender=function(){var e=this;return this.setNeedsRedraw("waitForRender"),this._nextFramePromise||(this._nextFramePromise=new Promise((function(n){e._resolveNextFrame=n}))),this._nextFramePromise},n.toDataURL=function(){var e=(0,d.A)((0,p.A)().mark((function e(){return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.setNeedsRedraw("toDataURL"),e.next=3,this.waitForRender();case 3:if(!(this.canvas instanceof HTMLCanvasElement)){e.next=5;break}return e.abrupt("return",this.canvas.toDataURL());case 5:throw new Error("OffscreenCanvas");case 6:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}(),n._initialize=function(){this._startEventHandling(),this._initializeAnimationProps(),this._updateAnimationProps(),this._resizeViewport()},n._setDisplay=function(e){this.display&&(this.display.destroy(),this.display.animationLoop=null),e&&(e.animationLoop=this),this.display=e},n._requestAnimationFrame=function(){var e;this._running&&(this._animationFrameId=(e=this._animationFrame.bind(this),"undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame(e):setTimeout(e,1e3/60)))},n._cancelAnimationFrame=function(){var e;null!==this._animationFrameId&&(e=this._animationFrameId,"undefined"!=typeof window&&window.cancelAnimationFrame?window.cancelAnimationFrame(e):clearTimeout(e),this._animationFrameId=null)},n._animationFrame=function(){this._running&&(this.redraw(),this._requestAnimationFrame())},n._renderFrame=function(e){var n;this.display?this.display._renderFrame(e):(this.props.onRender(this._getAnimationProps()),null==(n=this.device)||n.submit())},n._clearNeedsRedraw=function(){this.needsRedraw=!1},n._setupFrame=function(){this._resizeViewport()},n._initializeAnimationProps=function(){var e,n=null==(e=this.device)?void 0:e.getDefaultCanvasContext();if(!this.device||!n)throw new Error("loop");var t=null==n?void 0:n.canvas,i=n.props.useDevicePixels;this.animationProps={animationLoop:this,device:this.device,canvasContext:n,canvas:t,useDevicePixels:i,timeline:this.timeline,needsRedraw:!1,width:1,height:1,aspect:1,time:0,startTime:Date.now(),engineTime:0,tick:0,tock:0,_mousePosition:null}},n._getAnimationProps=function(){if(!this.animationProps)throw new Error("animationProps");return this.animationProps},n._updateAnimationProps=function(){if(this.animationProps){var e=this._getSizeAndAspect(),n=e.width,t=e.height,i=e.aspect;n===this.animationProps.width&&t===this.animationProps.height||this.setNeedsRedraw("drawing buffer resized"),i!==this.animationProps.aspect&&this.setNeedsRedraw("drawing buffer aspect changed"),this.animationProps.width=n,this.animationProps.height=t,this.animationProps.aspect=i,this.animationProps.needsRedraw=this.needsRedraw,this.animationProps.engineTime=Date.now()-this.animationProps.startTime,this.timeline&&this.timeline.update(this.animationProps.engineTime),this.animationProps.tick=Math.floor(this.animationProps.time/1e3*60),this.animationProps.tock++,this.animationProps.time=this.timeline?this.timeline.getTime():this.animationProps.engineTime}},n._initDevice=function(){var e=(0,d.A)((0,p.A)().mark((function e(){return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.props.device;case 2:if(this.device=e.sent,this.device){e.next=5;break}throw new Error("No device provided");case 5:this.canvas=this.device.getDefaultCanvasContext().canvas||null;case 6:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}(),n._createInfoDiv=function(){if(this.canvas&&this.props.onAddHTML){var e=document.createElement("div");document.body.appendChild(e),e.style.position="relative";var n=document.createElement("div");n.style.position="absolute",n.style.left="10px",n.style.bottom="10px",n.style.width="300px",n.style.background="white",this.canvas instanceof HTMLCanvasElement&&e.appendChild(this.canvas),e.appendChild(n);var t=this.props.onAddHTML(n);t&&(n.innerHTML=t)}},n._getSizeAndAspect=function(){var e,n;if(!this.device)return{width:1,height:1,aspect:1};var t=(null==(e=this.device)?void 0:e.getDefaultCanvasContext().getDevicePixelSize())||[1,1],i=t[0],r=t[1],o=1,a=null==(n=this.device)?void 0:n.getDefaultCanvasContext().canvas;return a&&a.clientHeight?o=a.clientWidth/a.clientHeight:i>0&&r>0&&(o=i/r),{width:i,height:r,aspect:o}},n._resizeViewport=function(){this.props.autoResizeViewport&&this.device.gl&&this.device.gl.viewport(0,0,this.device.gl.drawingBufferWidth,this.device.gl.drawingBufferHeight)},n._beginFrameTimers=function(){this.frameRate.timeEnd(),this.frameRate.timeStart(),this.cpuTime.timeStart()},n._endFrameTimers=function(){this.cpuTime.timeEnd()},n._startEventHandling=function(){this.canvas&&(this.canvas.addEventListener("mousemove",this._onMousemove.bind(this)),this.canvas.addEventListener("mouseleave",this._onMouseleave.bind(this)))},n._onMousemove=function(e){e instanceof MouseEvent&&(this._getAnimationProps()._mousePosition=[e.offsetX,e.offsetY])},n._onMouseleave=function(e){this._getAnimationProps()._mousePosition=null},e}();function he(e,n){var t=this,i=null,r=(null==n?void 0:n.device)||R.createDevice({id:"animation-loop",adapters:null==n?void 0:n.adapters,createCanvasContext:!0}),o=new _e(Object.assign({},n,{device:r,onInitialize:function(n){return(0,d.A)((0,p.A)().mark((function t(){var r;return(0,p.A)().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=new e(n),t.next=3,null==(r=i)?void 0:r.onInitialize(n);case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t)})))()},onRender:function(e){var n;return null==(n=i)?void 0:n.onRender(e)},onFinalize:function(e){var n;return null==(n=i)?void 0:n.onFinalize(e)}}));return o.getInfo=function(){return t.AnimationLoopTemplateCtor.info},o}_e.defaultAnimationLoopProps={device:null,onAddHTML:function(){return""},onInitialize:(fe=(0,d.A)((0,p.A)().mark((function e(){return(0,p.A)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",null);case 1:case"end":return e.stop()}}),e)}))),function(){return fe.apply(this,arguments)}),onRender:function(){},onFinalize:function(){},onError:function(e){return console.error(e)},stats:R.stats.get("animation-loop-"+de++),autoResizeViewport:!1};var me=t(147);"undefined"!=typeof window&&(window.website=!0);var ve=function(e){var n,t,r=(0,i.useState)(null),o=r[0],a=r[1],s=(0,i.useRef)(new WeakMap),u=(0,i.useRef)(null),c=j((function(e){return e.deviceType}));t=e.container||"luma-example-container-"+c,(0,i.useEffect)((function(){if(o&&!s.current.get(o)){s.current.set(o,!0);var n=null,i=null,r=function(){var r=(0,d.A)((0,p.A)().mark((function r(){var a,s;return(0,p.A)().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,R.createDevice({adapters:[U,H],type:c,createCanvasContext:{canvas:o,container:t}});case 2:i=r.sent,n=he(e.template,{device:i,autoResizeViewport:!0,autoResizeDrawingBuffer:!0}),null==(a=n)||a.start(),s="https://raw.githubusercontent.com/visgl/luma.gl/master",e.directory?(0,me.Qj)(s+"/examples/"+e.directory+"/"+e.id+"/"):(0,me.Qj)(s+"/website/static/images/");case 7:case"end":return r.stop()}}),r)})));return function(){return r.apply(this,arguments)}}();return u.current=Promise.resolve(u.current).then((function(){r().catch((function(e){console.error("start "+c+" failed",e)}))})),function(){u.current=Promise.resolve(u.current).then((function(){n&&(n.destroy(),n=null),i&&i.destroy()})).catch((function(e){console.error("unmounting "+c+" failed",e)}))}}}),[c,o]);var f,_,h=null==(n=e.template)?void 0:n.info;return(0,l.jsxs)("div",{style:{position:"relative"},children:[(0,l.jsx)("canvas",{ref:a,style:{width:"100%",height:"100%"}},c),(0,l.jsxs)("div",{style:{position:"absolute",boxShadow:"5px 5px 4px grey",backgroundColor:"#F0F0F0F0",top:20,right:20,width:200,height:250,padding:10},children:[(0,l.jsx)("h3",{children:(f=e.id,_=f.split("-"),_.map(ge).join(" "))}),h&&(0,l.jsx)("div",{dangerouslySetInnerHTML:{__html:h}}),e.children]})]})};function ge(e){return e.charAt(0).toUpperCase()+e.slice(1)}},8670:(e,n,t)=>{t.d(n,{Ys:()=>h,ww:()=>T});var i=t(3845),r=t(6540),o=t(3156),a=t(5176),s=t(6065),l="@media screen and (max-width: 480px)",u=s.Ay.div.withConfig({displayName:"examples-index__ExampleHeader",componentId:"sc-dc0lb5-0"})(["font:bold 20px/28px var(--ifm-font-family-base);color:var(--ifm-color-gray-800);margin:0 20px;border-bottom:1px solid 20px;display:inline-block;padding:20px 20px 4px 0;"]),c=s.Ay.main.withConfig({displayName:"examples-index__MainExamples",componentId:"sc-dc0lb5-1"})(["padding:16px 0;"]),f=s.Ay.main.withConfig({displayName:"examples-index__ExamplesGroup",componentId:"sc-dc0lb5-2"})(["display:flex;flex-wrap:wrap;padding:16px;"]),p=s.Ay.a.withConfig({displayName:"examples-index__ExampleCard",componentId:"sc-dc0lb5-3"})(["cursor:pointer;text-decoration:none;width:50%;max-width:240px;line-height:0;outline:none;padding:4px;position:relative;img{transition-property:filter;transition-duration:var(--ifm-transition-slow);transition-timing-function:var(--ifm-transition-timing-default);}&:hover{box-shadow:var(--ifm-global-shadow-md);}&:hover img{filter:contrast(0.2);}","{width:33%;min-width:200px;}@media screen and (max-width:632px){width:50%;}"],l),d=s.Ay.div.withConfig({displayName:"examples-index__ExampleTitle",componentId:"sc-dc0lb5-4"})(["position:absolute;display:flex;justify-content:center;flex-direction:column;color:var(--ifm-color-white);font-size:1.5em;text-align:center;line-height:initial;width:90%;height:90%;top:5%;left:5%;border:solid 1px var(--ifm-color-white);opacity:0;transition-property:opacity;transition-duration:var(--ifm-transition-slow);transition-timing-function:var(--ifm-transition-timing-default);&:hover{opacity:1;}"]);function _(e,n){for(var t,o=e.label,s=e.items,l=[],c=[],h=(0,i.A)(s);!(t=h()).done;){var m=t.value;"category"===m.type?c.push(m):"index"!==m.docId&&l.push(m)}return r.createElement(r.Fragment,null,o&&r.createElement(u,null,o),l.length>0&&r.createElement(f,null,l.map((function(e){return function(e,n){var t=(0,a.Ay)(n(e)),i=e.label,o=e.href;return r.createElement(p,{key:i,href:o},r.createElement("img",{width:"100%",src:t,alt:i}),r.createElement(d,null,r.createElement("span",null,i)))}(e,n)}))),c.map((function(e){return _(e,n)})))}function h(e){var n=e.getThumbnail,t=(0,o.t)();return r.createElement(c,null,_(t,n))}var m=t(1059),v=s.Ay.section.withConfig({displayName:"home__Banner",componentId:"sc-jldu3r-0"})(["position:relative;height:30rem;background:var(--ifm-color-gray-400);color:",";z-index:0;","{height:80vh;}"],(function(e){return"light"===e.theme?"var(--ifm-color-gray-900)":"var(--ifm-color-gray-200)"}),l),g=s.Ay.div.withConfig({displayName:"home__Container",componentId:"sc-jldu3r-1"})(["position:relative;padding:2rem;max-width:80rem;width:100%;height:100%;margin:0;"]),E=(0,s.Ay)(g).withConfig({displayName:"home__BannerContainer",componentId:"sc-jldu3r-2"})(["position:absolute;bottom:0;height:auto;padding-left:4rem;z-index:0;pointer-events:none;"]),A=s.Ay.div.withConfig({displayName:"home__HeroExampleContainer",componentId:"sc-jldu3r-3"})(["position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;"]),R=s.Ay.h1.withConfig({displayName:"home__ProjectName",componentId:"sc-jldu3r-4"})(["font-size:5em;line-height:1;text-transform:uppercase;letter-spacing:4px;font-weight:700;margin:0;margin-bottom:16px;"]),b=s.Ay.a.withConfig({displayName:"home__GetStartedLink",componentId:"sc-jldu3r-5"})(["pointer-events:all;font-size:12px;line-height:44px;letter-spacing:2px;font-weight:bold;margin:24px 0;padding:0 4rem;display:inline-block;text-decoration:none;transition:background-color 250ms ease-in,color 250ms ease-in;border:solid 2px var(--ifm-color-primary);color:inherit;border-image:linear-gradient( to right,var(--ifm-color-gray-700) 0%,var(--ifm-color-gray-400) 100% );border-image-slice:2;&:visited{color:inherit;}&:active{color:var(--ifm-color-white);}&:hover{color:var(--ifm-color-white);background-color:var(--ifm-color-primary);}"]);function T(e){var n=e.HeroExample,t=e.getStartedLink,i=void 0===t?"./docs":t,o=e.theme,a=void 0===o?"light":o,s=(0,m.A)().siteConfig;return r.createElement(v,{theme:a},r.createElement(A,null,n&&r.createElement(n,null)),r.createElement(E,null,r.createElement(R,null,s.title),r.createElement("p",null,s.tagline),i&&r.createElement(b,{href:i},"GET STARTED")))}s.Ay.div.withConfig({displayName:"spinner__SpinnerContainer",componentId:"sc-5xumfh-0"})(["height:18px;line-height:18px;font-size:10px;> div{white-space:nowrap;left:0;bottom:0;position:absolute;height:18px;padding-left:20px;transition:width 0.5s;}.spinner--fill{background:$primary;color:$white;overflow:hidden;}.spinner--text{color:$black-40;}&.done{height:0 !important;line-height:0;font-size:0;transition:height 0.5s 1s;> div{height:0 !important;transition:height 0.5s 1s;}}"]);s.Ay.div.withConfig({displayName:"input__InputContainer",componentId:"sc-1f01vvx-0"})(["position:relative;width:100%;&:last-child{margin-bottom:20px;}> *{vertical-align:middle;white-space:nowrap;}label{display:inline-block;width:40%;margin-right:10%;margin-top:2px;margin-bottom:2px;}input,a,button{background:var(--ifm-color-white);font-size:0.9em;text-transform:none;text-overflow:ellipsis;overflow:hidden;display:inline-block;padding:0 4px;margin:0;width:50%;height:20px;line-height:1.833;text-align:left;}button{color:initial;}button:disabled{color:var(--ifm-color-gray-500);cursor:default;background:var(--ifm-color-gray-300);}input{border:solid 1px var(--ifm-color-gray-500);&:disabled{background:var(--ifm-color-gray-300);}&[type='checkbox']{height:auto;}}.tooltip{left:50%;top:24px;opacity:0;pointer-events:none;transition:opacity 200ms;}&:hover .tooltip{opacity:1;}"]);s.Ay.div.withConfig({displayName:"info-panel__PanelContainer",componentId:"sc-3c5qm2-0"})(["font-size:14px;position:absolute;top:0;right:0;width:344px;background:var(--ifm-color-white);box-shadow:var(--ifm-global-shadow-lw);margin:24px;padding:10px 24px;max-height:96%;overflow-x:hidden;overflow-y:auto;overflow-y:overlay;outline:none;z-index:1;","{width:auto;left:0;}"],l),s.Ay.div.withConfig({displayName:"info-panel__PanelExpander",componentId:"sc-3c5qm2-1"})(["display:none;width:16px;height:16px;font-family:serif;font-size:0.8em;text-align:center;line-height:16px;border-radius:50%;background:",";color:",";","{display:block;}"],(function(e){return e.$expanded?"none":"var(--ifm-color-gray-900)"}),(function(e){return e.$expanded?"var(--ifm-color-black)":"var(--ifm-color-white)"}),l),s.Ay.div.withConfig({displayName:"info-panel__PanelTitle",componentId:"sc-3c5qm2-2"})(["display:flex;align-items:center;justify-content:space-between;font:bold 1.25em var(--ifm-font-family-base);margin:8px 0;","{cursor:pointer;}"],l),s.Ay.div.withConfig({displayName:"info-panel__PanelContent",componentId:"sc-3c5qm2-3"})(["div > *{vertical-align:middle;white-space:nowrap;}div > label{display:inline-block;width:40%;margin-right:10%;color:var(--ifm-color-gray-800);margin-top:2px;margin-bottom:2px;}div > input,div > a,div > button,div > select{background:var(--ifm-color-white);font:normal 11px/16px var(--ifm-font-family-base);line-height:20px;text-transform:none;text-overflow:ellipsis;overflow:hidden;display:inline-block;padding:0 4px;width:50%;height:20px;text-align:left;}div > button{color:initial;}div > button:disabled{color:var(--ifm-color-gray-300);cursor:default;background:var(--ifm-color-gray-300);}div > input{border:solid 1px var(--ifm-color-gray-300);&:disabled{background:var(--ifm-color-white);}&[type='checkbox']{height:auto;}}p{margin-bottom:12px;white-space:initial;}","{display:",";}"],l,(function(e){return e.$expanded?"block":"none"})),s.Ay.a.withConfig({displayName:"info-panel__SourceLink",componentId:"sc-3c5qm2-4"})(["display:block;text-align:right;margin-top:8px;font:bold 12px/20px var(--ifm-font-family-base);color:var(--ifm-color-gray-800);","{display:",";}"],l,(function(e){return e.$expanded?"block":"none"})),s.Ay.div.withConfig({displayName:"info-panel__InfoPanelContent",componentId:"sc-3c5qm2-5"})(["hr{margin:12px -24px;}a{text-decoration:none;display:inline;color:var(--ifm-color-primary);}p{margin-bottom:16px;}.legend{display:inline-block;width:12px;height:12px;}.stat{text-transform:uppercase;font-size:0.833em;b{display:block;font-size:3em;font-weight:bold;line-height:1.833;}}hr{border:none;background:var(--ifm-color-gray-400);height:1px;}.layout{display:table;width:100%;> *{display:table-cell !important;}.col-1-3{width:33.33%;}.col-1-2{width:50%;}.text-right{text-align:right;}.text-center{text-align:center;}}"])}}]);