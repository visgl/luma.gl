/*! For license information please see 7201d8ac.c89832de.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[9877],{4261:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>i});var n=s(4848),t=s(8453);const a={},d="ShaderPassRenderer",o={id:"api-reference/engine/passes/shader-pass-renderer",title:"ShaderPassRenderer",description:"A ShaderPassRenderer takes an source texture and applies a sequence of ShaderPasses and returns an output texture that can be rendered to the screen.",source:"@site/../docs/api-reference/engine/passes/shader-pass-renderer.md",sourceDirName:"api-reference/engine/passes",slug:"/api-reference/engine/passes/shader-pass-renderer",permalink:"/docs/api-reference/engine/passes/shader-pass-renderer",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/engine/passes/shader-pass-renderer.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"ShaderFactory",permalink:"/docs/api-reference/engine/shader-factory"},next:{title:"Swap",permalink:"/docs/api-reference/engine/compute/swap"}},c={},i=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"<code>ShaderPassRendererProps</code>",id:"shaderpassrendererprops",level:3},{value:"<code>destroy()</code>",id:"destroy",level:3},{value:"<code>resize()</code>",id:"resize",level:3},{value:"<code>renderToTexture()</code>",id:"rendertotexture",level:3}];function h(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"shaderpassrenderer",children:"ShaderPassRenderer"}),"\n",(0,n.jsxs)(r.p,{children:["A",(0,n.jsx)(r.code,{children:" ShaderPassRenderer"})," takes an source texture and applies a sequence of ",(0,n.jsx)(r.code,{children:"ShaderPasses"})," and returns an output texture that can be rendered to the screen."]}),"\n",(0,n.jsx)(r.p,{children:"The primary purpose is to run postprocessing effects on rendered contents."}),"\n",(0,n.jsx)(r.p,{children:"Remarks:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.code,{children:"ShaderPassRenderer"})," instance will create two textures of the same size as the input texture. For a high resolution, high DPI screen these textures can consume considerable memory, which is a potential concern for mobile applications."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(r.p,{children:"TBA"}),"\n",(0,n.jsx)(r.h2,{id:"types",children:"Types"}),"\n",(0,n.jsx)(r.h3,{id:"shaderpassrendererprops",children:(0,n.jsx)(r.code,{children:"ShaderPassRendererProps"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"export type ShaderPassRendererProps = {\n  /** List of ShaderPasses to apply to the sourceTexture */\n  shaderPasses: ShaderPass[];\n  /** Optional typed ShaderInputs object for setting uniforms */\n  shaderInputs: ShaderInputs;\n};\n``\n\n## Methods\n\n### constructor\n\n```ts\nnew ShaderPassRenderer(device: Device, props: ShaderPassRendererProps);\n"})}),"\n",(0,n.jsx)(r.h3,{id:"destroy",children:(0,n.jsx)(r.code,{children:"destroy()"})}),"\n",(0,n.jsxs)(r.p,{children:["Destroys any resources created by the ",(0,n.jsx)(r.code,{children:"ShaderPassRenderer"})," (the two textures)"]}),"\n",(0,n.jsx)(r.h3,{id:"resize",children:(0,n.jsx)(r.code,{children:"resize()"})}),"\n",(0,n.jsx)(r.p,{children:"Resizes the internal textures."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"resize(width: number, height: number);\n"})}),"\n",(0,n.jsx)(r.h3,{id:"rendertotexture",children:(0,n.jsx)(r.code,{children:"renderToTexture()"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"renderToTexture(options: {sourceTexture: AsyncTexture; uniforms; bindings}): Texture | null;\n"})}),"\n",(0,n.jsxs)(r.p,{children:["A",(0,n.jsx)(r.code,{children:" ShaderPassRenderer"})," takes an source texture and applies a sequence of ",(0,n.jsx)(r.code,{children:"ShaderPasses"})," and returns an output texture of the same size that can be rendered to the screen."]}),"\n",(0,n.jsxs)(r.p,{children:["Returns: the rendered ",(0,n.jsx)(r.code,{children:"Texture"})," which can now be rendered to the screen, or ",(0,n.jsx)(r.code,{children:"null"})," if the initial texture is an async texture that has not yet been loaded."]})]})}function l(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},1020:(e,r,s)=>{var n=s(6540),t=Symbol.for("react.element"),a=Symbol.for("react.fragment"),d=Object.prototype.hasOwnProperty,o=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function i(e,r,s){var n,a={},i=null,h=null;for(n in void 0!==s&&(i=""+s),void 0!==r.key&&(i=""+r.key),void 0!==r.ref&&(h=r.ref),r)d.call(r,n)&&!c.hasOwnProperty(n)&&(a[n]=r[n]);if(e&&e.defaultProps)for(n in r=e.defaultProps)void 0===a[n]&&(a[n]=r[n]);return{$$typeof:t,type:e,key:i,ref:h,props:a,_owner:o.current}}r.Fragment=a,r.jsx=i,r.jsxs=i},4848:(e,r,s)=>{e.exports=s(1020)},8453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>o});var n=s(6540);const t={},a=n.createContext(t);function d(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);