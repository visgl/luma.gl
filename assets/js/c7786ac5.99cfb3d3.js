/*! For license information please see c7786ac5.99cfb3d3.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[4931],{2946:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var s=t(4848),r=t(8453);const i={},o="Testing",l={id:"developer-guide/testing",title:"Testing",description:"Testing webgl programs can be tricky...",source:"@site/../docs/developer-guide/testing.md",sourceDirName:"developer-guide",slug:"/developer-guide/testing",permalink:"/docs/developer-guide/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/developer-guide/testing.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Debugging",permalink:"/docs/developer-guide/debugging"},next:{title:"Profiling",permalink:"/docs/developer-guide/profiling"}},d={},a=[{value:"Test device creation",id:"test-device-creation",level:2},{value:"Accessing GPU in Node.js and CI environments",id:"accessing-gpu-in-nodejs-and-ci-environments",level:2},{value:"Render Tests",id:"render-tests",level:2},{value:"SnapshotTestRunner",id:"snapshottestrunner",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.p,{children:"Testing webgl programs can be tricky..."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"test-utils"}),"\n",(0,s.jsx)(n.li,{children:"probe"}),"\n",(0,s.jsx)(n.li,{children:"headless gl"}),"\n",(0,s.jsx)(n.li,{children:"puppeteer"}),"\n",(0,s.jsx)(n.li,{children:"..."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"test-device-creation",children:"Test device creation"}),"\n",(0,s.jsxs)(n.p,{children:["A small but still annoying issue is that creating too many devices in tests can\nlead to problems with context loss etc as the test scripts grow.\n",(0,s.jsx)(n.code,{children:"@luma.gl/test-utils"})," exports reusable test devices for WebGL and WebGPU."]}),"\n",(0,s.jsx)(n.h2,{id:"accessing-gpu-in-nodejs-and-ci-environments",children:"Accessing GPU in Node.js and CI environments"}),"\n",(0,s.jsx)(n.p,{children:"A frequent problem with WebGL and WebGPU libraries is that they are supported in browsers,\nbut tests typically run on CI machines in the cloud that often do not even have a GPU."}),"\n",(0,s.jsx)(n.p,{children:"luma.gl has integrations with headless gl and puppeteer that allows tests to be run outside of browser.s"}),"\n",(0,s.jsx)(n.h2,{id:"render-tests",children:"Render Tests"}),"\n",(0,s.jsx)(n.p,{children:"A powerful way to test GPU programs is to render into a texture and compare against a golden image.\nluma.gl provides a library that handles complications like waiting for resources to load before rendering the image,\nand doing pixel diffs that accept a small error tolerance."}),"\n",(0,s.jsx)(n.h2,{id:"snapshottestrunner",children:"SnapshotTestRunner"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@luma.gl/test-utils"})," provides this client-side utility for browser-based WebGL render tests."]}),"\n",(0,s.jsxs)(n.p,{children:["This class is intended to be used with ",(0,s.jsx)(n.code,{children:"BrowserTestDriver"})," from ",(0,s.jsx)(n.code,{children:"@probe.gl/test-utils"}),". Together they support the following workflow:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Launch a Puppeteer instance (headless or non-headless) to run a test application"}),"\n",(0,s.jsxs)(n.li,{children:["In the test application, create a canvas and ",(0,s.jsx)(n.code,{children:"WebGLContext"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["For each test case, render something to the ",(0,s.jsx)(n.code,{children:"WebGLContext"}),', take a screenshot, and perform pixel-diffing with a pre-defined "golden image". Report the matching result.']}),"\n",(0,s.jsx)(n.li,{children:"Proceed to the next test case until done."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"In your node.js start script:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// This is the script that runs in Node.js and starts the browser\nconst {BrowserTestDriver} = require('@probe.gl/test-utils');\nnew BrowserTestDriver().run({\n  server: {\n    // Bundles and serves the browser script\n    command: 'webpack-dev-server',\n    arguments: ['--env.render-test']\n  },\n  headless: true\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"In your script that is run on the browser:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const {SnapshotTestRunner} = require('@luma.gl/test-utils');\nconst {Cube} = require('@luma.gl/engine');\n\nconst TEST_CASES = [\n  {\n    name: 'Render A Cube',\n    // `onRender` receives animation props from the AnimationLoop\n    onRender: ({gl, done}) => {\n      const model = new Cube(gl);\n      model.draw(...);\n      // ready for capture and diffing\n      done();\n    },\n    goldenImage: './test/render/golden-images/cube.png'\n  }\n];\n\nnew TestRender({width: 800, height: 600})\n  .add(TEST_CASES)\n  .run({\n    onTestFail: window.browserTestDriver_fail\n  })\n  .then(window.browserTestDriver_finish);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1020:(e,n,t)=>{var s=t(6540),r=Symbol.for("react.element"),i=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,l=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function a(e,n,t){var s,i={},a=null,c=null;for(s in void 0!==t&&(a=""+t),void 0!==n.key&&(a=""+n.key),void 0!==n.ref&&(c=n.ref),n)o.call(n,s)&&!d.hasOwnProperty(s)&&(i[s]=n[s]);if(e&&e.defaultProps)for(s in n=e.defaultProps)void 0===i[s]&&(i[s]=n[s]);return{$$typeof:r,type:e,key:a,ref:c,props:i,_owner:l.current}}n.Fragment=i,n.jsx=a,n.jsxs=a},4848:(e,n,t)=>{e.exports=t(1020)},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);