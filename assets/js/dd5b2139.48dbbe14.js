/*! For license information please see dd5b2139.48dbbe14.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[8765],{355:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var s=n(4848),t=n(8453);const i={},o="BufferTransform",d={id:"api-reference/engine/compute/buffer-transform",title:"BufferTransform",description:"WebGPU not supported",source:"@site/../docs/api-reference/engine/compute/buffer-transform.md",sourceDirName:"api-reference/engine/compute",slug:"/api-reference/engine/compute/buffer-transform",permalink:"/docs/api-reference/engine/compute/buffer-transform",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/engine/compute/buffer-transform.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Computation",permalink:"/docs/api-reference/engine/compute/computation"},next:{title:"TextureTransform",permalink:"/docs/api-reference/engine/compute/texture-transform"}},a={},c=[{value:"Types",id:"types",level:2},{value:"<code>BufferTransformProps</code>",id:"buffertransformprops",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"<code>run(props: RenderPassProps)</code>",id:"runprops-renderpassprops",level:3},{value:"<code>getBuffer(varyingName : String) : Buffer</code>",id:"getbuffervaryingname--string--buffer",level:3},{value:"<code>readAsync(varyingName: string) : Promise&lt;Uint8Array&gt;</code>",id:"readasyncvaryingname-string--promiseuint8array",level:3}];function f(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"buffertransform",children:"BufferTransform"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://img.shields.io/badge/webgpu-no-red.svg?style=flat-square%22",alt:"WebGPU not supported"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"BufferTransform"})," manages resources and state required for doing TransformFeedback based GPU computations reading from and/or writing to ",(0,s.jsx)(r.code,{children:"Buffer"})," objects."]}),"\n",(0,s.jsx)(r.h2,{id:"types",children:"Types"}),"\n",(0,s.jsx)(r.h3,{id:"buffertransformprops",children:(0,s.jsx)(r.code,{children:"BufferTransformProps"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"export type BufferTransformProps = Omit<ModelProps, 'fs'> & {\n  fs?: ModelProps['fs']; // override as optional\n  feedbackBuffers?: Record<string, Buffer | BufferRange>;\n};\n"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"props.feedbackBuffers"})," (",(0,s.jsx)(r.code,{children:"Object"}),", Optional) - Map of output buffers that the shaders will write to. Key and value pairs, where key is the name of vertex shader varying and value is the corresponding ",(0,s.jsx)(r.code,{children:"Buffer"})," object or buffer params object. If a buffer params object is specified, it will contain following fields, these can be used to capture data into the buffer at particular offset and size.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"buffer"}),"=(Buffer) - Buffer object to be bound."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"byteOffset"}),"=(Number, default: 0) - Byte offset that is used to start recording the data in the buffer."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"byteSize"}),"=(Number, default: remaining buffer size) - Size in bytes that is used for recording the data."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"constructor",children:"constructor"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"new BufferTransform(device: Device, props: BufferTransformProps)\n"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"device"})," (",(0,s.jsx)(r.code,{children:"Device"}),") - device"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"props.feedbackBuffers"})," - Map of output buffers that the shaders will write to. Key and value pairs, where key is the name of vertex shader varying and value is the corresponding ",(0,s.jsx)(r.code,{children:"Buffer"})," object or buffer params object. If a buffer params object is specified, it will contain following fields, these can be used to capture data into the buffer at particular offset and size.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"buffer"}),"=(Buffer) - Buffer object to be bound."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"byteOffset"}),"=(Number, default: 0) - Byte offset that is used to start recording the data in the buffer."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"byteSize"}),"=(Number, default: remaining buffer size) - Size in bytes that is used for recording the data."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"props.sourceBuffers"})," (",(0,s.jsx)(r.code,{children:"Object"}),", Optional) - key and value pairs, where key is the name of vertex shader attribute and value is the corresponding ",(0,s.jsx)(r.code,{children:"Attribute"}),", ",(0,s.jsx)(r.code,{children:"Buffer"})," or attribute descriptor object."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"props.varyings"})," (",(0,s.jsx)(r.code,{children:"Array"}),", Optional) - Array of vertex shader varyings names. When not provided this can be deduced from ",(0,s.jsx)(r.code,{children:"feedbackBuffers"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"runprops-renderpassprops",children:(0,s.jsx)(r.code,{children:"run(props: RenderPassProps)"})}),"\n",(0,s.jsx)(r.p,{children:"Updates buffer bindings for one or more source or feedback buffers."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"props"})," (",(0,s.jsx)(r.code,{children:"Object"}),") - contains following data.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"sourceBuffers"})," (",(0,s.jsx)(r.code,{children:"Object"}),", Optional) - key and value pairs, where key is the name of vertex shader attribute and value is the corresponding ",(0,s.jsx)(r.code,{children:"Attribute"}),", ",(0,s.jsx)(r.code,{children:"Buffer"})," or attribute descriptor object."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"feedbackBuffers"})," (",(0,s.jsx)(r.code,{children:"Object"}),", Optional) - key and value pairs, where key is the name of vertex shader varying and value is the corresponding ",(0,s.jsx)(r.code,{children:"Buffer"})," object or buffer params object. If a buffer params object is specified, it will contain following fields, these can be used to capture data into the buffer at particular offset and size.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"buffer"}),"=(Buffer) - Buffer object to be bound."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"byteOffset"}),"=(Number, default: 0) - Byte offset that is used to start recording the data in the buffer."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"byteSize"}),"=(Number, default: remaining buffer size) - Size in bytes that is used for recording the data."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"getbuffervaryingname--string--buffer",children:(0,s.jsx)(r.code,{children:"getBuffer(varyingName : String) : Buffer"})}),"\n",(0,s.jsx)(r.p,{children:"Returns current feedback buffer corresponding to given varying name."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"varyingName"})," (",(0,s.jsx)(r.code,{children:"String"}),") - varying name."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"readasyncvaryingname-string--promiseuint8array",children:(0,s.jsx)(r.code,{children:"readAsync(varyingName: string) : Promise<Uint8Array>"})}),"\n",(0,s.jsx)(r.p,{children:"Reads and returns data from current feedback buffer corresponding to the given varying name."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"varyingName"})," - when specified, first checks if there is a corresponding feedback buffer, if so reads data from this buffer and returns. When not specified, there must be target texture and data is read from this texture and returned."]}),"\n"]})]})}function l(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},1020:(e,r,n)=>{var s=n(6540),t=Symbol.for("react.element"),i=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,d=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a={key:!0,ref:!0,__self:!0,__source:!0};function c(e,r,n){var s,i={},c=null,f=null;for(s in void 0!==n&&(c=""+n),void 0!==r.key&&(c=""+r.key),void 0!==r.ref&&(f=r.ref),r)o.call(r,s)&&!a.hasOwnProperty(s)&&(i[s]=r[s]);if(e&&e.defaultProps)for(s in r=e.defaultProps)void 0===i[s]&&(i[s]=r[s]);return{$$typeof:t,type:e,key:c,ref:f,props:i,_owner:d.current}}r.Fragment=i,r.jsx=c,r.jsxs=c},4848:(e,r,n)=>{e.exports=n(1020)},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>d});var s=n(6540);const t={},i=s.createContext(t);function o(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);