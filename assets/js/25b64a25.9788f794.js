/*! For license information please see 25b64a25.9788f794.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[8922],{4468:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var s=n(4848),t=n(8453);const a={},i="Using GPU Parameters",d={id:"api-guide/gpu/gpu-parameters",title:"Using GPU Parameters",description:"luma.gl provides a unified API for controlling GPU parameters providing control of GPU pipeline features such as culling, depth and stencil buffers, blending, clipping etc.",source:"@site/../docs/api-guide/gpu/gpu-parameters.md",sourceDirName:"api-guide/gpu",slug:"/api-guide/gpu/gpu-parameters",permalink:"/docs/api-guide/gpu/gpu-parameters",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-guide/gpu/gpu-parameters.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"How Rendering Works",permalink:"/docs/api-guide/gpu/gpu-rendering"},next:{title:"Understanding Bindings",permalink:"/docs/api-guide/gpu/gpu-bindings"}},l={},c=[{value:"Usage",id:"usage",level:2},{value:"GPU Pipeline Overview",id:"gpu-pipeline-overview",level:2},{value:"Parameter Mutability",id:"parameter-mutability",level:2},{value:"Dynamic RenderPass Parameters",id:"dynamic-renderpass-parameters",level:2},{value:"Fixed RenderPass Parameters",id:"fixed-renderpass-parameters",level:2}];function o(e){const r={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"using-gpu-parameters",children:"Using GPU Parameters"}),"\n",(0,s.jsx)(r.p,{children:"luma.gl provides a unified API for controlling GPU parameters providing control of GPU pipeline features such as culling, depth and stencil buffers, blending, clipping etc."}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(r.p,{children:"To set up depth testing"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"const value = device.createRenderPipeline({\n  parameters: {\n    depthWriteEnabled: true,\n    depthCompare: 'less-equal'\n  },\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"const value = device.createRenderPipeline({\n  parameters: {\n    depthWriteEnabled: true,\n    depthCompare: 'less-equal'\n  },\n  targets: [\n    {\n      blendColor: ...,\n\n    }\n  ]\n});\n\nconst framebuffer = device.createFramebuffer({\n  colorAttachments: {clearColor: [1, 0, 0]},\n})\n\nconst device.beginRenderPass({\n  framebuffer,\n  parameters: {\n\n  }\n})\n\nrenderPass.setPipeline(pipeline);\nrenderPass.setParameters({viewport: MAIN_MAP})\nrenderPass.draw();\nrenderPass.setParameters({viewport: MINI_MAP})\nrenderPass.draw();\n"})}),"\n",(0,s.jsx)(r.h2,{id:"gpu-pipeline-overview",children:"GPU Pipeline Overview"}),"\n",(0,s.jsx)(r.p,{children:"Parameters control the GPU pipeline and can be GPU Pipeline Stages"}),"\n",(0,s.jsx)(r.p,{children:"Describes luma.gl setting names and values"}),"\n",(0,s.jsxs)(r.ol,{start:"0",children:["\n",(0,s.jsx)(r.li,{children:"Vertex Fetch (buffers)"}),"\n",(0,s.jsx)(r.li,{children:"Vertex Shader"}),"\n",(0,s.jsxs)(r.li,{children:["Primitive assembly (",(0,s.jsx)(r.code,{children:"topology"}),")"]}),"\n",(0,s.jsx)(r.li,{children:"Rasterization (multisampling parameters)"}),"\n",(0,s.jsxs)(r.li,{children:["Fragment shader ",(0,s.jsx)(r.code,{children:"Framebuffer"})]}),"\n",(0,s.jsx)(r.li,{children:"Stencil test and operation (stencil parameters)"}),"\n",(0,s.jsx)(r.li,{children:"Depth test and write (depth parameters)"}),"\n",(0,s.jsxs)(r.li,{children:["Output merging, controlled by ",(0,s.jsx)(r.code,{children:"Framebuffer"})]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"parameter-mutability",children:"Parameter Mutability"}),"\n",(0,s.jsxs)(r.p,{children:["Most luma.gl parameters are stored on the ",(0,s.jsx)(r.code,{children:"RenderPipeline"})," or ",(0,s.jsx)(r.code,{children:"RenderPass"})," classes which are either fully or partially immutable, meaning that parameters are fixed when these objects are created, and cannot be changed without creating new resources. The following table summarizes the situation:"]}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Parameter Mutability"}),(0,s.jsx)(r.th,{children:"Examples"}),(0,s.jsx)(r.th,{children:"Constraint"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:["Dynamic ",(0,s.jsx)(r.code,{children:"RenderPass"})," parameters"]}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"viewport"}),", ",(0,s.jsx)(r.code,{children:"scissor"}),", ",(0,s.jsx)(r.code,{children:"blendConstant"})]}),(0,s.jsx)(r.td,{children:"Can be freely changed between draw calls."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:["Fixed ",(0,s.jsx)(r.code,{children:"RenderPass"})," parameters"]}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"clearColors"}),", ",(0,s.jsx)(r.code,{children:"discard"}),", ",(0,s.jsx)(r.code,{children:"depthClearValue"}),"..."]}),(0,s.jsxs)(r.td,{children:["Can not be changed. A new ",(0,s.jsx)(r.code,{children:"RenderPass"})," must be created."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:["Fixed ",(0,s.jsx)(r.code,{children:"RenderPipeline"})," parameters"]}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"cullMode"}),", ",(0,s.jsx)(r.code,{children:"frontFace"}),", ",(0,s.jsx)(r.code,{children:"depthWriteEnabled"}),", ..."]}),(0,s.jsxs)(r.td,{children:["Can not be changed. A new ",(0,s.jsx)(r.code,{children:"RenderPipeline"})," must be created."]})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"dynamic-renderpass-parameters",children:"Dynamic RenderPass Parameters"}),"\n",(0,s.jsxs)(r.p,{children:["The only parameters that can be changed at any time (using ",(0,s.jsx)(r.code,{children:"renderPass.setParameters()"}),") are viewport size, scissor rectangle, and blend constant"]}),"\n",(0,s.jsx)(r.h2,{id:"fixed-renderpass-parameters",children:"Fixed RenderPass Parameters"}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.code,{children:"RenderPass"})," holds parameters specifying how color and depth / stencil attachments should be cleared (clear colors, values), discarded etc."]}),"\n",(0,s.jsxs)(r.p,{children:["Note that there is no explicit ",(0,s.jsx)(r.code,{children:"clear"})," function in the luma.gl v9 API. Instead attachments are cleared when a ",(0,s.jsx)(r.code,{children:"RenderPass"})," is created (begins),"]})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},1020:(e,r,n)=>{var s=n(6540),t=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,d=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,r,n){var s,a={},c=null,o=null;for(s in void 0!==n&&(c=""+n),void 0!==r.key&&(c=""+r.key),void 0!==r.ref&&(o=r.ref),r)i.call(r,s)&&!l.hasOwnProperty(s)&&(a[s]=r[s]);if(e&&e.defaultProps)for(s in r=e.defaultProps)void 0===a[s]&&(a[s]=r[s]);return{$$typeof:t,type:e,key:c,ref:o,props:a,_owner:d.current}}r.Fragment=a,r.jsx=c,r.jsxs=c},4848:(e,r,n)=>{e.exports=n(1020)},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>d});var s=n(6540);const t={},a=s.createContext(t);function i(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);