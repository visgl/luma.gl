/*! For license information please see d8c4b57b.528793a1.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[1142],{9769:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>t,toc:()=>d});var s=r(4848),o=r(8453);const i={},c="Built-in Geometries",t={id:"api-reference/engine/geometry/geometries",title:"Built-in Geometries",description:"@luma.gl/engine provides several built in geometry primitives (subclasses of Geometry). The generated geometry instances will have indices and POSITION, NORMAL and TEXCOORD_0 attributes.",source:"@site/../docs/api-reference/engine/geometry/geometries.md",sourceDirName:"api-reference/engine/geometry",slug:"/api-reference/engine/geometry/geometries",permalink:"/docs/api-reference/engine/geometry/geometries",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/engine/geometry/geometries.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"loadImageBitmap",permalink:"/docs/api-reference/engine/load-image-bitmap"},next:{title:"Geometry",permalink:"/docs/api-reference/engine/geometry/"}},l={},d=[{value:"ConeGeometry",id:"conegeometry",level:2},{value:"constructor(props : Object)",id:"constructorprops--object",level:3},{value:"CubeGeometry",id:"cubegeometry",level:2},{value:"CylinderGeometry",id:"cylindergeometry",level:2},{value:"constructor(props : Object)",id:"constructorprops--object-1",level:3},{value:"IcoSphereGeometry",id:"icospheregeometry",level:2},{value:"constructor(props : Object)",id:"constructorprops--object-2",level:3},{value:"PlaneGeometry",id:"planegeometry",level:2},{value:"constructor(props : Object)",id:"constructorprops--object-3",level:3},{value:"SphereGeometry",id:"spheregeometry",level:2},{value:"constructor(props : Object)",id:"constructorprops--object-4",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"built-in-geometries",children:"Built-in Geometries"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"@luma.gl/engine"})," provides several built in geometry primitives (subclasses of ",(0,s.jsx)(n.a,{href:"/docs/api-reference/engine/geometry",children:"Geometry"}),"). The generated geometry instances will have ",(0,s.jsx)(n.code,{children:"indices"})," and ",(0,s.jsx)(n.code,{children:"POSITION"}),", ",(0,s.jsx)(n.code,{children:"NORMAL"})," and ",(0,s.jsx)(n.code,{children:"TEXCOORD_0"})," attributes."]}),"\n",(0,s.jsx)(n.h2,{id:"conegeometry",children:"ConeGeometry"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"ConeGeometry"})," of base radius 2 and height 3."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {ConeGeometry} from '@luma.gl/engine';\nconst cone = new ConeGeometry({\n  radius: 2,\n  height: 3,\n  cap: true\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"constructorprops--object",children:"constructor(props : Object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.radius"})," (",(0,s.jsx)(n.em,{children:"number"}),"): The radius of the base of the cone."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.cap"}),"=",(0,s.jsx)(n.code,{children:"false"})," (",(0,s.jsx)(n.em,{children:"boolean"}),", optional): Whether to put the cap on the base of the cone."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.nradial"}),"=",(0,s.jsx)(n.code,{children:"10"})," (",(0,s.jsx)(n.em,{children:"number"}),"): number of vertices used to create the disk for a given height."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.nvertical"}),"=",(0,s.jsx)(n.code,{children:"10"})," (",(0,s.jsx)(n.em,{children:"number"}),"): number of vertices for the height."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"cubegeometry",children:"CubeGeometry"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {CubeGeometry} from '@luma.gl/engine';\nconst cube = new CubeGeometry();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cylindergeometry",children:"CylinderGeometry"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"CylinderGeometry"})," of radius 2 and height 3."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {CylinderGeometry} from '@luma.gl/engine';\nconst cylinder = new CylinderGeometry({\n  radius: 2,\n  height: 3\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"constructorprops--object-1",children:"constructor(props : Object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.height"}),"= - (",(0,s.jsx)(n.em,{children:"number"}),") The height of the cylinder."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.radius"}),"= - (",(0,s.jsx)(n.em,{children:"number"}),") The radius of the cylinder."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.nradial"}),"=",(0,s.jsx)(n.code,{children:"10"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The number of vertices for the disk."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.nvertical"}),"=",(0,s.jsx)(n.code,{children:"10"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The number of vertices for the height."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.verticalAxis"}),"=",(0,s.jsx)(n.code,{children:"y"})," - (",(0,s.jsx)(n.em,{children:"string"}),") The axis along which the height is measured. One of ",(0,s.jsx)(n.code,{children:"x"}),", ",(0,s.jsx)(n.code,{children:"y"}),", ",(0,s.jsx)(n.code,{children:"z"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.topCap"}),"=",(0,s.jsx)(n.code,{children:"false"})," - (",(0,s.jsx)(n.em,{children:"boolean"}),") Whether to put the cap on the top of the cylinder."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.bottomCap"}),"=",(0,s.jsx)(n.code,{children:"false"})," - (",(0,s.jsx)(n.em,{children:"boolean"}),") Whether to put the cap on the bottom\npart of the cylinder."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"icospheregeometry",children:"IcoSphereGeometry"}),"\n",(0,s.jsx)(n.p,{children:"Create an IcoSphereGeometry of radius 1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {IcoSphereGeometry} from '@luma.gl/engine';\nconst sphere = new IcoSphereGeometry({\n  iterations: 1\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"constructorprops--object-2",children:"constructor(props : Object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.iterations"}),"=",(0,s.jsx)(n.code,{children:"0"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The number of iterations used to subdivide the Icosahedron."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"planegeometry",children:"PlaneGeometry"}),"\n",(0,s.jsx)(n.p,{children:"Create a XZ plane."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {PlaneGeometry} from '@luma.gl/engine';\nconst plane = new PlaneGeometry({\n  type: 'x,z',\n  xlen: 10,\n  zlen: 20,\n  nx: 5,\n  nz: 5,\n  offset: 0\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"constructorprops--object-3",children:"constructor(props : Object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.type"})," - (",(0,s.jsx)(n.em,{children:"string"}),") Whether is a XY, YZ or XZ plane. Possible values are ",(0,s.jsx)(n.code,{children:"x,y"}),", ",(0,s.jsx)(n.code,{children:"x,z"}),", ",(0,s.jsx)(n.code,{children:"y,z"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.xlen"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The length along the x-axis. Only used in ",(0,s.jsx)(n.code,{children:"x,z"})," or ",(0,s.jsx)(n.code,{children:"x,y"})," planes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.ylen"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The length along the y-axis. Only used in ",(0,s.jsx)(n.code,{children:"y,z"})," or ",(0,s.jsx)(n.code,{children:"x,y"})," planes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.zlen"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The length along the z-axis. Only used in ",(0,s.jsx)(n.code,{children:"x,z"})," or ",(0,s.jsx)(n.code,{children:"y,z"})," planes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.nx"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The number of subdivisions along the x-axis. Only used in ",(0,s.jsx)(n.code,{children:"x,z"})," or ",(0,s.jsx)(n.code,{children:"x,y"})," planes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.ny"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The number of subdivisions along the y-axis. Only used in ",(0,s.jsx)(n.code,{children:"y,z"})," or ",(0,s.jsx)(n.code,{children:"x,y"})," planes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.nz"})," - (",(0,s.jsx)(n.em,{children:"number"}),") The number of subdivisions along the z-axis. Only used in ",(0,s.jsx)(n.code,{children:"x,z"})," or ",(0,s.jsx)(n.code,{children:"y,z"})," planes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.offset"})," - (",(0,s.jsx)(n.em,{children:"number"}),") For XZ planes, the offset along the y-axis. For XY planes, the offset along the z-axis. For YZ planes, the offset along the x-axis."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"spheregeometry",children:"SphereGeometry"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {SphereGeometry} from '@luma.gl/engine';\nconst sphere = new SphereGeometry({\n  radius: 2\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"constructorprops--object-4",children:"constructor(props : Object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.nlat"}),"=",(0,s.jsx)(n.code,{children:"10"})," - (",(0,s.jsx)(n.em,{children:"number"}),", optional) The number of vertices for latitude."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.nlong"}),"=",(0,s.jsx)(n.code,{children:"10"})," - (",(0,s.jsx)(n.em,{children:"number"}),", optional) The number of vertices for longitude."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"props.radius"}),"=",(0,s.jsx)(n.code,{children:"1"})," - (",(0,s.jsx)(n.em,{children:"number"}),", optional) The radius of the sphere."]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1020:(e,n,r)=>{var s=r(6540),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,t=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function d(e,n,r){var s,i={},d=null,h=null;for(s in void 0!==r&&(d=""+r),void 0!==n.key&&(d=""+n.key),void 0!==n.ref&&(h=n.ref),n)c.call(n,s)&&!l.hasOwnProperty(s)&&(i[s]=n[s]);if(e&&e.defaultProps)for(s in n=e.defaultProps)void 0===i[s]&&(i[s]=n[s]);return{$$typeof:o,type:e,key:d,ref:h,props:i,_owner:t.current}}n.Fragment=i,n.jsx=d,n.jsxs=d},4848:(e,n,r)=>{e.exports=r(1020)},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>t});var s=r(6540);const o={},i=s.createContext(o);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);