"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[3193],{3296:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=n(4848),t=n(8453);const i={},o="Shader Modules",d={id:"api-reference/shadertools/shader-conventions",title:"Shader Modules",description:"This describes informal conventions that luma.gl applies to its shaders.",source:"@site/../docs/api-reference/shadertools/shader-conventions.md",sourceDirName:"api-reference/shadertools",slug:"/api-reference/shadertools/shader-conventions",permalink:"/docs/api-reference/shadertools/shader-conventions",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/master/docs/../docs/api-reference/shadertools/shader-conventions.md",tags:[],version:"current",frontMatter:{}},a={},c=[{value:"Uniform Blocks",id:"uniform-blocks",level:2},{value:"Shader Passes",id:"shader-passes",level:2},{value:"Defining your own Shader Modules",id:"defining-your-own-shader-modules",level:3}];function l(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"shader-modules",children:"Shader Modules"})}),"\n",(0,r.jsx)(s.admonition,{type:"caution",children:(0,r.jsx)(s.p,{children:"This describes informal conventions that luma.gl applies to its shaders.\nIt is still a work in progress/"})}),"\n",(0,r.jsx)(s.h2,{id:"uniform-blocks",children:"Uniform Blocks"}),"\n",(0,r.jsx)(s.p,{children:"Shader modules are built around a set of well-defined uniform interface blocks."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Interface Block"}),(0,r.jsx)(s.th,{children:"Binding (Group)"}),(0,r.jsx)(s.th,{children:"Description"}),(0,r.jsx)(s.th,{children:"Usage"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"project"})}),(0,r.jsx)(s.td,{children:"0 (0)"}),(0,r.jsx)(s.td,{children:"camera world position, view and projection matrices"}),(0,r.jsx)(s.td,{children:"Usually static for a view render cycle"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"lighting"})}),(0,r.jsx)(s.td,{children:"1 (0)"}),(0,r.jsx)(s.td,{children:"ambient light color, directional light array, point light color array"}),(0,r.jsx)(s.td,{children:"Usually static for a scene"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"material"})}),(0,r.jsx)(s.td,{children:"2 (1)"}),(0,r.jsx)(s.td,{children:"PBR parameters, base color, ..."}),(0,r.jsx)(s.td,{children:"Uniform buffer can be pre-calculated for each material and swapped in"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"postprocessing"})}),(0,r.jsx)(s.td,{children:"3"}),(0,r.jsx)(s.td,{children:"parameters for current post processing effect (often independent of other interfaces)"}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"This helps respect the limited budget for uniform blocks."}),"\n",(0,r.jsx)(s.h2,{id:"shader-passes",children:"Shader Passes"}),"\n",(0,r.jsx)(s.p,{children:"It is possible to package up many typical screen-space post-processing steps as a shader module."}),"\n",(0,r.jsxs)(s.p,{children:["Sometimes a pass needs to be run several times with some internal uniform changed. This can be described\nby adding the ",(0,r.jsx)(s.code,{children:"passes"})," field to a shader module."]}),"\n",(0,r.jsx)(s.h3,{id:"defining-your-own-shader-modules",children:"Defining your own Shader Modules"}),"\n",(0,r.jsx)(s.p,{children:"It is important that the order and types of declarations of uniforms match those in the shader."})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>d});var r=n(6540);const t={},i=r.createContext(t);function o(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);