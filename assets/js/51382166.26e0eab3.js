"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[7711],{3193:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=i(4848),r=i(8453);const o={},s="Histopyramid",l={id:"api-reference/engine/gpgpu/histopyramid",title:"Histopyramid",description:"Histopyramid aka Histogram Pyramid provides an efficient way of converting sparse matrix (represented by a texture) into list of coordinates (points). Where each active cell in the matrix can contribute to 1 or more points. All operations of the algorithm can be executed in parallel hence are performed on the GPU.",source:"@site/../docs/api-reference/engine/gpgpu/histopyramid.md",sourceDirName:"api-reference/engine/gpgpu",slug:"/api-reference/engine/gpgpu/histopyramid",permalink:"/docs/api-reference/engine/gpgpu/histopyramid",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/master/docs/../docs/api-reference/engine/gpgpu/histopyramid.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"GPUPointInPolygon",permalink:"/docs/api-reference/engine/gpgpu/gpu-point-in-polygon"},next:{title:"Overview",permalink:"/docs/api-reference/gltf/"}},c={},d=[{value:"Methods",id:"methods",level:2},{value:"buildHistopyramidBaseLevel(gl : WebGLRenderingContext, opts : Object) : Object",id:"buildhistopyramidbaselevelgl--webglrenderingcontext-opts--object--object",level:3},{value:"getHistoPyramid(gl : WebGLRenderingContext, opts : Object) : Object",id:"gethistopyramidgl--webglrenderingcontext-opts--object--object",level:3},{value:"histoPyramidGenerateIndices(gl : WebGLRenderingContext, opts : Object) : Object",id:"histopyramidgenerateindicesgl--webglrenderingcontext-opts--object--object",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"histopyramid",children:"Histopyramid"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Histopyramid"})," aka ",(0,t.jsx)(n.code,{children:"Histogram Pyramid"})," provides an efficient way of converting sparse matrix (represented by a texture) into list of coordinates (points). Where each active cell in the matrix can contribute to 1 or more points. All operations of the algorithm can be executed in parallel hence are performed on the GPU."]}),"\n",(0,t.jsxs)(n.p,{children:["Following set of methods implement ",(0,t.jsx)(n.code,{children:"Histopyramid"})," operations as described in ",(0,t.jsx)(n.code,{children:"High\u2010speed marching cubes using histopyramids"})," by ",(0,t.jsx)(n.code,{children:"Dyken C"}),", ",(0,t.jsx)(n.code,{children:"Ziegler G"}),", ",(0,t.jsx)(n.code,{children:"Theobalt C"})," and ",(0,t.jsx)(n.code,{children:"Seidel H"}),"\nLink to the paper: ",(0,t.jsx)(n.a,{href:"http://olmozavala.com/Custom/OpenGL/Tutorials/OpenGL4_Examples/MarchingCubes_Dyken/Dyken_et_al-2008-Computer_Graphics_Forum.pdf",children:"http://olmozavala.com/Custom/OpenGL/Tutorials/OpenGL4_Examples/MarchingCubes_Dyken/Dyken_et_al-2008-Computer_Graphics_Forum.pdf"})]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"buildhistopyramidbaselevelgl--webglrenderingcontext-opts--object--object",children:"buildHistopyramidBaseLevel(gl : WebGLRenderingContext, opts : Object) : Object"}),"\n",(0,t.jsx)(n.p,{children:"Takes an input texture, and builds base level (level 0) histogram pyramid. Also packs 4 weights of a 2X2 area into a single RGBA channel of base level texture."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gl"})," - WebGL context."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"opts"})," (",(0,t.jsx)(n.code,{children:"Object"}),"=",") - options","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"texture"})," (",(0,t.jsx)(n.code,{children:"Texture2D"}),") - Source texture for which base histopyramid level to be built."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"channel"})," (",(0,t.jsx)(n.code,{children:"String"}),", Optional, Default: ",(0,t.jsx)(n.code,{children:"r"}),") - Pixel channel of source texture to be used in building histopyramid."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns an object with following fields."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"baseTexture"})," (",(0,t.jsx)(n.code,{children:"Texture2D"}),") - Base level texture object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"flatPyramidTexture"})," (",(0,t.jsx)(n.code,{children:"Texture2D"}),") - Texture with enough size, that can hold all levels of histopyramid. Base level texture is already copied at xy offset of (0, 0)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"textureData"})," (",(0,t.jsx)(n.code,{children:"ArrayBuffer"}),", Optional) - Array containing data of base level texture. Returned only when base level texture size is 1X1."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"gethistopyramidgl--webglrenderingcontext-opts--object--object",children:"getHistoPyramid(gl : WebGLRenderingContext, opts : Object) : Object"}),"\n",(0,t.jsx)(n.p,{children:"Takes an input texture, and builds all levels of histogram pyramid. All levels are RGBA textues, where each pixels packs 4 weights of a 2X2 texture region."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gl"})," - WebGL context."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"opts"})," (",(0,t.jsx)(n.code,{children:"Object"}),"=",") - options","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"texture"})," (",(0,t.jsx)(n.code,{children:"Texture2D"}),") - Source texture for which base histopyramid level to be built."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"channel"})," (",(0,t.jsx)(n.code,{children:"String"}),", Optional, Default: ",(0,t.jsx)(n.code,{children:"r"}),") - Pixel channel of source texture to be used in building histopyramid."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns an object with following fields."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pyramidTextures"})," (",(0,t.jsx)(n.code,{children:"Array"}),") - Array of ",(0,t.jsx)(n.code,{children:"Texture2D"})," objects representing all mip levels of the histopyramid."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"flatPyramidTexture"})," (",(0,t.jsx)(n.code,{children:"Texture2D"}),") - ",(0,t.jsx)(n.code,{children:"Texture2D"})," object with all the mip levels laid out horizontally, with base level texture at the origin. Size of this texture is same as input texture."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"levelCount"})," (",(0,t.jsx)(n.code,{children:"Number"}),") - Number of mip levels generated."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"topLevelData"})," (",(0,t.jsx)(n.code,{children:"ArrayBuffer"}),") - Array containing data from the last (1X1) mip level. This contains the number of points that can be generated from this texture."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"histopyramidgenerateindicesgl--webglrenderingcontext-opts--object--object",children:"histoPyramidGenerateIndices(gl : WebGLRenderingContext, opts : Object) : Object"}),"\n",(0,t.jsxs)(n.p,{children:["Takes an input texture, and generates a ",(0,t.jsx)(n.code,{children:"Buffer"})," object with list of points that correspond to non zero values of the texture."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gl"})," - WebGL context."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"opts"})," (",(0,t.jsx)(n.code,{children:"Object"}),"=",") - options","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"texture"})," (",(0,t.jsx)(n.code,{children:"Texture2D"}),") - Source texture for which base histopyramid level to be built."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"channel"})," (",(0,t.jsx)(n.code,{children:"String"}),", Optional, Default: ",(0,t.jsx)(n.code,{children:"r"}),") - Pixel channel of source texture to be used in building histopyramid."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns an object with following fields."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"locationAndIndexBuffer"})," (",(0,t.jsx)(n.code,{children:"Buffer"}),"): ",(0,t.jsx)(n.code,{children:"Buffer"})," object contains coordinate data of generated points. Each point is represented 4 floats (XYZW). Where ",(0,t.jsx)(n.code,{children:"X"})," contains x coordinate, ",(0,t.jsx)(n.code,{children:"Y"})," contains y coordinate and ",(0,t.jsx)(n.code,{children:"Z"})," contains local key-index and ",(0,t.jsx)(n.code,{children:"W"})," contains key-index. x and y coordiantes of the point are with in ((0,0) to (width, height)] range, where ",(0,t.jsx)(n.code,{children:"width"})," and ",(0,t.jsx)(n.code,{children:"height"})," are dimensions of source texture object."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);