"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[7405],{4750:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>d,toc:()=>a});var n=r(4848),o=r(8453);const t={},i="ComputePass",d={id:"api-reference/core/resources/compute-pass",title:"ComputePass",description:"WebGPU only",source:"@site/../docs/api-reference/core/resources/compute-pass.md",sourceDirName:"api-reference/core/resources",slug:"/api-reference/core/resources/compute-pass",permalink:"/docs/api-reference/core/resources/compute-pass",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/master/docs/../docs/api-reference/core/resources/compute-pass.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Buffer",permalink:"/docs/api-reference/core/resources/buffer"},next:{title:"ComputePipeline",permalink:"/docs/api-reference/core/resources/compute-pipeline"}},c={},a=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"<code>ComputePassProps</code>",id:"computepassprops",level:3},{value:"Members",id:"members",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>constructor(props: ComputePassProps)</code>",id:"constructorprops-computepassprops",level:3},{value:"<code>endPass(): void</code>",id:"endpass-void",level:3},{value:"<code>pushDebugGroup(groupLabel: string): void</code>",id:"pushdebuggroupgrouplabel-string-void",level:3},{value:"<code>popDebugGroup(): void</code>",id:"popdebuggroup-void",level:3},{value:"<code>insertDebugMarker(markerLabel: string): void</code>",id:"insertdebugmarkermarkerlabel-string-void",level:3}];function p(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"computepass",children:"ComputePass"})}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsx)(s.p,{children:"WebGPU only"})}),"\n",(0,n.jsx)(s.p,{children:"A pass on which to run computations with compute pipelines."}),"\n",(0,n.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(s.p,{children:"Create and run a compute shader that multiplies an array of numbers by 2."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"const source = /*WGSL*/`\\\n@group(0) @binding(0) var<storage, read_write> data: array<i32>;\n@compute @workgroup_size(1) fn main(@builtin(global_invocation_id) id: vec3<u32>) {\n  let i = id.x;\n  data[i] = 2 * data[i];\n}`;\n\nconst shader = webgpuDevice.createShader({source});\nconst computePipeline = webgpuDevice.createComputePipeline({\n  shader,\n  shaderLayout: {\n    bindings: [{name: 'data', type: 'storage', location: 0}]\n  }\n});\n\nconst workBuffer = webgpuDevice.createBuffer({\n  byteLength: 4,\n  usage: Buffer.STORAGE | Buffer.COPY_SRC | Buffer.COPY_DST,\n});\n\nworkBuffer.write(new Int32Array([2]));\n\ncomputePipeline.setBindings({data: workBuffer});\n\nconst computePass = webgpuDevice.beginComputePass({});\ncomputePass.setPipeline(computePipeline);\ncomputePass.dispatch(1);\ncomputePass.end();\n\nwebgpuDevice.submit();\n\nconst computedData = new Int32Array(await workBuffer.readAsync());\n// computedData[0] === 4\n"})}),"\n",(0,n.jsx)(s.h2,{id:"types",children:"Types"}),"\n",(0,n.jsx)(s.h3,{id:"computepassprops",children:(0,n.jsx)(s.code,{children:"ComputePassProps"})}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Property"}),(0,n.jsx)(s.th,{children:"Type"}),(0,n.jsx)(s.th,{children:"Description"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"N/A"}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]})})]}),"\n",(0,n.jsx)(s.h2,{id:"members",children:"Members"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"device"}),": ",(0,n.jsx)(s.code,{children:"Device"})," - holds a reference to the ",(0,n.jsx)(s.code,{children:"Device"})," that created this ",(0,n.jsx)(s.code,{children:"ComputePass"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"handle"}),": ",(0,n.jsx)(s.code,{children:"unknown"})," - holds the underlying WebGL or WebGPU shader object"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"props"}),": ",(0,n.jsx)(s.code,{children:"ComputePassProps"})," - holds a copy of the ",(0,n.jsx)(s.code,{children:"ComputePassProps"})," used to create this ",(0,n.jsx)(s.code,{children:"ComputePass"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"constructorprops-computepassprops",children:(0,n.jsx)(s.code,{children:"constructor(props: ComputePassProps)"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"ComputePass"})," is an abstract class and cannot be instantiated directly. Create with ",(0,n.jsx)(s.code,{children:"device.beginComputePass(...)"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"endpass-void",children:(0,n.jsx)(s.code,{children:"endPass(): void"})}),"\n",(0,n.jsx)(s.p,{children:"Free up any GPU resources associated with this render pass."}),"\n",(0,n.jsx)(s.h3,{id:"pushdebuggroupgrouplabel-string-void",children:(0,n.jsx)(s.code,{children:"pushDebugGroup(groupLabel: string): void"})}),"\n",(0,n.jsx)(s.p,{children:"Adds a debug group (implementation dependent)."}),"\n",(0,n.jsx)(s.h3,{id:"popdebuggroup-void",children:(0,n.jsx)(s.code,{children:"popDebugGroup(): void"})}),"\n",(0,n.jsx)(s.p,{children:"Removes a debug group (implementation dependent)."}),"\n",(0,n.jsx)(s.h3,{id:"insertdebugmarkermarkerlabel-string-void",children:(0,n.jsx)(s.code,{children:"insertDebugMarker(markerLabel: string): void"})}),"\n",(0,n.jsx)(s.p,{children:"Adds a debug marker (implementation dependent)."})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>d});var n=r(6540);const o={},t=n.createContext(o);function i(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);